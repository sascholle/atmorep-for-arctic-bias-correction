0: Evaluating for first 10 N-ICE time points:
0:   [0] 2015-01-21 21:00
0: Running global_forecast for 2015-01-21 21:00:00 ...
0: Wandb run: atmorep-g9943ei8-19560740
0: l50078:450898:450898 [0] NCCL INFO Bootstrap : Using ib0:10.128.11.158<0>
0: l50078:450898:450898 [0] NCCL INFO NET/Plugin: No plugin found (libnccl-net.so)
0: l50078:450898:450898 [0] NCCL INFO NET/Plugin: Plugin load returned 2 : libnccl-net.so: cannot open shared object file: No such file or directory : when loading libnccl-net.so
0: l50078:450898:450898 [0] NCCL INFO NET/Plugin: Using internal network plugin.
0: l50078:450898:450898 [0] NCCL INFO cudaDriverVersion 12060
0: NCCL version 2.21.5+cuda12.4
0: l50078:450898:451297 [0] NCCL INFO NET/IB : Using [0]mlx5_0:1/IB [1]mlx5_1:1/IB [RO]; OOB ib0:10.128.11.158<0>
0: l50078:450898:451297 [0] NCCL INFO Using non-device net plugin version 0
0: l50078:450898:451297 [0] NCCL INFO Using network IB
0: l50078:450898:451297 [0] NCCL INFO DMA-BUF is available on GPU device 0
0: l50078:450898:451297 [0] NCCL INFO ncclCommInitRank comm 0x55555f739bd0 rank 0 nranks 1 cudaDev 0 nvmlDev 0 busId 84000 commId 0x1ba877798649dd1b - Init START
0: l50078:450898:451297 [0] NCCL INFO Setting affinity for GPU 0 to 1fff0000,00000000,00000000,00000000,1fff0000,00000000,00000000,00000000
0: l50078:450898:451297 [0] NCCL INFO comm 0x55555f739bd0 rank 0 nRanks 1 nNodes 1 localRanks 1 localRank 0 MNNVL 0
0: l50078:450898:451297 [0] NCCL INFO Channel 00/32 :    0
0: l50078:450898:451297 [0] NCCL INFO Channel 01/32 :    0
0: l50078:450898:451297 [0] NCCL INFO Channel 02/32 :    0
0: l50078:450898:451297 [0] NCCL INFO Channel 03/32 :    0
0: l50078:450898:451297 [0] NCCL INFO Channel 04/32 :    0
0: l50078:450898:451297 [0] NCCL INFO Channel 05/32 :    0
0: l50078:450898:451297 [0] NCCL INFO Channel 06/32 :    0
0: l50078:450898:451297 [0] NCCL INFO Channel 07/32 :    0
0: l50078:450898:451297 [0] NCCL INFO Channel 08/32 :    0
0: l50078:450898:451297 [0] NCCL INFO Channel 09/32 :    0
0: l50078:450898:451297 [0] NCCL INFO Channel 10/32 :    0
0: l50078:450898:451297 [0] NCCL INFO Channel 11/32 :    0
0: l50078:450898:451297 [0] NCCL INFO Channel 12/32 :    0
0: l50078:450898:451297 [0] NCCL INFO Channel 13/32 :    0
0: l50078:450898:451297 [0] NCCL INFO Channel 14/32 :    0
0: l50078:450898:451297 [0] NCCL INFO Channel 15/32 :    0
0: l50078:450898:451297 [0] NCCL INFO Channel 16/32 :    0
0: l50078:450898:451297 [0] NCCL INFO Channel 17/32 :    0
0: l50078:450898:451297 [0] NCCL INFO Channel 18/32 :    0
0: l50078:450898:451297 [0] NCCL INFO Channel 19/32 :    0
0: l50078:450898:451297 [0] NCCL INFO Channel 20/32 :    0
0: l50078:450898:451297 [0] NCCL INFO Channel 21/32 :    0
0: l50078:450898:451297 [0] NCCL INFO Channel 22/32 :    0
0: l50078:450898:451297 [0] NCCL INFO Channel 23/32 :    0
0: l50078:450898:451297 [0] NCCL INFO Channel 24/32 :    0
0: l50078:450898:451297 [0] NCCL INFO Channel 25/32 :    0
0: l50078:450898:451297 [0] NCCL INFO Channel 26/32 :    0
0: l50078:450898:451297 [0] NCCL INFO Channel 27/32 :    0
0: l50078:450898:451297 [0] NCCL INFO Channel 28/32 :    0
0: l50078:450898:451297 [0] NCCL INFO Channel 29/32 :    0
0: l50078:450898:451297 [0] NCCL INFO Channel 30/32 :    0
0: l50078:450898:451297 [0] NCCL INFO Channel 31/32 :    0
0: l50078:450898:451297 [0] NCCL INFO Trees [0] -1/-1/-1->0->-1 [1] -1/-1/-1->0->-1 [2] -1/-1/-1->0->-1 [3] -1/-1/-1->0->-1 [4] -1/-1/-1->0->-1 [5] -1/-1/-1->0->-1 [6] -1/-1/-1->0->-1 [7] -1/-1/-1->0->-1 [8] -1/-1/-1->0->-1 [9] -1/-1/-1->0->-1 [10] -1/-1/-1->0->-1 [11] -1/-1/-1->0->-1 [12] -1/-1/-1->0->-1 [13] -1/-1/-1->0->-1 [14] -1/-1/-1->0->-1 [15] -1/-1/-1->0->-1 [16] -1/-1/-1->0->-1 [17] -1/-1/-1->0->-1 [18] -1/-1/-1->0->-1 [19] -1/-1/-1->0->-1 [20] -1/-1/-1->0->-1 [21] -1/-1/-1->0->-1 [22] -1/-1/-1->0->-1 [23] -1/-1/-1->0->-1 [24] -1/-1/-1->0->-1 [25] -1/-1/-1->0->-1 [26] -1/-1/-1->0->-1 [27] -1/-1/-1->0->-1 [28] -1/-1/-1->0->-1 [29] -1/-1/-1->0->-1 [30] -1/-1/-1->0->-1 [31] -1/-1/-1->0->-1
0: l50078:450898:451297 [0] NCCL INFO P2P Chunksize set to 131072
0: l50078:450898:451297 [0] NCCL INFO Connected all rings
0: l50078:450898:451297 [0] NCCL INFO Connected all trees
0: l50078:450898:451297 [0] NCCL INFO 32 coll channels, 32 collnet channels, 0 nvls channels, 32 p2p channels, 32 p2p channels per peer
0: l50078:450898:451297 [0] NCCL INFO TUNER/Plugin: Plugin load returned 11 : libnccl-net.so: cannot open shared object file: No such file or directory : when loading libnccl-tuner.so
0: l50078:450898:451297 [0] NCCL INFO TUNER/Plugin: Using internal tuner plugin.
0: l50078:450898:451297 [0] NCCL INFO ncclCommInitRank comm 0x55555f739bd0 rank 0 nranks 1 cudaDev 0 nvmlDev 0 busId 84000 commId 0x1ba877798649dd1b - Init COMPLETE
0: Running Evaluate.evaluate with mode = global_forecast
0: With config:
0: model_id = iuw3ce3v_single_gpu
0: time_pos = N/A
0: Available keys in the Zarr dataset: ['data', 'data_sfc', 'lats', 'lons', 'time']
0: self.ds['data'] : (105192, 7, 5, 721, 1440) :: (105192,)
0: self.lats : (71,)
0: self.lons : (1440,)
0: Available keys in the Zarr dataset: ['data', 'data_sfc', 'lats', 'lons', 'time']
0: self.ds['data'] : (105192, 7, 5, 721, 1440) :: (105192,)
0: self.lats : (71,)
0: self.lons : (1440,)
0: ['cuda:0'] 0
0: ['cuda:0'] 0
0: ['cuda:0'] 0
0: ['cuda:0'] 0
0: ['cuda:0'] 0
0: ['cuda:0'] 0
0: ['cuda:0'] 0
0: ['cuda:0'] 0
0: Loaded model id = iuw3ce3v_single_gpu.
0: Number of batches per global forecast: 14
0: with_ddp : True
0: num_accs_per_task : 1
0: par_rank : 0
0: par_size : 1
0: fields : [['velocity_u', [1, 1024, ['velocity_v', 'temperature'], 0, ['j8dwr5qj', -2]], [96, 105, 114, 123, 137], [12, 3, 6], [3, 18, 18], [0.5, 0.9, 0.2, 0.05]], ['velocity_v', [1, 1024, ['velocity_u', 'temperature'], 0, ['0tlnm5up', -2]], [96, 105, 114, 123, 137], [12, 3, 6], [3, 18, 18], [0.5, 0.9, 0.2, 0.05]], ['specific_humidity', [1, 1024, ['velocity_u', 'velocity_v', 'temperature'], 0, ['v63l01zu', -2]], [96, 105, 114, 123, 137], [12, 3, 6], [3, 18, 18], [0.5, 0.9, 0.2, 0.05]], ['velocity_z', [1, 1024, ['velocity_u', 'velocity_v', 'temperature'], 0, ['9l1errbo', -2]], [96, 105, 114, 123, 137], [12, 3, 6], [3, 18, 18], [0.5, 0.9, 0.2, 0.05]], ['temperature', [1, 1024, ['velocity_u', 'velocity_v', 'specific_humidity'], 0, ['7ojls62c', -2]], [96, 105, 114, 123, 137], [12, 2, 4], [3, 27, 27], [0.5, 0.9, 0.2, 0.05], 'Local'], ['total_precip', [1, 1024, ['velocity_u', 'velocity_v', 'velocity_z', 'specific_humidity'], 0], [0], [12, 6, 12], [3, 9, 9], [0.25, 0.9, 0.1, 0.05]], ['t2m', [1, 1024, ['velocity_u', '
0: velocity_v', 'velocity_z', 'specific_humidity', 'temperature'], 0], [0], [12, 2, 4], [3, 27, 27], [0.5, 0.9, 0.2, 0.05], 'Local'], ['corrected_t2m', [1, 1024, ['velocity_u', 'velocity_v', 'velocity_z', 'specific_humidity', 't2m'], 0], [0], [12, 2, 4], [3, 27, 27], [0.1, 0.9, 0.2, 0.05], 'Local']]
0: fields_prediction : [['velocity_u', 0.125], ['velocity_v', 0.125], ['specific_humidity', 0.05], ['velocity_z', 0.01], ['temperature', 0.1], ['total_precip', 0.01], ['t2m', 0.2], ['corrected_t2m', 0.38]]
0: fields_targets : []
0: years_train : [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020]
0: years_val : [2021]
0: month : None
0: geo_range_sampling : [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 
0: 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
0:  372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576
0: , 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 78
0: 1, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 9
0: 86, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1
0: 159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329,
0:  1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439]]
0: time_sampling : 1
0: torch_seed : 5521420987310380410
0: batch_size_validation : 1
0: batch_size : 1
0: num_epochs : 128
0: num_samples_per_epoch : 480
0: num_samples_validate : 128
0: num_loader_workers : 12
0: size_token_info : 8
0: size_token_info_net : 16
0: grad_checkpointing : True
0: with_cls : False
0: with_mixed_precision : True
0: with_layernorm : True
0: coupling_num_heads_per_field : 1
0: dropout_rate : 0.05
0: with_qk_lnorm : True
0: encoder_num_layers : 6
0: encoder_num_heads : 16
0: encoder_num_mlp_layers : 2
0: encoder_att_type : dense
0: decoder_num_layers : 6
0: decoder_num_heads : 16
0: decoder_num_mlp_layers : 2
0: decoder_self_att : False
0: decoder_cross_att_ratio : 0.5
0: decoder_cross_att_rate : 1.0
0: decoder_att_type : dense
0: net_tail_num_nets : 16
0: net_tail_num_layers : 0
0: losses : ['mse_ensemble', 'stats']
0: optimizer_zero : False
0: lr_start : 1e-05
0: lr_max : 2e-05
0: lr_min : 1e-05
0: weight_decay : 0.025
0: lr_decay_rate : 1.025
0: lr_start_epochs : 3
0: model_log_frequency : 256
0: BERT_strategy : global_forecast
0: forecast_num_tokens : 2
0: BERT_fields_synced : False
0: BERT_mr_max : 2
0: log_test_num_ranks : 1
0: save_grads : False
0: profile : False
0: test_initial : False
0: attention : False
0: rng_seed : None
0: with_wandb : True
0: slurm_job_id : 19560740
0: wandb_id : g9943ei8
0: file_path : /scratch/a/a270277/atmorep/era5_y2010_2020_res25_corrected_t2m.zarr
0: n_size : [36, 13.5, 27.0]
0: model_id : dhap4i9v
0: years_test : [2021]
0: with_pytest : False
0: batch_size_test : 24
0: dates : [[2015, 1, 21, 21]]
0: token_overlap : [0, 0]
0: Processing batch 32, sample 0 :: lat [], lon [108.   108.25 108.5  108.75 109.   109.25 109.5  109.75 110.   110.25
0:  110.5  110.75 111.   111.25 111.5  111.75 112.   112.25 112.5  112.75
0:  113.   113.25 113.5  113.75 114.   114.25 114.5  114.75 115.   115.25
0:  115.5  115.75 116.   116.25 116.5  116.75 117.   117.25 117.5  117.75
0:  118.   118.25 118.5  118.75 119.   119.25 119.5  119.75 120.   120.25
0:  120.5  120.75 121.   121.25 121.5  121.75 122.   122.25 122.5  122.75
0:  123.   123.25 123.5  123.75 124.   124.25 124.5  124.75 125.   125.25
0:  125.5  125.75 126.   126.25 126.5  126.75 127.   127.25 127.5  127.75
0:  128.   128.25 128.5  128.75 129.   129.25 129.5  129.75 130.   130.25
0:  130.5  130.75 131.   131.25 131.5  131.75 132.   132.25 132.5  132.75
0:  133.   133.25 133.5  133.75 134.   134.25 134.5  134.75], time [datetime.datetime(2015, 1, 20, 10, 0)
0:  datetime.datetime(2015, 1, 20, 11, 0)
0:  datetime.datetime(2015, 1, 20, 12, 0)
0:  datetime.datetime(2015, 1, 20, 13, 0)
0:  datetime.datetime(2015, 1, 20, 14, 0)
0:  datetime.datetime(2015, 1, 20, 15, 0)
0:  datetime.datetime(2015, 1, 20, 16, 0)
0:  datetime.datetime(2015, 1, 20, 17, 0)
0:  datetime.datetime(2015, 1, 20, 18, 0)
0:  datetime.datetime(2015, 1, 20, 19, 0)
0:  datetime.datetime(2015, 1, 20, 20, 0)
0:  datetime.datetime(2015, 1, 20, 21, 0)
0:  datetime.datetime(2015, 1, 20, 22, 0)
0:  datetime.datetime(2015, 1, 20, 23, 0)
0:  datetime.datetime(2015, 1, 21, 0, 0) datetime.datetime(2015, 1, 21, 1, 0)
0:  datetime.datetime(2015, 1, 21, 2, 0) datetime.datetime(2015, 1, 21, 3, 0)
0:  datetime.datetime(2015, 1, 21, 4, 0) datetime.datetime(2015, 1, 21, 5, 0)
0:  datetime.datetime(2015, 1, 21, 6, 0) datetime.datetime(2015, 1, 21, 7, 0)
0:  datetime.datetime(2015, 1, 21, 8, 0) datetime.datetime(2015, 1, 21, 9, 0)
0:  datetime.datetime(2015, 1, 21, 10, 0)
0:  datetime.datetime(2015, 1, 21, 11, 0)
0:  datetime.datetime(2015, 1, 21, 12, 0)
0:  datetime.datetime(2015, 1, 21, 13, 0)
0:  datetime.datetime(2015, 1, 21, 14, 0)
0:  datetime.datetime(2015, 1, 21, 15, 0)
0:  datetime.datetime(2015, 1, 21, 16, 0)
0:  datetime.datetime(2015, 1, 21, 17, 0)
0:  datetime.datetime(2015, 1, 21, 18, 0)
0:  datetime.datetime(2015, 1, 21, 19, 0)
0:  datetime.datetime(2015, 1, 21, 20, 0)
0:  datetime.datetime(2015, 1, 21, 21, 0)]
0: Processing batch 80, sample 0 :: lat [], lon [270.   270.25 270.5  270.75 271.   271.25 271.5  271.75 272.   272.25
0:  272.5  272.75 273.   273.25 273.5  273.75 274.   274.25 274.5  274.75
0:  275.   275.25 275.5  275.75 276.   276.25 276.5  276.75 277.   277.25
0:  277.5  277.75 278.   278.25 278.5  278.75 279.   279.25 279.5  279.75
0:  280.   280.25 280.5  280.75 281.   281.25 281.5  281.75 282.   282.25
0:  282.5  282.75 283.   283.25 283.5  283.75 284.   284.25 284.5  284.75
0:  285.   285.25 285.5  285.75 286.   286.25 286.5  286.75 287.   287.25
0:  287.5  287.75 288.   288.25 288.5  288.75 289.   289.25 289.5  289.75
0:  290.   290.25 290.5  290.75 291.   291.25 291.5  291.75 292.   292.25
0:  292.5  292.75 293.   293.25 293.5  293.75 294.   294.25 294.5  294.75
0:  295.   295.25 295.5  295.75 296.   296.25 296.5  296.75], time [datetime.datetime(2015, 1, 20, 10, 0)
0:  datetime.datetime(2015, 1, 20, 11, 0)
0:  datetime.datetime(2015, 1, 20, 12, 0)
0:  datetime.datetime(2015, 1, 20, 13, 0)
0:  datetime.datetime(2015, 1, 20, 14, 0)
0:  datetime.datetime(2015, 1, 20, 15, 0)
0:  datetime.datetime(2015, 1, 20, 16, 0)
0:  datetime.datetime(2015, 1, 20, 17, 0)
0:  datetime.datetime(2015, 1, 20, 18, 0)
0:  datetime.datetime(2015, 1, 20, 19, 0)
0:  datetime.datetime(2015, 1, 20, 20, 0)
0:  datetime.datetime(2015, 1, 20, 21, 0)
0:  datetime.datetime(2015, 1, 20, 22, 0)
0:  datetime.datetime(2015, 1, 20, 23, 0)
0:  datetime.datetime(2015, 1, 21, 0, 0) datetime.datetime(2015, 1, 21, 1, 0)
0:  datetime.datetime(2015, 1, 21, 2, 0) datetime.datetime(2015, 1, 21, 3, 0)
0:  datetime.datetime(2015, 1, 21, 4, 0) datetime.datetime(2015, 1, 21, 5, 0)
0:  datetime.datetime(2015, 1, 21, 6, 0) datetime.datetime(2015, 1, 21, 7, 0)
0:  datetime.datetime(2015, 1, 21, 8, 0) datetime.datetime(2015, 1, 21, 9, 0)
0:  datetime.datetime(2015, 1, 21, 10, 0)
0:  datetime.datetime(2015, 1, 21, 11, 0)
0:  datetime.datetime(2015, 1, 21, 12, 0)
0:  datetime.datetime(2015, 1, 21, 13, 0)
0:  datetime.datetime(2015, 1, 21, 14, 0)
0:  datetime.datetime(2015, 1, 21, 15, 0)
0:  datetime.datetime(2015, 1, 21, 16, 0)
0:  datetime.datetime(2015, 1, 21, 17, 0)
0:  datetime.datetime(2015, 1, 21, 18, 0)
0:  datetime.datetime(2015, 1, 21, 19, 0)
0:  datetime.datetime(2015, 1, 21, 20, 0)
0:  datetime.datetime(2015, 1, 21, 21, 0)]
0: Processing batch 176, sample 0 :: lat [], lon [216.   216.25 216.5  216.75 217.   217.25 217.5  217.75 218.   218.25
0:  218.5  218.75 219.   219.25 219.5  219.75 220.   220.25 220.5  220.75
0:  221.   221.25 221.5  221.75 222.   222.25 222.5  222.75 223.   223.25
0:  223.5  223.75 224.   224.25 224.5  224.75 225.   225.25 225.5  225.75
0:  226.   226.25 226.5  226.75 227.   227.25 227.5  227.75 228.   228.25
0:  228.5  228.75 229.   229.25 229.5  229.75 230.   230.25 230.5  230.75
0:  231.   231.25 231.5  231.75 232.   232.25 232.5  232.75 233.   233.25
0:  233.5  233.75 234.   234.25 234.5  234.75 235.   235.25 235.5  235.75
0:  236.   236.25 236.5  236.75 237.   237.25 237.5  237.75 238.   238.25
0:  238.5  238.75 239.   239.25 239.5  239.75 240.   240.25 240.5  240.75
0:  241.   241.25 241.5  241.75 242.   242.25 242.5  242.75], time [datetime.datetime(2015, 1, 20, 10, 0)
0:  datetime.datetime(2015, 1, 20, 11, 0)
0:  datetime.datetime(2015, 1, 20, 12, 0)
0:  datetime.datetime(2015, 1, 20, 13, 0)
0:  datetime.datetime(2015, 1, 20, 14, 0)
0:  datetime.datetime(2015, 1, 20, 15, 0)
0:  datetime.datetime(2015, 1, 20, 16, 0)
0:  datetime.datetime(2015, 1, 20, 17, 0)
0:  datetime.datetime(2015, 1, 20, 18, 0)
0:  datetime.datetime(2015, 1, 20, 19, 0)
0:  datetime.datetime(2015, 1, 20, 20, 0)
0:  datetime.datetime(2015, 1, 20, 21, 0)
0:  datetime.datetime(2015, 1, 20, 22, 0)
0:  datetime.datetime(2015, 1, 20, 23, 0)
0:  datetime.datetime(2015, 1, 21, 0, 0) datetime.datetime(2015, 1, 21, 1, 0)
0:  datetime.datetime(2015, 1, 21, 2, 0) datetime.datetime(2015, 1, 21, 3, 0)
0:  datetime.datetime(2015, 1, 21, 4, 0) datetime.datetime(2015, 1, 21, 5, 0)
0:  datetime.datetime(2015, 1, 21, 6, 0) datetime.datetime(2015, 1, 21, 7, 0)
0:  datetime.datetime(2015, 1, 21, 8, 0) datetime.datetime(2015, 1, 21, 9, 0)
0:  datetime.datetime(2015, 1, 21, 10, 0)
0:  datetime.datetime(2015, 1, 21, 11, 0)
0:  datetime.datetime(2015, 1, 21, 12, 0)
0:  datetime.datetime(2015, 1, 21, 13, 0)
0:  datetime.datetime(2015, 1, 21, 14, 0)
0:  datetime.datetime(2015, 1, 21, 15, 0)
0:  datetime.datetime(2015, 1, 21, 16, 0)
0:  datetime.datetime(2015, 1, 21, 17, 0)
0:  datetime.datetime(2015, 1, 21, 18, 0)
0:  datetime.datetime(2015, 1, 21, 19, 0)
0:  datetime.datetime(2015, 1, 21, 20, 0)
0:  datetime.datetime(2015, 1, 21, 21, 0)]
0: Processing batch 128, sample 0 :: lat [], lon [54.   54.25 54.5  54.75 55.   55.25 55.5  55.75 56.   56.25 56.5  56.75
0:  57.   57.25 57.5  57.75 58.   58.25 58.5  58.75 59.   59.25 59.5  59.75
0:  60.   60.25 60.5  60.75 61.   61.25 61.5  61.75 62.   62.25 62.5  62.75
0:  63.   63.25 63.5  63.75 64.   64.25 64.5  64.75 65.   65.25 65.5  65.75
0:  66.   66.25 66.5  66.75 67.   67.25 67.5  67.75 68.   68.25 68.5  68.75
0:  69.   69.25 69.5  69.75 70.   70.25 70.5  70.75 71.   71.25 71.5  71.75
0:  72.   72.25 72.5  72.75 73.   73.25 73.5  73.75 74.   74.25 74.5  74.75
0:  75.   75.25 75.5  75.75 76.   76.25 76.5  76.75 77.   77.25 77.5  77.75
0:  78.   78.25 78.5  78.75 79.   79.25 79.5  79.75 80.   80.25 80.5  80.75], time [datetime.datetime(2015, 1, 20, 10, 0)
0:  datetime.datetime(2015, 1, 20, 11, 0)
0:  datetime.datetime(2015, 1, 20, 12, 0)
0:  datetime.datetime(2015, 1, 20, 13, 0)
0:  datetime.datetime(2015, 1, 20, 14, 0)
0:  datetime.datetime(2015, 1, 20, 15, 0)
0:  datetime.datetime(2015, 1, 20, 16, 0)
0:  datetime.datetime(2015, 1, 20, 17, 0)
0:  datetime.datetime(2015, 1, 20, 18, 0)
0:  datetime.datetime(2015, 1, 20, 19, 0)
0:  datetime.datetime(2015, 1, 20, 20, 0)
0:  datetime.datetime(2015, 1, 20, 21, 0)
0:  datetime.datetime(2015, 1, 20, 22, 0)
0:  datetime.datetime(2015, 1, 20, 23, 0)
0:  datetime.datetime(2015, 1, 21, 0, 0) datetime.datetime(2015, 1, 21, 1, 0)
0:  datetime.datetime(2015, 1, 21, 2, 0) datetime.datetime(2015, 1, 21, 3, 0)
0:  datetime.datetime(2015, 1, 21, 4, 0) datetime.datetime(2015, 1, 21, 5, 0)
0:  datetime.datetime(2015, 1, 21, 6, 0) datetime.datetime(2015, 1, 21, 7, 0)
0:  datetime.datetime(2015, 1, 21, 8, 0) datetime.datetime(2015, 1, 21, 9, 0)
0:  datetime.datetime(2015, 1, 21, 10, 0)
0:  datetime.datetime(2015, 1, 21, 11, 0)
0:  datetime.datetime(2015, 1, 21, 12, 0)
0:  datetime.datetime(2015, 1, 21, 13, 0)
0:  datetime.datetime(2015, 1, 21, 14, 0)
0:  datetime.datetime(2015, 1, 21, 15, 0)
0:  datetime.datetime(2015, 1, 21, 16, 0)
0:  datetime.datetime(2015, 1, 21, 17, 0)
0:  datetime.datetime(2015, 1, 21, 18, 0)
0:  datetime.datetime(2015, 1, 21, 19, 0)
0:  datetime.datetime(2015, 1, 21, 20, 0)
0:  datetime.datetime(2015, 1, 21, 21, 0)]
0: Processing batch 48, sample 0 :: lat [], lon [162.   162.25 162.5  162.75 163.   163.25 163.5  163.75 164.   164.25
0:  164.5  164.75 165.   165.25 165.5  165.75 166.   166.25 166.5  166.75
0:  167.   167.25 167.5  167.75 168.   168.25 168.5  168.75 169.   169.25
0:  169.5  169.75 170.   170.25 170.5  170.75 171.   171.25 171.5  171.75
0:  172.   172.25 172.5  172.75 173.   173.25 173.5  173.75 174.   174.25
0:  174.5  174.75 175.   175.25 175.5  175.75 176.   176.25 176.5  176.75
0:  177.   177.25 177.5  177.75 178.   178.25 178.5  178.75 179.   179.25
0:  179.5  179.75 180.   180.25 180.5  180.75 181.   181.25 181.5  181.75
0:  182.   182.25 182.5  182.75 183.   183.25 183.5  183.75 184.   184.25
0:  184.5  184.75 185.   185.25 185.5  185.75 186.   186.25 186.5  186.75
0:  187.   187.25 187.5  187.75 188.   188.25 188.5  188.75], time [datetime.datetime(2015, 1, 20, 10, 0)
0:  datetime.datetime(2015, 1, 20, 11, 0)
0:  datetime.datetime(2015, 1, 20, 12, 0)
0:  datetime.datetime(2015, 1, 20, 13, 0)
0:  datetime.datetime(2015, 1, 20, 14, 0)
0:  datetime.datetime(2015, 1, 20, 15, 0)
0:  datetime.datetime(2015, 1, 20, 16, 0)
0:  datetime.datetime(2015, 1, 20, 17, 0)
0:  datetime.datetime(2015, 1, 20, 18, 0)
0:  datetime.datetime(2015, 1, 20, 19, 0)
0:  datetime.datetime(2015, 1, 20, 20, 0)
0:  datetime.datetime(2015, 1, 20, 21, 0)
0:  datetime.datetime(2015, 1, 20, 22, 0)
0:  datetime.datetime(2015, 1, 20, 23, 0)
0:  datetime.datetime(2015, 1, 21, 0, 0) datetime.datetime(2015, 1, 21, 1, 0)
0:  datetime.datetime(2015, 1, 21, 2, 0) datetime.datetime(2015, 1, 21, 3, 0)
0:  datetime.datetime(2015, 1, 21, 4, 0) datetime.datetime(2015, 1, 21, 5, 0)
0:  datetime.datetime(2015, 1, 21, 6, 0) datetime.datetime(2015, 1, 21, 7, 0)
0:  datetime.datetime(2015, 1, 21, 8, 0) datetime.datetime(2015, 1, 21, 9, 0)
0:  datetime.datetime(2015, 1, 21, 10, 0)
0:  datetime.datetime(2015, 1, 21, 11, 0)
0:  datetime.datetime(2015, 1, 21, 12, 0)
0:  datetime.datetime(2015, 1, 21, 13, 0)
0:  datetime.datetime(2015, 1, 21, 14, 0)
0:  datetime.datetime(2015, 1, 21, 15, 0)
0:  datetime.datetime(2015, 1, 21, 16, 0)
0:  datetime.datetime(2015, 1, 21, 17, 0)
0:  datetime.datetime(2015, 1, 21, 18, 0)
0:  datetime.datetime(2015, 1, 21, 19, 0)
0:  datetime.datetime(2015, 1, 21, 20, 0)
0:  datetime.datetime(2015, 1, 21, 21, 0)]
0: Processing batch 112, sample 0 :: lat [], lon [ 0.    0.25  0.5   0.75  1.    1.25  1.5   1.75  2.    2.25  2.5   2.75
0:   3.    3.25  3.5   3.75  4.    4.25  4.5   4.75  5.    5.25  5.5   5.75
0:   6.    6.25  6.5   6.75  7.    7.25  7.5   7.75  8.    8.25  8.5   8.75
0:   9.    9.25  9.5   9.75 10.   10.25 10.5  10.75 11.   11.25 11.5  11.75
0:  12.   12.25 12.5  12.75 13.   13.25 13.5  13.75 14.   14.25 14.5  14.75
0:  15.   15.25 15.5  15.75 16.   16.25 16.5  16.75 17.   17.25 17.5  17.75
0:  18.   18.25 18.5  18.75 19.   19.25 19.5  19.75 20.   20.25 20.5  20.75
0:  21.   21.25 21.5  21.75 22.   22.25 22.5  22.75 23.   23.25 23.5  23.75
0:  24.   24.25 24.5  24.75 25.   25.25 25.5  25.75 26.   26.25 26.5  26.75], time [datetime.datetime(2015, 1, 20, 10, 0)
0:  datetime.datetime(2015, 1, 20, 11, 0)
0:  datetime.datetime(2015, 1, 20, 12, 0)
0:  datetime.datetime(2015, 1, 20, 13, 0)
0:  datetime.datetime(2015, 1, 20, 14, 0)
0:  datetime.datetime(2015, 1, 20, 15, 0)
0:  datetime.datetime(2015, 1, 20, 16, 0)
0:  datetime.datetime(2015, 1, 20, 17, 0)
0:  datetime.datetime(2015, 1, 20, 18, 0)
0:  datetime.datetime(2015, 1, 20, 19, 0)
0:  datetime.datetime(2015, 1, 20, 20, 0)
0:  datetime.datetime(2015, 1, 20, 21, 0)
0:  datetime.datetime(2015, 1, 20, 22, 0)
0:  datetime.datetime(2015, 1, 20, 23, 0)
0:  datetime.datetime(2015, 1, 21, 0, 0) datetime.datetime(2015, 1, 21, 1, 0)
0:  datetime.datetime(2015, 1, 21, 2, 0) datetime.datetime(2015, 1, 21, 3, 0)
0:  datetime.datetime(2015, 1, 21, 4, 0) datetime.datetime(2015, 1, 21, 5, 0)
0:  datetime.datetime(2015, 1, 21, 6, 0) datetime.datetime(2015, 1, 21, 7, 0)
0:  datetime.datetime(2015, 1, 21, 8, 0) datetime.datetime(2015, 1, 21, 9, 0)
0:  datetime.datetime(2015, 1, 21, 10, 0)
0:  datetime.datetime(2015, 1, 21, 11, 0)
0:  datetime.datetime(2015, 1, 21, 12, 0)
0:  datetime.datetime(2015, 1, 21, 13, 0)
0:  datetime.datetime(2015, 1, 21, 14, 0)
0:  datetime.datetime(2015, 1, 21, 15, 0)
0:  datetime.datetime(2015, 1, 21, 16, 0)
0:  datetime.datetime(2015, 1, 21, 17, 0)
0:  datetime.datetime(2015, 1, 21, 18, 0)
0:  datetime.datetime(2015, 1, 21, 19, 0)
0:  datetime.datetime(2015, 1, 21, 20, 0)
0:  datetime.datetime(2015, 1, 21, 21, 0)]
0: Processing batch 96, sample 0 :: lat [], lon [324.   324.25 324.5  324.75 325.   325.25 325.5  325.75 326.   326.25
0:  326.5  326.75 327.   327.25 327.5  327.75 328.   328.25 328.5  328.75
0:  329.   329.25 329.5  329.75 330.   330.25 330.5  330.75 331.   331.25
0:  331.5  331.75 332.   332.25 332.5  332.75 333.   333.25 333.5  333.75
0:  334.   334.25 334.5  334.75 335.   335.25 335.5  335.75 336.   336.25
0:  336.5  336.75 337.   337.25 337.5  337.75 338.   338.25 338.5  338.75
0:  339.   339.25 339.5  339.75 340.   340.25 340.5  340.75 341.   341.25
0:  341.5  341.75 342.   342.25 342.5  342.75 343.   343.25 343.5  343.75
0:  344.   344.25 344.5  344.75 345.   345.25 345.5  345.75 346.   346.25
0:  346.5  346.75 347.   347.25 347.5  347.75 348.   348.25 348.5  348.75
0:  349.   349.25 349.5  349.75 350.   350.25 350.5  350.75], time [datetime.datetime(2015, 1, 20, 10, 0)
0:  datetime.datetime(2015, 1, 20, 11, 0)
0:  datetime.datetime(2015, 1, 20, 12, 0)
0:  datetime.datetime(2015, 1, 20, 13, 0)
0:  datetime.datetime(2015, 1, 20, 14, 0)
0:  datetime.datetime(2015, 1, 20, 15, 0)
0:  datetime.datetime(2015, 1, 20, 16, 0)
0:  datetime.datetime(2015, 1, 20, 17, 0)
0:  datetime.datetime(2015, 1, 20, 18, 0)
0:  datetime.datetime(2015, 1, 20, 19, 0)
0:  datetime.datetime(2015, 1, 20, 20, 0)
0:  datetime.datetime(2015, 1, 20, 21, 0)
0:  datetime.datetime(2015, 1, 20, 22, 0)
0:  datetime.datetime(2015, 1, 20, 23, 0)
0:  datetime.datetime(2015, 1, 21, 0, 0) datetime.datetime(2015, 1, 21, 1, 0)
0:  datetime.datetime(2015, 1, 21, 2, 0) datetime.datetime(2015, 1, 21, 3, 0)
0:  datetime.datetime(2015, 1, 21, 4, 0) datetime.datetime(2015, 1, 21, 5, 0)
0:  datetime.datetime(2015, 1, 21, 6, 0) datetime.datetime(2015, 1, 21, 7, 0)
0:  datetime.datetime(2015, 1, 21, 8, 0) datetime.datetime(2015, 1, 21, 9, 0)
0:  datetime.datetime(2015, 1, 21, 10, 0)
0:  datetime.datetime(2015, 1, 21, 11, 0)
0:  datetime.datetime(2015, 1, 21, 12, 0)
0:  datetime.datetime(2015, 1, 21, 13, 0)
0:  datetime.datetime(2015, 1, 21, 14, 0)
0:  datetime.datetime(2015, 1, 21, 15, 0)
0:  datetime.datetime(2015, 1, 21, 16, 0)
0:  datetime.datetime(2015, 1, 21, 17, 0)
0:  datetime.datetime(2015, 1, 21, 18, 0)
0:  datetime.datetime(2015, 1, 21, 19, 0)
0:  datetime.datetime(2015, 1, 21, 20, 0)
0:  datetime.datetime(2015, 1, 21, 21, 0)]
0: Processing batch 0, sample 0 :: lat [ 0.    0.25  0.5   0.75  1.    1.25  1.5   1.75  2.    2.25  2.5   2.75
0:   3.    3.25  3.5   3.75  4.    4.25  4.5   4.75  5.    5.25  5.5   5.75
0:   6.    6.25  6.5   6.75  7.    7.25  7.5   7.75  8.    8.25  8.5   8.75
0:   9.    9.25  9.5   9.75 10.   10.25 10.5  10.75 11.   11.25 11.5  11.75
0:  12.   12.25 12.5  12.75 13.   13.25], lon [ 0.    0.25  0.5   0.75  1.    1.25  1.5   1.75  2.    2.25  2.5   2.75
0:   3.    3.25  3.5   3.75  4.    4.25  4.5   4.75  5.    5.25  5.5   5.75
0:   6.    6.25  6.5   6.75  7.    7.25  7.5   7.75  8.    8.25  8.5   8.75
0:   9.    9.25  9.5   9.75 10.   10.25 10.5  10.75 11.   11.25 11.5  11.75
0:  12.   12.25 12.5  12.75 13.   13.25 13.5  13.75 14.   14.25 14.5  14.75
0:  15.   15.25 15.5  15.75 16.   16.25 16.5  16.75 17.   17.25 17.5  17.75
0:  18.   18.25 18.5  18.75 19.   19.25 19.5  19.75 20.   20.25 20.5  20.75
0:  21.   21.25 21.5  21.75 22.   22.25 22.5  22.75 23.   23.25 23.5  23.75
0:  24.   24.25 24.5  24.75 25.   25.25 25.5  25.75 26.   26.25 26.5  26.75], time [datetime.datetime(2015, 1, 20, 10, 0)
0:  datetime.datetime(2015, 1, 20, 11, 0)
0:  datetime.datetime(2015, 1, 20, 12, 0)
0:  datetime.datetime(2015, 1, 20, 13, 0)
0:  datetime.datetime(2015, 1, 20, 14, 0)
0:  datetime.datetime(2015, 1, 20, 15, 0)
0:  datetime.datetime(2015, 1, 20, 16, 0)
0:  datetime.datetime(2015, 1, 20, 17, 0)
0:  datetime.datetime(2015, 1, 20, 18, 0)
0:  datetime.datetime(2015, 1, 20, 19, 0)
0:  datetime.datetime(2015, 1, 20, 20, 0)
0:  datetime.datetime(2015, 1, 20, 21, 0)
0:  datetime.datetime(2015, 1, 20, 22, 0)
0:  datetime.datetime(2015, 1, 20, 23, 0)
0:  datetime.datetime(2015, 1, 21, 0, 0) datetime.datetime(2015, 1, 21, 1, 0)
0:  datetime.datetime(2015, 1, 21, 2, 0) datetime.datetime(2015, 1, 21, 3, 0)
0:  datetime.datetime(2015, 1, 21, 4, 0) datetime.datetime(2015, 1, 21, 5, 0)
0:  datetime.datetime(2015, 1, 21, 6, 0) datetime.datetime(2015, 1, 21, 7, 0)
0:  datetime.datetime(2015, 1, 21, 8, 0) datetime.datetime(2015, 1, 21, 9, 0)
0:  datetime.datetime(2015, 1, 21, 10, 0)
0:  datetime.datetime(2015, 1, 21, 11, 0)
0:  datetime.datetime(2015, 1, 21, 12, 0)
0:  datetime.datetime(2015, 1, 21, 13, 0)
0:  datetime.datetime(2015, 1, 21, 14, 0)
0:  datetime.datetime(2015, 1, 21, 15, 0)
0:  datetime.datetime(2015, 1, 21, 16, 0)
0:  datetime.datetime(2015, 1, 21, 17, 0)
0:  datetime.datetime(2015, 1, 21, 18, 0)
0:  datetime.datetime(2015, 1, 21, 19, 0)
0:  datetime.datetime(2015, 1, 21, 20, 0)
0:  datetime.datetime(2015, 1, 21, 21, 0)]
0: Processing batch 160, sample 0 :: lat [], lon [162.   162.25 162.5  162.75 163.   163.25 163.5  163.75 164.   164.25
0:  164.5  164.75 165.   165.25 165.5  165.75 166.   166.25 166.5  166.75
0:  167.   167.25 167.5  167.75 168.   168.25 168.5  168.75 169.   169.25
0:  169.5  169.75 170.   170.25 170.5  170.75 171.   171.25 171.5  171.75
0:  172.   172.25 172.5  172.75 173.   173.25 173.5  173.75 174.   174.25
0:  174.5  174.75 175.   175.25 175.5  175.75 176.   176.25 176.5  176.75
0:  177.   177.25 177.5  177.75 178.   178.25 178.5  178.75 179.   179.25
0:  179.5  179.75 180.   180.25 180.5  180.75 181.   181.25 181.5  181.75
0:  182.   182.25 182.5  182.75 183.   183.25 183.5  183.75 184.   184.25
0:  184.5  184.75 185.   185.25 185.5  185.75 186.   186.25 186.5  186.75
0:  187.   187.25 187.5  187.75 188.   188.25 188.5  188.75], time [datetime.datetime(2015, 1, 20, 10, 0)
0:  datetime.datetime(2015, 1, 20, 11, 0)
0:  datetime.datetime(2015, 1, 20, 12, 0)
0:  datetime.datetime(2015, 1, 20, 13, 0)
0:  datetime.datetime(2015, 1, 20, 14, 0)
0:  datetime.datetime(2015, 1, 20, 15, 0)
0:  datetime.datetime(2015, 1, 20, 16, 0)
0:  datetime.datetime(2015, 1, 20, 17, 0)
0:  datetime.datetime(2015, 1, 20, 18, 0)
0:  datetime.datetime(2015, 1, 20, 19, 0)
0:  datetime.datetime(2015, 1, 20, 20, 0)
0:  datetime.datetime(2015, 1, 20, 21, 0)
0:  datetime.datetime(2015, 1, 20, 22, 0)
0:  datetime.datetime(2015, 1, 20, 23, 0)
0:  datetime.datetime(2015, 1, 21, 0, 0) datetime.datetime(2015, 1, 21, 1, 0)
0:  datetime.datetime(2015, 1, 21, 2, 0) datetime.datetime(2015, 1, 21, 3, 0)
0:  datetime.datetime(2015, 1, 21, 4, 0) datetime.datetime(2015, 1, 21, 5, 0)
0:  datetime.datetime(2015, 1, 21, 6, 0) datetime.datetime(2015, 1, 21, 7, 0)
0:  datetime.datetime(2015, 1, 21, 8, 0) datetime.datetime(2015, 1, 21, 9, 0)
0:  datetime.datetime(2015, 1, 21, 10, 0)
0:  datetime.datetime(2015, 1, 21, 11, 0)
0:  datetime.datetime(2015, 1, 21, 12, 0)
0:  datetime.datetime(2015, 1, 21, 13, 0)
0:  datetime.datetime(2015, 1, 21, 14, 0)
0:  datetime.datetime(2015, 1, 21, 15, 0)
0:  datetime.datetime(2015, 1, 21, 16, 0)
0:  datetime.datetime(2015, 1, 21, 17, 0)
0:  datetime.datetime(2015, 1, 21, 18, 0)
0:  datetime.datetime(2015, 1, 21, 19, 0)
0:  datetime.datetime(2015, 1, 21, 20, 0)
0:  datetime.datetime(2015, 1, 21, 21, 0)]
0: Processing batch 64, sample 0 :: lat [], lon [216.   216.25 216.5  216.75 217.   217.25 217.5  217.75 218.   218.25
0:  218.5  218.75 219.   219.25 219.5  219.75 220.   220.25 220.5  220.75
0:  221.   221.25 221.5  221.75 222.   222.25 222.5  222.75 223.   223.25
0:  223.5  223.75 224.   224.25 224.5  224.75 225.   225.25 225.5  225.75
0:  226.   226.25 226.5  226.75 227.   227.25 227.5  227.75 228.   228.25
0:  228.5  228.75 229.   229.25 229.5  229.75 230.   230.25 230.5  230.75
0:  231.   231.25 231.5  231.75 232.   232.25 232.5  232.75 233.   233.25
0:  233.5  233.75 234.   234.25 234.5  234.75 235.   235.25 235.5  235.75
0:  236.   236.25 236.5  236.75 237.   237.25 237.5  237.75 238.   238.25
0:  238.5  238.75 239.   239.25 239.5  239.75 240.   240.25 240.5  240.75
0:  241.   241.25 241.5  241.75 242.   242.25 242.5  242.75], time [datetime.datetime(2015, 1, 20, 10, 0)
0:  datetime.datetime(2015, 1, 20, 11, 0)
0:  datetime.datetime(2015, 1, 20, 12, 0)
0:  datetime.datetime(2015, 1, 20, 13, 0)
0:  datetime.datetime(2015, 1, 20, 14, 0)
0:  datetime.datetime(2015, 1, 20, 15, 0)
0:  datetime.datetime(2015, 1, 20, 16, 0)
0:  datetime.datetime(2015, 1, 20, 17, 0)
0:  datetime.datetime(2015, 1, 20, 18, 0)
0:  datetime.datetime(2015, 1, 20, 19, 0)
0:  datetime.datetime(2015, 1, 20, 20, 0)
0:  datetime.datetime(2015, 1, 20, 21, 0)
0:  datetime.datetime(2015, 1, 20, 22, 0)
0:  datetime.datetime(2015, 1, 20, 23, 0)
0:  datetime.datetime(2015, 1, 21, 0, 0) datetime.datetime(2015, 1, 21, 1, 0)
0:  datetime.datetime(2015, 1, 21, 2, 0) datetime.datetime(2015, 1, 21, 3, 0)
0:  datetime.datetime(2015, 1, 21, 4, 0) datetime.datetime(2015, 1, 21, 5, 0)
0:  datetime.datetime(2015, 1, 21, 6, 0) datetime.datetime(2015, 1, 21, 7, 0)
0:  datetime.datetime(2015, 1, 21, 8, 0) datetime.datetime(2015, 1, 21, 9, 0)
0:  datetime.datetime(2015, 1, 21, 10, 0)
0:  datetime.datetime(2015, 1, 21, 11, 0)
0:  datetime.datetime(2015, 1, 21, 12, 0)
0:  datetime.datetime(2015, 1, 21, 13, 0)
0:  datetime.datetime(2015, 1, 21, 14, 0)
0:  datetime.datetime(2015, 1, 21, 15, 0)
0:  datetime.datetime(2015, 1, 21, 16, 0)
0:  datetime.datetime(2015, 1, 21, 17, 0)
0:  datetime.datetime(2015, 1, 21, 18, 0)
0:  datetime.datetime(2015, 1, 21, 19, 0)
0:  datetime.datetime(2015, 1, 21, 20, 0)
0:  datetime.datetime(2015, 1, 21, 21, 0)]
0: Processing batch 144, sample 0 :: lat [], lon [108.   108.25 108.5  108.75 109.   109.25 109.5  109.75 110.   110.25
0:  110.5  110.75 111.   111.25 111.5  111.75 112.   112.25 112.5  112.75
0:  113.   113.25 113.5  113.75 114.   114.25 114.5  114.75 115.   115.25
0:  115.5  115.75 116.   116.25 116.5  116.75 117.   117.25 117.5  117.75
0:  118.   118.25 118.5  118.75 119.   119.25 119.5  119.75 120.   120.25
0:  120.5  120.75 121.   121.25 121.5  121.75 122.   122.25 122.5  122.75
0:  123.   123.25 123.5  123.75 124.   124.25 124.5  124.75 125.   125.25
0:  125.5  125.75 126.   126.25 126.5  126.75 127.   127.25 127.5  127.75
0:  128.   128.25 128.5  128.75 129.   129.25 129.5  129.75 130.   130.25
0:  130.5  130.75 131.   131.25 131.5  131.75 132.   132.25 132.5  132.75
0:  133.   133.25 133.5  133.75 134.   134.25 134.5  134.75], time [datetime.datetime(2015, 1, 20, 10, 0)
0:  datetime.datetime(2015, 1, 20, 11, 0)
0:  datetime.datetime(2015, 1, 20, 12, 0)
0:  datetime.datetime(2015, 1, 20, 13, 0)
0:  datetime.datetime(2015, 1, 20, 14, 0)
0:  datetime.datetime(2015, 1, 20, 15, 0)
0:  datetime.datetime(2015, 1, 20, 16, 0)
0:  datetime.datetime(2015, 1, 20, 17, 0)
0:  datetime.datetime(2015, 1, 20, 18, 0)
0:  datetime.datetime(2015, 1, 20, 19, 0)
0:  datetime.datetime(2015, 1, 20, 20, 0)
0:  datetime.datetime(2015, 1, 20, 21, 0)
0:  datetime.datetime(2015, 1, 20, 22, 0)
0:  datetime.datetime(2015, 1, 20, 23, 0)
0:  datetime.datetime(2015, 1, 21, 0, 0) datetime.datetime(2015, 1, 21, 1, 0)
0:  datetime.datetime(2015, 1, 21, 2, 0) datetime.datetime(2015, 1, 21, 3, 0)
0:  datetime.datetime(2015, 1, 21, 4, 0) datetime.datetime(2015, 1, 21, 5, 0)
0:  datetime.datetime(2015, 1, 21, 6, 0) datetime.datetime(2015, 1, 21, 7, 0)
0:  datetime.datetime(2015, 1, 21, 8, 0) datetime.datetime(2015, 1, 21, 9, 0)
0:  datetime.datetime(2015, 1, 21, 10, 0)
0:  datetime.datetime(2015, 1, 21, 11, 0)
0:  datetime.datetime(2015, 1, 21, 12, 0)
0:  datetime.datetime(2015, 1, 21, 13, 0)
0:  datetime.datetime(2015, 1, 21, 14, 0)
0:  datetime.datetime(2015, 1, 21, 15, 0)
0:  datetime.datetime(2015, 1, 21, 16, 0)
0:  datetime.datetime(2015, 1, 21, 17, 0)
0:  datetime.datetime(2015, 1, 21, 18, 0)
0:  datetime.datetime(2015, 1, 21, 19, 0)
0:  datetime.datetime(2015, 1, 21, 20, 0)
0:  datetime.datetime(2015, 1, 21, 21, 0)]
0: Processing batch 16, sample 0 :: lat [13.5  13.75 14.   14.25 14.5  14.75 15.   15.25 15.5  15.75 16.   16.25
0:  16.5  16.75 17.   17.25 17.5 ], lon [54.   54.25 54.5  54.75 55.   55.25 55.5  55.75 56.   56.25 56.5  56.75
0:  57.   57.25 57.5  57.75 58.   58.25 58.5  58.75 59.   59.25 59.5  59.75
0:  60.   60.25 60.5  60.75 61.   61.25 61.5  61.75 62.   62.25 62.5  62.75
0:  63.   63.25 63.5  63.75 64.   64.25 64.5  64.75 65.   65.25 65.5  65.75
0:  66.   66.25 66.5  66.75 67.   67.25 67.5  67.75 68.   68.25 68.5  68.75
0:  69.   69.25 69.5  69.75 70.   70.25 70.5  70.75 71.   71.25 71.5  71.75
0:  72.   72.25 72.5  72.75 73.   73.25 73.5  73.75 74.   74.25 74.5  74.75
0:  75.   75.25 75.5  75.75 76.   76.25 76.5  76.75 77.   77.25 77.5  77.75
0:  78.   78.25 78.5  78.75 79.   79.25 79.5  79.75 80.   80.25 80.5  80.75], time [datetime.datetime(2015, 1, 20, 10, 0)
0:  datetime.datetime(2015, 1, 20, 11, 0)
0:  datetime.datetime(2015, 1, 20, 12, 0)
0:  datetime.datetime(2015, 1, 20, 13, 0)
0:  datetime.datetime(2015, 1, 20, 14, 0)
0:  datetime.datetime(2015, 1, 20, 15, 0)
0:  datetime.datetime(2015, 1, 20, 16, 0)
0:  datetime.datetime(2015, 1, 20, 17, 0)
0:  datetime.datetime(2015, 1, 20, 18, 0)
0:  datetime.datetime(2015, 1, 20, 19, 0)
0:  datetime.datetime(2015, 1, 20, 20, 0)
0:  datetime.datetime(2015, 1, 20, 21, 0)
0:  datetime.datetime(2015, 1, 20, 22, 0)
0:  datetime.datetime(2015, 1, 20, 23, 0)
0:  datetime.datetime(2015, 1, 21, 0, 0) datetime.datetime(2015, 1, 21, 1, 0)
0:  datetime.datetime(2015, 1, 21, 2, 0) datetime.datetime(2015, 1, 21, 3, 0)
0:  datetime.datetime(2015, 1, 21, 4, 0) datetime.datetime(2015, 1, 21, 5, 0)
0:  datetime.datetime(2015, 1, 21, 6, 0) datetime.datetime(2015, 1, 21, 7, 0)
0:  datetime.datetime(2015, 1, 21, 8, 0) datetime.datetime(2015, 1, 21, 9, 0)
0:  datetime.datetime(2015, 1, 21, 10, 0)
0:  datetime.datetime(2015, 1, 21, 11, 0)
0:  datetime.datetime(2015, 1, 21, 12, 0)
0:  datetime.datetime(2015, 1, 21, 13, 0)
0:  datetime.datetime(2015, 1, 21, 14, 0)
0:  datetime.datetime(2015, 1, 21, 15, 0)
0:  datetime.datetime(2015, 1, 21, 16, 0)
0:  datetime.datetime(2015, 1, 21, 17, 0)
0:  datetime.datetime(2015, 1, 21, 18, 0)
0:  datetime.datetime(2015, 1, 21, 19, 0)
0:  datetime.datetime(2015, 1, 21, 20, 0)
0:  datetime.datetime(2015, 1, 21, 21, 0)]
0: 
0: [DEBUG] Log Validate Forecast Denormalized values for corrected_t2m:
0: Source values (first 20):
0: [240.59636 241.26372 241.34677 241.34633 241.34576 241.34512 241.3445
0:  241.3439  241.3434  241.34302 241.34267 241.34232 241.34195 241.3416
0:  241.3412  241.34079 241.34041 241.34007 241.33987 241.33975]
0: Target values (first 20):
0: [241.88611 241.88815 241.88934 241.8902  241.89098 241.89174 241.89247
0:  241.89314 241.89365 241.89418 241.89484 241.89552 241.89618 241.89684
0:  241.89748 241.8981  241.89874 241.8995  241.9004  241.90135]
0: validation forecast for strategy=global_forecast at epoch 0 : batch 0
0: it == 0 and starting val norms printouts
0: [DEBUG] PREDICTIONS VALIDATION BATCH
0: Normalised validation prediction values for 'corrected_t2m' with shape: torch.Size([16, 2187])
0:          min = -0.737, max = 1.406, mean = 0.144
0:          sample (first 20): tensor([-0.5431, -0.5383, -0.5158, -0.5545, -0.5457, -0.5684, -0.5147, -0.5579, -0.5193, -0.5621, -0.5559, -0.5987,
0:         -0.5603, -0.5612, -0.5655, -0.5592, -0.5661, -0.5521, -0.5571, -0.5642])
0: [1;34mwandb[0m:
0: [1;34mwandb[0m: You can sync this run to the cloud by running:
0: [1;34mwandb[0m: [1mwandb sync /work/ab1412/atmorep/wandb/offline-run-20250914_093609-g9943ei8[0m
0: [1;34mwandb[0m: Find logs at: [1;35mwandb/offline-run-20250914_093609-g9943ei8/logs[0m
0: l50078:450898:451300 [0] NCCL INFO [Service thread] Connection closed by localRank 0
0: l50078:450898:452261 [0] NCCL INFO comm 0x55555f739bd0 rank 0 nranks 1 cudaDev 0 busId 84000 - Abort COMPLETE
