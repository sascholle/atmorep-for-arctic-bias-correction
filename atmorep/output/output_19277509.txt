0: Wandb run: atmorep-w3n85s5h-19277509
0: l50103:1842345:1842345 [0] NCCL INFO Bootstrap : Using ib0:10.128.11.164<0>
0: l50103:1842345:1842345 [0] NCCL INFO NET/Plugin: No plugin found (libnccl-net.so)
0: l50103:1842345:1842345 [0] NCCL INFO NET/Plugin: Plugin load returned 2 : libnccl-net.so: cannot open shared object file: No such file or directory : when loading libnccl-net.so
0: l50103:1842345:1842345 [0] NCCL INFO NET/Plugin: Using internal network plugin.
0: l50103:1842345:1842345 [0] NCCL INFO cudaDriverVersion 12060
0: NCCL version 2.21.5+cuda12.4
0: l50103:1842345:1842856 [0] NCCL INFO NET/IB : Using [0]mlx5_0:1/IB [1]mlx5_1:1/IB [RO]; OOB ib0:10.128.11.164<0>
0: l50103:1842345:1842856 [0] NCCL INFO Using non-device net plugin version 0
0: l50103:1842345:1842856 [0] NCCL INFO Using network IB
0: l50103:1842345:1842856 [0] NCCL INFO DMA-BUF is available on GPU device 0
0: l50103:1842345:1842856 [0] NCCL INFO ncclCommInitRank comm 0x55555f101d50 rank 0 nranks 1 cudaDev 0 nvmlDev 0 busId 3000 commId 0xf7c24300d4cdadc6 - Init START
0: l50103:1842345:1842856 [0] NCCL INFO Setting affinity for GPU 0 to ffff0000,00000000,00000000,00000000,ffff0000,00000000
0: l50103:1842345:1842856 [0] NCCL INFO comm 0x55555f101d50 rank 0 nRanks 1 nNodes 1 localRanks 1 localRank 0 MNNVL 0
0: l50103:1842345:1842856 [0] NCCL INFO Channel 00/32 :    0
0: l50103:1842345:1842856 [0] NCCL INFO Channel 01/32 :    0
0: l50103:1842345:1842856 [0] NCCL INFO Channel 02/32 :    0
0: l50103:1842345:1842856 [0] NCCL INFO Channel 03/32 :    0
0: l50103:1842345:1842856 [0] NCCL INFO Channel 04/32 :    0
0: l50103:1842345:1842856 [0] NCCL INFO Channel 05/32 :    0
0: l50103:1842345:1842856 [0] NCCL INFO Channel 06/32 :    0
0: l50103:1842345:1842856 [0] NCCL INFO Channel 07/32 :    0
0: l50103:1842345:1842856 [0] NCCL INFO Channel 08/32 :    0
0: l50103:1842345:1842856 [0] NCCL INFO Channel 09/32 :    0
0: l50103:1842345:1842856 [0] NCCL INFO Channel 10/32 :    0
0: l50103:1842345:1842856 [0] NCCL INFO Channel 11/32 :    0
0: l50103:1842345:1842856 [0] NCCL INFO Channel 12/32 :    0
0: l50103:1842345:1842856 [0] NCCL INFO Channel 13/32 :    0
0: l50103:1842345:1842856 [0] NCCL INFO Channel 14/32 :    0
0: l50103:1842345:1842856 [0] NCCL INFO Channel 15/32 :    0
0: l50103:1842345:1842856 [0] NCCL INFO Channel 16/32 :    0
0: l50103:1842345:1842856 [0] NCCL INFO Channel 17/32 :    0
0: l50103:1842345:1842856 [0] NCCL INFO Channel 18/32 :    0
0: l50103:1842345:1842856 [0] NCCL INFO Channel 19/32 :    0
0: l50103:1842345:1842856 [0] NCCL INFO Channel 20/32 :    0
0: l50103:1842345:1842856 [0] NCCL INFO Channel 21/32 :    0
0: l50103:1842345:1842856 [0] NCCL INFO Channel 22/32 :    0
0: l50103:1842345:1842856 [0] NCCL INFO Channel 23/32 :    0
0: l50103:1842345:1842856 [0] NCCL INFO Channel 24/32 :    0
0: l50103:1842345:1842856 [0] NCCL INFO Channel 25/32 :    0
0: l50103:1842345:1842856 [0] NCCL INFO Channel 26/32 :    0
0: l50103:1842345:1842856 [0] NCCL INFO Channel 27/32 :    0
0: l50103:1842345:1842856 [0] NCCL INFO Channel 28/32 :    0
0: l50103:1842345:1842856 [0] NCCL INFO Channel 29/32 :    0
0: l50103:1842345:1842856 [0] NCCL INFO Channel 30/32 :    0
0: l50103:1842345:1842856 [0] NCCL INFO Channel 31/32 :    0
0: l50103:1842345:1842856 [0] NCCL INFO Trees [0] -1/-1/-1->0->-1 [1] -1/-1/-1->0->-1 [2] -1/-1/-1->0->-1 [3] -1/-1/-1->0->-1 [4] -1/-1/-1->0->-1 [5] -1/-1/-1->0->-1 [6] -1/-1/-1->0->-1 [7] -1/-1/-1->0->-1 [8] -1/-1/-1->0->-1 [9] -1/-1/-1->0->-1 [10] -1/-1/-1->0->-1 [11] -1/-1/-1->0->-1 [12] -1/-1/-1->0->-1 [13] -1/-1/-1->0->-1 [14] -1/-1/-1->0->-1 [15] -1/-1/-1->0->-1 [16] -1/-1/-1->0->-1 [17] -1/-1/-1->0->-1 [18] -1/-1/-1->0->-1 [19] -1/-1/-1->0->-1 [20] -1/-1/-1->0->-1 [21] -1/-1/-1->0->-1 [22] -1/-1/-1->0->-1 [23] -1/-1/-1->0->-1 [24] -1/-1/-1->0->-1 [25] -1/-1/-1->0->-1 [26] -1/-1/-1->0->-1 [27] -1/-1/-1->0->-1 [28] -1/-1/-1->0->-1 [29] -1/-1/-1->0->-1 [30] -1/-1/-1->0->-1 [31] -1/-1/-1->0->-1
0: l50103:1842345:1842856 [0] NCCL INFO P2P Chunksize set to 131072
0: l50103:1842345:1842856 [0] NCCL INFO Connected all rings
0: l50103:1842345:1842856 [0] NCCL INFO Connected all trees
0: l50103:1842345:1842856 [0] NCCL INFO 32 coll channels, 32 collnet channels, 0 nvls channels, 32 p2p channels, 32 p2p channels per peer
0: l50103:1842345:1842856 [0] NCCL INFO TUNER/Plugin: Plugin load returned 11 : libnccl-net.so: cannot open shared object file: No such file or directory : when loading libnccl-tuner.so
0: l50103:1842345:1842856 [0] NCCL INFO TUNER/Plugin: Using internal tuner plugin.
0: l50103:1842345:1842856 [0] NCCL INFO ncclCommInitRank comm 0x55555f101d50 rank 0 nranks 1 cudaDev 0 nvmlDev 0 busId 3000 commId 0xf7c24300d4cdadc6 - Init COMPLETE
0: Running Evaluate.evaluate with mode = BERT
0: Available keys in the Zarr dataset: ['data', 'data_sfc', 'lats', 'lons', 'time']
0: self.ds['data'] : (105192, 7, 5, 721, 1440) :: (105192,)
0: self.lats : (71,)
0: self.lons : (1440,)
0: Available keys in the Zarr dataset: ['data', 'data_sfc', 'lats', 'lons', 'time']
0: self.ds['data'] : (105192, 7, 5, 721, 1440) :: (105192,)
0: self.lats : (71,)
0: self.lons : (1440,)
0: ['cuda:0', 'cuda:1', 'cuda:2', 'cuda:3'] 0
0: ['cuda:0', 'cuda:1', 'cuda:2', 'cuda:3'] 0
0: ['cuda:0', 'cuda:1', 'cuda:2', 'cuda:3'] 0
0: ['cuda:0', 'cuda:1', 'cuda:2', 'cuda:3'] 0
0: ['cuda:0', 'cuda:1', 'cuda:2', 'cuda:3'] 0
0: ['cuda:0', 'cuda:1', 'cuda:2', 'cuda:3'] 0
0: ['cuda:0', 'cuda:1', 'cuda:2', 'cuda:3'] 0
0: ['cuda:0', 'cuda:1', 'cuda:2', 'cuda:3'] 0
0: Loaded model id = zxipahjj.
0: with_ddp : True
0: num_accs_per_task : 4
0: par_rank : 0
0: par_size : 1
0: fields : [['velocity_u', [1, 1024, ['velocity_v', 'temperature'], 0, ['j8dwr5qj', -2]], [96, 105, 114, 123, 137], [12, 3, 6], [3, 18, 18], [0.5, 0.9, 0.2, 0.05]], ['velocity_v', [1, 1024, ['velocity_u', 'temperature'], 0, ['0tlnm5up', -2]], [96, 105, 114, 123, 137], [12, 3, 6], [3, 18, 18], [0.5, 0.9, 0.2, 0.05]], ['specific_humidity', [1, 1024, ['velocity_u', 'velocity_v', 'temperature'], 0, ['v63l01zu', -2]], [96, 105, 114, 123, 137], [12, 3, 6], [3, 18, 18], [0.5, 0.9, 0.2, 0.05]], ['velocity_z', [1, 1024, ['velocity_u', 'velocity_v', 'temperature'], 0, ['9l1errbo', -2]], [96, 105, 114, 123, 137], [12, 3, 6], [3, 18, 18], [0.5, 0.9, 0.2, 0.05]], ['temperature', [1, 1024, ['velocity_u', 'velocity_v', 'specific_humidity'], 0, ['7ojls62c', -2]], [96, 105, 114, 123, 137], [12, 2, 4], [3, 27, 27], [0.5, 0.9, 0.2, 0.05], 'Local'], ['total_precip', [1, 1024, ['velocity_u', 'velocity_v', 'velocity_z', 'specific_humidity'], 0], [0], [12, 6, 12], [3, 9, 9], [0.25, 0.9, 0.1, 0.05]], ['t2m', [1, 1024, ['velocity_u', '
0: velocity_v', 'velocity_z', 'specific_humidity'], 0], [0], [12, 2, 4], [3, 27, 27], [0.5, 0.9, 0.2, 0.05], 'Local'], ['corrected_t2m', [1, 1024, ['velocity_u', 'velocity_v', 'velocity_z', 'specific_humidity'], 0], [0], [12, 2, 4], [3, 27, 27], [0.5, 0.9, 0.2, 0.05], 'Local']]
0: fields_prediction : [['velocity_u', 0.125], ['velocity_v', 0.125], ['specific_humidity', 0.05], ['velocity_z', 0.01], ['temperature', 0.1], ['total_precip', 0.01], ['t2m', 0.2], ['corrected_t2m', 0.38]]
0: fields_targets : []
0: years_train : [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020]
0: years_val : [2015]
0: month : None
0: geo_range_sampling : [[72.27, 90.0], [0.0, 360.0]]
0: time_sampling : 1
0: torch_seed : 5521420987310380410
0: batch_size_validation : 1
0: batch_size : 96
0: num_epochs : 128
0: num_samples_per_epoch : 480
0: num_samples_validate : 96
0: num_loader_workers : 5
0: size_token_info : 8
0: size_token_info_net : 16
0: grad_checkpointing : True
0: with_cls : False
0: with_mixed_precision : True
0: with_layernorm : True
0: coupling_num_heads_per_field : 1
0: dropout_rate : 0.05
0: with_qk_lnorm : True
0: encoder_num_layers : 6
0: encoder_num_heads : 16
0: encoder_num_mlp_layers : 2
0: encoder_att_type : dense
0: decoder_num_layers : 6
0: decoder_num_heads : 16
0: decoder_num_mlp_layers : 2
0: decoder_self_att : False
0: decoder_cross_att_ratio : 0.5
0: decoder_cross_att_rate : 1.0
0: decoder_att_type : dense
0: net_tail_num_nets : 16
0: net_tail_num_layers : 0
0: losses : ['mse_ensemble', 'stats']
0: optimizer_zero : False
0: lr_start : 1e-05
0: lr_max : 2e-05
0: lr_min : 1e-05
0: weight_decay : 0.025
0: lr_decay_rate : 1.025
0: lr_start_epochs : 3
0: model_log_frequency : 256
0: BERT_strategy : BERT
0: forecast_num_tokens : 2
0: BERT_fields_synced : False
0: BERT_mr_max : 2
0: log_test_num_ranks : 4
0: save_grads : False
0: profile : False
0: test_initial : False
0: attention : False
0: rng_seed : None
0: with_wandb : True
0: slurm_job_id : 19277509
0: wandb_id : w3n85s5h
0: file_path : /scratch/a/a270277/atmorep/era5_y2010_2020_res25_corrected_t2m.zarr
0: n_size : [36, 13.5, 27.0]
0: model_id : zxipahjj
0: with_pytest : True
0: lat_sampling_weighted : False
0: it == 0 and starting val norms printouts
0: validation loss for strategy=BERT at epoch 0 : 0.03199800103902817
0: validation loss for velocity_u : 0.0009276960627175868
0: validation loss for velocity_v : 0.0012063252506777644
0: validation loss for specific_humidity : 0.0002937006938736886
0: validation loss for velocity_z : 0.017153719440102577
0: validation loss for temperature : 0.0021678332705050707
0: validation loss for total_precip : 0.0019672762136906385
0: validation loss for t2m : 0.04166240990161896
0: validation loss for corrected_t2m : 0.19060510396957397
0: ============================= test session starts ==============================
0: platform linux -- Python 3.10.10, pytest-8.3.4, pluggy-1.5.0
0: rootdir: /work/ab1412
0: collected 3 items
0: 
0: atmorep/tests/validation_test.py Sample 78, Level 96: Timestamp 2015-11-07 09:00:00, Shape (18, 18)
0: Sample 35, Level 96: Timestamp 2015-10-25 16:00:00, Shape (18, 18)
0: Sample 52, Level 96: Timestamp 2015-08-05 08:00:00, Shape (18, 18)
0: Sample 4, Level 96: Timestamp 2015-04-14 08:00:00, Shape (18, 18)
0: Sample 37, Level 96: Timestamp 2015-05-18 07:00:00, Shape (18, 18)
0: .['corrected_t2m', 'specific_humidity', 't2m', 'temperature', 'total_precip', 'velocity_u', 'velocity_v', 'velocity_z']
0: Field: velocity_u, levels: [0], level: 0, level_idx: 0, samples: [74, 83, 71, 54, 47, 73, 17, 45, 13, 4, 78, 15, 22, 48, 68, 51, 58, 63, 39, 61, 40, 52, 65, 25, 18, 23, 27, 19, 42, 32, 0, 37, 7, 50, 70, 43, 6, 64, 35, 59, 66, 16, 9, 14, 67, 87, 90, 55, 11, 69]
0: F
0: 
0: =================================== FAILURES ===================================
0: _______________________________ test_coordinates _______________________________
0: 
0: field = 'velocity_u', model_id = 'w3n85s5h', BERT = True, epoch = 0
0: 
0:     def test_coordinates(field, model_id, BERT, epoch = 0):
0:         """
0:         Check that coordinates match between target and prediction.
0:         Check also that latitude and longitudes are in geographical coordinates
0:         50 random samples.
0:         """
0:     
0:         store_t = zarr.ZipStore(atmorep_target().format(model_id, model_id, str(epoch).zfill(5)))
0:         target = zarr.group(store_t)
0:         print(list(target.keys()))
0:     
0:         store_p = zarr.ZipStore(atmorep_pred().format(model_id, model_id, str(epoch).zfill(5)))
0:         pred = zarr.group(store_p)
0:     
0:         nsamples = min(len(target[field]), 50)
0:         samples = rnd.sample(range(len(target[field])), nsamples)
0:         #levels = [int(f.split("=")[1]) for f in target[f"{field}/sample=00000"]] if BERT else target[f"{field}/sample=00000"].ml[:]
0:         ##### new levels for surface fields - added this test ####
0:         if field in ['t2m', 'total_precip', 'corrected_t2m']:
0:             levels = [0]
0:         elif 'ml' in target[f"{field}/sample=00000"]:
0:             levels = target[f"{field}/sample=00000"].ml[:]
0:         else:
0:             levels = [0]
0:         #####
0:         get_data = get_BERT if BERT else get_forecast
0:     
0:         for level in levels:
0:             ### also added this
0:             if len(levels) == 1:
0:                 level_idx = 0
0:             else:
0:                 level_idx = level if BERT else np.where(np.array(levels) == level)[0].tolist()[0]
0:     
0:             print(f"Field: {field}, levels: {levels}, level: {level}, level_idx: {level_idx}, samples: {samples}")
0:     
0:             ####
0:             for s in samples:
0: >               _, datetime_target, lats_target, lons_target = get_data(target,field, s, level_idx)
0: 
0: atmorep/tests/validation_test.py:180: 
0: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
0: atmorep/tests/test_utils.py:28: in get_BERT
0:     atmorep_sample = atmorep[f"{field}/sample={sample:05d}/ml={level:05d}"]
0: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
0: 
0: self = <zarr.hierarchy.Group '/'>, item = 'velocity_u/sample=00074/ml=00000'
0: 
0:     def __getitem__(self, item):
0:         """Obtain a group member.
0:     
0:         Parameters
0:         ----------
0:         item : string
0:             Member name or path.
0:     
0:         Examples
0:         --------
0:         >>> import zarr
0:         >>> g1 = zarr.group()
0:         >>> d1 = g1.create_dataset('foo/bar/baz', shape=100, chunks=10)
0:         >>> g1['foo']
0:         <zarr.hierarchy.Group '/foo'>
0:         >>> g1['foo/bar']
0:         <zarr.hierarchy.Group '/foo/bar'>
0:         >>> g1['foo/bar/baz']
0:         <zarr.core.Array '/foo/bar/baz' (100,) float64>
0:     
0:         """
0:         path = self._item_path(item)
0:         try:
0:             return Array(
0:                 self._store,
0:                 read_only=self._read_only,
0:                 path=path,
0:                 chunk_store=self._chunk_store,
0:                 synchronizer=self._synchronizer,
0:                 cache_attrs=self.attrs.cache,
0:                 zarr_version=self._version,
0:                 meta_array=self._meta_array,
0:             )
0:         except ArrayNotFoundError:
0:             pass
0:     
0:         try:
0:             return Group(
0:                 self._store,
0:                 read_only=self._read_only,
0:                 path=path,
0:                 chunk_store=self._chunk_store,
0:                 cache_attrs=self.attrs.cache,
0:                 synchronizer=self._synchronizer,
0:                 zarr_version=self._version,
0:                 meta_array=self._meta_array,
0:             )
0:         except GroupNotFoundError:
0:             pass
0:     
0:         if self._version == 3:
0:             implicit_group = meta_root + path + "/"
0:             # non-empty folder in the metadata path implies an implicit group
0:             if self._store.list_prefix(implicit_group):
0:                 return Group(
0:                     self._store,
0:                     read_only=self._read_only,
0:                     path=path,
0:                     chunk_store=self._chunk_store,
0:                     cache_attrs=self.attrs.cache,
0:                     synchronizer=self._synchronizer,
0:                     zarr_version=self._version,
0:                     meta_array=self._meta_array,
0:                 )
0:             else:
0:                 raise KeyError(item)
0:         else:
0: >           raise KeyError(item)
0: E           KeyError: 'velocity_u/sample=00074/ml=00000'
0: 
0: pyenv/lib/python3.10/site-packages/zarr/hierarchy.py:511: KeyError
0: =========================== short test summary info ============================
0: FAILED atmorep/tests/validation_test.py::test_coordinates - KeyError: 'veloci...
0: !!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 1 failures !!!!!!!!!!!!!!!!!!!!!!!!!!!
0: ========================= 1 failed, 1 passed in 8.28s ==========================
0: ============================= test session starts ==============================
0: platform linux -- Python 3.10.10, pytest-8.3.4, pluggy-1.5.0
0: rootdir: /work/ab1412
0: collected 3 items
0: 
0: atmorep/tests/validation_test.py Sample 21, Level 96: Timestamp 2015-04-12 08:00:00, Shape (18, 18)
0: Sample 61, Level 96: Timestamp 2015-07-08 04:00:00, Shape (18, 18)
0: Sample 65, Level 96: Timestamp 2015-10-02 18:00:00, Shape (18, 18)
0: Sample 92, Level 96: Timestamp 2015-11-18 00:00:00, Shape (18, 18)
0: Sample 6, Level 96: Timestamp 2015-10-28 11:00:00, Shape (18, 18)
0: .['corrected_t2m', 'specific_humidity', 't2m', 'temperature', 'total_precip', 'velocity_u', 'velocity_v', 'velocity_z']
0: Field: velocity_v, levels: [0], level: 0, level_idx: 0, samples: [28, 76, 66, 85, 14, 65, 64, 36, 21, 57, 13, 75, 89, 44, 45, 25, 52, 49, 81, 95, 63, 93, 50, 0, 90, 15, 41, 17, 55, 32, 61, 39, 68, 88, 53, 73, 20, 6, 10, 4, 33, 84, 77, 2, 34, 37, 43, 70, 54, 12]
0: F
0: 
0: =================================== FAILURES ===================================
0: _______________________________ test_coordinates _______________________________
0: 
0: field = 'velocity_v', model_id = 'w3n85s5h', BERT = True, epoch = 0
0: 
0:     def test_coordinates(field, model_id, BERT, epoch = 0):
0:         """
0:         Check that coordinates match between target and prediction.
0:         Check also that latitude and longitudes are in geographical coordinates
0:         50 random samples.
0:         """
0:     
0:         store_t = zarr.ZipStore(atmorep_target().format(model_id, model_id, str(epoch).zfill(5)))
0:         target = zarr.group(store_t)
0:         print(list(target.keys()))
0:     
0:         store_p = zarr.ZipStore(atmorep_pred().format(model_id, model_id, str(epoch).zfill(5)))
0:         pred = zarr.group(store_p)
0:     
0:         nsamples = min(len(target[field]), 50)
0:         samples = rnd.sample(range(len(target[field])), nsamples)
0:         #levels = [int(f.split("=")[1]) for f in target[f"{field}/sample=00000"]] if BERT else target[f"{field}/sample=00000"].ml[:]
0:         ##### new levels for surface fields - added this test ####
0:         if field in ['t2m', 'total_precip', 'corrected_t2m']:
0:             levels = [0]
0:         elif 'ml' in target[f"{field}/sample=00000"]:
0:             levels = target[f"{field}/sample=00000"].ml[:]
0:         else:
0:             levels = [0]
0:         #####
0:         get_data = get_BERT if BERT else get_forecast
0:     
0:         for level in levels:
0:             ### also added this
0:             if len(levels) == 1:
0:                 level_idx = 0
0:             else:
0:                 level_idx = level if BERT else np.where(np.array(levels) == level)[0].tolist()[0]
0:     
0:             print(f"Field: {field}, levels: {levels}, level: {level}, level_idx: {level_idx}, samples: {samples}")
0:     
0:             ####
0:             for s in samples:
0: >               _, datetime_target, lats_target, lons_target = get_data(target,field, s, level_idx)
0: 
0: atmorep/tests/validation_test.py:180: 
0: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
0: atmorep/tests/test_utils.py:28: in get_BERT
0:     atmorep_sample = atmorep[f"{field}/sample={sample:05d}/ml={level:05d}"]
0: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
0: 
0: self = <zarr.hierarchy.Group '/'>, item = 'velocity_v/sample=00028/ml=00000'
0: 
0:     def __getitem__(self, item):
0:         """Obtain a group member.
0:     
0:         Parameters
0:         ----------
0:         item : string
0:             Member name or path.
0:     
0:         Examples
0:         --------
0:         >>> import zarr
0:         >>> g1 = zarr.group()
0:         >>> d1 = g1.create_dataset('foo/bar/baz', shape=100, chunks=10)
0:         >>> g1['foo']
0:         <zarr.hierarchy.Group '/foo'>
0:         >>> g1['foo/bar']
0:         <zarr.hierarchy.Group '/foo/bar'>
0:         >>> g1['foo/bar/baz']
0:         <zarr.core.Array '/foo/bar/baz' (100,) float64>
0:     
0:         """
0:         path = self._item_path(item)
0:         try:
0:             return Array(
0:                 self._store,
0:                 read_only=self._read_only,
0:                 path=path,
0:                 chunk_store=self._chunk_store,
0:                 synchronizer=self._synchronizer,
0:                 cache_attrs=self.attrs.cache,
0:                 zarr_version=self._version,
0:                 meta_array=self._meta_array,
0:             )
0:         except ArrayNotFoundError:
0:             pass
0:     
0:         try:
0:             return Group(
0:                 self._store,
0:                 read_only=self._read_only,
0:                 path=path,
0:                 chunk_store=self._chunk_store,
0:                 cache_attrs=self.attrs.cache,
0:                 synchronizer=self._synchronizer,
0:                 zarr_version=self._version,
0:                 meta_array=self._meta_array,
0:             )
0:         except GroupNotFoundError:
0:             pass
0:     
0:         if self._version == 3:
0:             implicit_group = meta_root + path + "/"
0:             # non-empty folder in the metadata path implies an implicit group
0:             if self._store.list_prefix(implicit_group):
0:                 return Group(
0:                     self._store,
0:                     read_only=self._read_only,
0:                     path=path,
0:                     chunk_store=self._chunk_store,
0:                     cache_attrs=self.attrs.cache,
0:                     synchronizer=self._synchronizer,
0:                     zarr_version=self._version,
0:                     meta_array=self._meta_array,
0:                 )
0:             else:
0:                 raise KeyError(item)
0:         else:
0: >           raise KeyError(item)
0: E           KeyError: 'velocity_v/sample=00028/ml=00000'
0: 
0: pyenv/lib/python3.10/site-packages/zarr/hierarchy.py:511: KeyError
0: =========================== short test summary info ============================
0: FAILED atmorep/tests/validation_test.py::test_coordinates - KeyError: 'veloci...
0: !!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 1 failures !!!!!!!!!!!!!!!!!!!!!!!!!!!
0: ========================= 1 failed, 1 passed in 0.70s ==========================
0: ============================= test session starts ==============================
0: platform linux -- Python 3.10.10, pytest-8.3.4, pluggy-1.5.0
0: rootdir: /work/ab1412
0: collected 3 items
0: 
0: atmorep/tests/validation_test.py Sample 17, Level 96: Timestamp 2015-01-13 15:00:00, Shape (18, 18)
0: Sample 89, Level 96: Timestamp 2015-04-13 02:00:00, Shape (18, 18)
0: Sample 72, Level 96: Timestamp 2015-05-02 10:00:00, Shape (18, 18)
0: Sample 70, Level 96: Timestamp 2015-09-21 14:00:00, Shape (18, 18)
0: Sample 21, Level 96: Timestamp 2015-04-12 08:00:00, Shape (18, 18)
0: .['corrected_t2m', 'specific_humidity', 't2m', 'temperature', 'total_precip', 'velocity_u', 'velocity_v', 'velocity_z']
0: Field: specific_humidity, levels: [0], level: 0, level_idx: 0, samples: [89, 51, 61, 66, 34, 92, 91, 39, 5, 45, 90, 47, 36, 10, 69, 43, 28, 60, 40, 19, 80, 1, 7, 11, 13, 31, 54, 94, 59, 49, 52, 14, 78, 0, 65, 55, 93, 38, 37, 63, 15, 16, 35, 3, 73, 58, 48, 74, 82, 70]
0: F
0: 
0: =================================== FAILURES ===================================
0: _______________________________ test_coordinates _______________________________
0: 
0: field = 'specific_humidity', model_id = 'w3n85s5h', BERT = True, epoch = 0
0: 
0:     def test_coordinates(field, model_id, BERT, epoch = 0):
0:         """
0:         Check that coordinates match between target and prediction.
0:         Check also that latitude and longitudes are in geographical coordinates
0:         50 random samples.
0:         """
0:     
0:         store_t = zarr.ZipStore(atmorep_target().format(model_id, model_id, str(epoch).zfill(5)))
0:         target = zarr.group(store_t)
0:         print(list(target.keys()))
0:     
0:         store_p = zarr.ZipStore(atmorep_pred().format(model_id, model_id, str(epoch).zfill(5)))
0:         pred = zarr.group(store_p)
0:     
0:         nsamples = min(len(target[field]), 50)
0:         samples = rnd.sample(range(len(target[field])), nsamples)
0:         #levels = [int(f.split("=")[1]) for f in target[f"{field}/sample=00000"]] if BERT else target[f"{field}/sample=00000"].ml[:]
0:         ##### new levels for surface fields - added this test ####
0:         if field in ['t2m', 'total_precip', 'corrected_t2m']:
0:             levels = [0]
0:         elif 'ml' in target[f"{field}/sample=00000"]:
0:             levels = target[f"{field}/sample=00000"].ml[:]
0:         else:
0:             levels = [0]
0:         #####
0:         get_data = get_BERT if BERT else get_forecast
0:     
0:         for level in levels:
0:             ### also added this
0:             if len(levels) == 1:
0:                 level_idx = 0
0:             else:
0:                 level_idx = level if BERT else np.where(np.array(levels) == level)[0].tolist()[0]
0:     
0:             print(f"Field: {field}, levels: {levels}, level: {level}, level_idx: {level_idx}, samples: {samples}")
0:     
0:             ####
0:             for s in samples:
0: >               _, datetime_target, lats_target, lons_target = get_data(target,field, s, level_idx)
0: 
0: atmorep/tests/validation_test.py:180: 
0: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
0: atmorep/tests/test_utils.py:28: in get_BERT
0:     atmorep_sample = atmorep[f"{field}/sample={sample:05d}/ml={level:05d}"]
0: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
0: 
0: self = <zarr.hierarchy.Group '/'>
0: item = 'specific_humidity/sample=00089/ml=00000'
0: 
0:     def __getitem__(self, item):
0:         """Obtain a group member.
0:     
0:         Parameters
0:         ----------
0:         item : string
0:             Member name or path.
0:     
0:         Examples
0:         --------
0:         >>> import zarr
0:         >>> g1 = zarr.group()
0:         >>> d1 = g1.create_dataset('foo/bar/baz', shape=100, chunks=10)
0:         >>> g1['foo']
0:         <zarr.hierarchy.Group '/foo'>
0:         >>> g1['foo/bar']
0:         <zarr.hierarchy.Group '/foo/bar'>
0:         >>> g1['foo/bar/baz']
0:         <zarr.core.Array '/foo/bar/baz' (100,) float64>
0:     
0:         """
0:         path = self._item_path(item)
0:         try:
0:             return Array(
0:                 self._store,
0:                 read_only=self._read_only,
0:                 path=path,
0:                 chunk_store=self._chunk_store,
0:                 synchronizer=self._synchronizer,
0:                 cache_attrs=self.attrs.cache,
0:                 zarr_version=self._version,
0:                 meta_array=self._meta_array,
0:             )
0:         except ArrayNotFoundError:
0:             pass
0:     
0:         try:
0:             return Group(
0:                 self._store,
0:                 read_only=self._read_only,
0:                 path=path,
0:                 chunk_store=self._chunk_store,
0:                 cache_attrs=self.attrs.cache,
0:                 synchronizer=self._synchronizer,
0:                 zarr_version=self._version,
0:                 meta_array=self._meta_array,
0:             )
0:         except GroupNotFoundError:
0:             pass
0:     
0:         if self._version == 3:
0:             implicit_group = meta_root + path + "/"
0:             # non-empty folder in the metadata path implies an implicit group
0:             if self._store.list_prefix(implicit_group):
0:                 return Group(
0:                     self._store,
0:                     read_only=self._read_only,
0:                     path=path,
0:                     chunk_store=self._chunk_store,
0:                     cache_attrs=self.attrs.cache,
0:                     synchronizer=self._synchronizer,
0:                     zarr_version=self._version,
0:                     meta_array=self._meta_array,
0:                 )
0:             else:
0:                 raise KeyError(item)
0:         else:
0: >           raise KeyError(item)
0: E           KeyError: 'specific_humidity/sample=00089/ml=00000'
0: 
0: pyenv/lib/python3.10/site-packages/zarr/hierarchy.py:511: KeyError
0: =========================== short test summary info ============================
0: FAILED atmorep/tests/validation_test.py::test_coordinates - KeyError: 'specif...
0: !!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 1 failures !!!!!!!!!!!!!!!!!!!!!!!!!!!
0: ========================= 1 failed, 1 passed in 0.86s ==========================
0: ============================= test session starts ==============================
0: platform linux -- Python 3.10.10, pytest-8.3.4, pluggy-1.5.0
0: rootdir: /work/ab1412
0: collected 3 items
0: 
0: atmorep/tests/validation_test.py Sample 75, Level 96: Timestamp 2015-10-03 02:00:00, Shape (18, 18)
0: Sample 86, Level 96: Timestamp 2015-04-22 19:00:00, Shape (18, 18)
0: Sample 69, Level 96: Timestamp 2015-12-19 10:00:00, Shape (18, 18)
0: Sample 93, Level 96: Timestamp 2015-03-02 10:00:00, Shape (18, 18)
0: Sample 2, Level 96: Timestamp 2015-09-22 19:00:00, Shape (18, 18)
0: .['corrected_t2m', 'specific_humidity', 't2m', 'temperature', 'total_precip', 'velocity_u', 'velocity_v', 'velocity_z']
0: Field: velocity_z, levels: [0], level: 0, level_idx: 0, samples: [21, 25, 10, 56, 20, 83, 40, 44, 23, 9, 59, 48, 31, 36, 52, 15, 18, 67, 1, 12, 66, 92, 5, 78, 85, 57, 93, 63, 55, 6, 72, 19, 60, 17, 0, 79, 86, 77, 49, 45, 64, 33, 89, 84, 75, 2, 3, 71, 94, 74]
0: F
0: 
0: =================================== FAILURES ===================================
0: _______________________________ test_coordinates _______________________________
0: 
0: field = 'velocity_z', model_id = 'w3n85s5h', BERT = True, epoch = 0
0: 
0:     def test_coordinates(field, model_id, BERT, epoch = 0):
0:         """
0:         Check that coordinates match between target and prediction.
0:         Check also that latitude and longitudes are in geographical coordinates
0:         50 random samples.
0:         """
0:     
0:         store_t = zarr.ZipStore(atmorep_target().format(model_id, model_id, str(epoch).zfill(5)))
0:         target = zarr.group(store_t)
0:         print(list(target.keys()))
0:     
0:         store_p = zarr.ZipStore(atmorep_pred().format(model_id, model_id, str(epoch).zfill(5)))
0:         pred = zarr.group(store_p)
0:     
0:         nsamples = min(len(target[field]), 50)
0:         samples = rnd.sample(range(len(target[field])), nsamples)
0:         #levels = [int(f.split("=")[1]) for f in target[f"{field}/sample=00000"]] if BERT else target[f"{field}/sample=00000"].ml[:]
0:         ##### new levels for surface fields - added this test ####
0:         if field in ['t2m', 'total_precip', 'corrected_t2m']:
0:             levels = [0]
0:         elif 'ml' in target[f"{field}/sample=00000"]:
0:             levels = target[f"{field}/sample=00000"].ml[:]
0:         else:
0:             levels = [0]
0:         #####
0:         get_data = get_BERT if BERT else get_forecast
0:     
0:         for level in levels:
0:             ### also added this
0:             if len(levels) == 1:
0:                 level_idx = 0
0:             else:
0:                 level_idx = level if BERT else np.where(np.array(levels) == level)[0].tolist()[0]
0:     
0:             print(f"Field: {field}, levels: {levels}, level: {level}, level_idx: {level_idx}, samples: {samples}")
0:     
0:             ####
0:             for s in samples:
0: >               _, datetime_target, lats_target, lons_target = get_data(target,field, s, level_idx)
0: 
0: atmorep/tests/validation_test.py:180: 
0: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
0: atmorep/tests/test_utils.py:28: in get_BERT
0:     atmorep_sample = atmorep[f"{field}/sample={sample:05d}/ml={level:05d}"]
0: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
0: 
0: self = <zarr.hierarchy.Group '/'>, item = 'velocity_z/sample=00021/ml=00000'
0: 
0:     def __getitem__(self, item):
0:         """Obtain a group member.
0:     
0:         Parameters
0:         ----------
0:         item : string
0:             Member name or path.
0:     
0:         Examples
0:         --------
0:         >>> import zarr
0:         >>> g1 = zarr.group()
0:         >>> d1 = g1.create_dataset('foo/bar/baz', shape=100, chunks=10)
0:         >>> g1['foo']
0:         <zarr.hierarchy.Group '/foo'>
0:         >>> g1['foo/bar']
0:         <zarr.hierarchy.Group '/foo/bar'>
0:         >>> g1['foo/bar/baz']
0:         <zarr.core.Array '/foo/bar/baz' (100,) float64>
0:     
0:         """
0:         path = self._item_path(item)
0:         try:
0:             return Array(
0:                 self._store,
0:                 read_only=self._read_only,
0:                 path=path,
0:                 chunk_store=self._chunk_store,
0:                 synchronizer=self._synchronizer,
0:                 cache_attrs=self.attrs.cache,
0:                 zarr_version=self._version,
0:                 meta_array=self._meta_array,
0:             )
0:         except ArrayNotFoundError:
0:             pass
0:     
0:         try:
0:             return Group(
0:                 self._store,
0:                 read_only=self._read_only,
0:                 path=path,
0:                 chunk_store=self._chunk_store,
0:                 cache_attrs=self.attrs.cache,
0:                 synchronizer=self._synchronizer,
0:                 zarr_version=self._version,
0:                 meta_array=self._meta_array,
0:             )
0:         except GroupNotFoundError:
0:             pass
0:     
0:         if self._version == 3:
0:             implicit_group = meta_root + path + "/"
0:             # non-empty folder in the metadata path implies an implicit group
0:             if self._store.list_prefix(implicit_group):
0:                 return Group(
0:                     self._store,
0:                     read_only=self._read_only,
0:                     path=path,
0:                     chunk_store=self._chunk_store,
0:                     cache_attrs=self.attrs.cache,
0:                     synchronizer=self._synchronizer,
0:                     zarr_version=self._version,
0:                     meta_array=self._meta_array,
0:                 )
0:             else:
0:                 raise KeyError(item)
0:         else:
0: >           raise KeyError(item)
0: E           KeyError: 'velocity_z/sample=00021/ml=00000'
0: 
0: pyenv/lib/python3.10/site-packages/zarr/hierarchy.py:511: KeyError
0: =========================== short test summary info ============================
0: FAILED atmorep/tests/validation_test.py::test_coordinates - KeyError: 'veloci...
0: !!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 1 failures !!!!!!!!!!!!!!!!!!!!!!!!!!!
0: ========================= 1 failed, 1 passed in 0.71s ==========================
0: ============================= test session starts ==============================
0: platform linux -- Python 3.10.10, pytest-8.3.4, pluggy-1.5.0
0: rootdir: /work/ab1412
0: collected 3 items
0: 
0: atmorep/tests/validation_test.py Sample 5, Level 96: Timestamp 2015-02-12 18:00:00, Shape (27, 27)
0: Sample 16, Level 96: Timestamp 2015-12-30 08:00:00, Shape (27, 27)
0: Sample 93, Level 96: Timestamp 2015-03-01 19:00:00, Shape (27, 27)
0: Sample 41, Level 96: Timestamp 2015-05-10 03:00:00, Shape (27, 27)
0: Sample 7, Level 96: Timestamp 2015-05-29 16:00:00, Shape (27, 27)
0: .['corrected_t2m', 'specific_humidity', 't2m', 'temperature', 'total_precip', 'velocity_u', 'velocity_v', 'velocity_z']
0: Field: temperature, levels: [0], level: 0, level_idx: 0, samples: [23, 30, 95, 5, 73, 88, 86, 27, 49, 76, 19, 29, 90, 74, 51, 32, 52, 83, 34, 26, 63, 21, 82, 94, 15, 35, 7, 12, 75, 16, 6, 56, 70, 58, 24, 84, 45, 41, 37, 8, 65, 25, 93, 71, 54, 61, 2, 20, 44, 46]
0: F
0: 
0: =================================== FAILURES ===================================
0: _______________________________ test_coordinates _______________________________
0: 
0: field = 'temperature', model_id = 'w3n85s5h', BERT = True, epoch = 0
0: 
0:     def test_coordinates(field, model_id, BERT, epoch = 0):
0:         """
0:         Check that coordinates match between target and prediction.
0:         Check also that latitude and longitudes are in geographical coordinates
0:         50 random samples.
0:         """
0:     
0:         store_t = zarr.ZipStore(atmorep_target().format(model_id, model_id, str(epoch).zfill(5)))
0:         target = zarr.group(store_t)
0:         print(list(target.keys()))
0:     
0:         store_p = zarr.ZipStore(atmorep_pred().format(model_id, model_id, str(epoch).zfill(5)))
0:         pred = zarr.group(store_p)
0:     
0:         nsamples = min(len(target[field]), 50)
0:         samples = rnd.sample(range(len(target[field])), nsamples)
0:         #levels = [int(f.split("=")[1]) for f in target[f"{field}/sample=00000"]] if BERT else target[f"{field}/sample=00000"].ml[:]
0:         ##### new levels for surface fields - added this test ####
0:         if field in ['t2m', 'total_precip', 'corrected_t2m']:
0:             levels = [0]
0:         elif 'ml' in target[f"{field}/sample=00000"]:
0:             levels = target[f"{field}/sample=00000"].ml[:]
0:         else:
0:             levels = [0]
0:         #####
0:         get_data = get_BERT if BERT else get_forecast
0:     
0:         for level in levels:
0:             ### also added this
0:             if len(levels) == 1:
0:                 level_idx = 0
0:             else:
0:                 level_idx = level if BERT else np.where(np.array(levels) == level)[0].tolist()[0]
0:     
0:             print(f"Field: {field}, levels: {levels}, level: {level}, level_idx: {level_idx}, samples: {samples}")
0:     
0:             ####
0:             for s in samples:
0: >               _, datetime_target, lats_target, lons_target = get_data(target,field, s, level_idx)
0: 
0: atmorep/tests/validation_test.py:180: 
0: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
0: atmorep/tests/test_utils.py:28: in get_BERT
0:     atmorep_sample = atmorep[f"{field}/sample={sample:05d}/ml={level:05d}"]
0: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
0: 
0: self = <zarr.hierarchy.Group '/'>, item = 'temperature/sample=00023/ml=00000'
0: 
0:     def __getitem__(self, item):
0:         """Obtain a group member.
0:     
0:         Parameters
0:         ----------
0:         item : string
0:             Member name or path.
0:     
0:         Examples
0:         --------
0:         >>> import zarr
0:         >>> g1 = zarr.group()
0:         >>> d1 = g1.create_dataset('foo/bar/baz', shape=100, chunks=10)
0:         >>> g1['foo']
0:         <zarr.hierarchy.Group '/foo'>
0:         >>> g1['foo/bar']
0:         <zarr.hierarchy.Group '/foo/bar'>
0:         >>> g1['foo/bar/baz']
0:         <zarr.core.Array '/foo/bar/baz' (100,) float64>
0:     
0:         """
0:         path = self._item_path(item)
0:         try:
0:             return Array(
0:                 self._store,
0:                 read_only=self._read_only,
0:                 path=path,
0:                 chunk_store=self._chunk_store,
0:                 synchronizer=self._synchronizer,
0:                 cache_attrs=self.attrs.cache,
0:                 zarr_version=self._version,
0:                 meta_array=self._meta_array,
0:             )
0:         except ArrayNotFoundError:
0:             pass
0:     
0:         try:
0:             return Group(
0:                 self._store,
0:                 read_only=self._read_only,
0:                 path=path,
0:                 chunk_store=self._chunk_store,
0:                 cache_attrs=self.attrs.cache,
0:                 synchronizer=self._synchronizer,
0:                 zarr_version=self._version,
0:                 meta_array=self._meta_array,
0:             )
0:         except GroupNotFoundError:
0:             pass
0:     
0:         if self._version == 3:
0:             implicit_group = meta_root + path + "/"
0:             # non-empty folder in the metadata path implies an implicit group
0:             if self._store.list_prefix(implicit_group):
0:                 return Group(
0:                     self._store,
0:                     read_only=self._read_only,
0:                     path=path,
0:                     chunk_store=self._chunk_store,
0:                     cache_attrs=self.attrs.cache,
0:                     synchronizer=self._synchronizer,
0:                     zarr_version=self._version,
0:                     meta_array=self._meta_array,
0:                 )
0:             else:
0:                 raise KeyError(item)
0:         else:
0: >           raise KeyError(item)
0: E           KeyError: 'temperature/sample=00023/ml=00000'
0: 
0: pyenv/lib/python3.10/site-packages/zarr/hierarchy.py:511: KeyError
0: =========================== short test summary info ============================
0: FAILED atmorep/tests/validation_test.py::test_coordinates - KeyError: 'temper...
0: !!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 1 failures !!!!!!!!!!!!!!!!!!!!!!!!!!!
0: ========================= 1 failed, 1 passed in 0.53s ==========================
0: ============================= test session starts ==============================
0: platform linux -- Python 3.10.10, pytest-8.3.4, pluggy-1.5.0
0: rootdir: /work/ab1412
0: collected 3 items
0: 
0: atmorep/tests/validation_test.py Sample 20, Level 0: Timestamp 2015-07-13 01:00:00, Shape (9, 9)
0: Sample 2, Level 0: Timestamp 2015-09-22 22:00:00, Shape (9, 9)
0: Sample 24, Level 0: Timestamp 2015-01-01 12:00:00, Shape (9, 9)
0: Sample 92, Level 0: Timestamp 2015-11-18 03:00:00, Shape (9, 9)
0: Sample 94, Level 0: Timestamp 2015-12-01 12:00:00, Shape (9, 9)
0: .['corrected_t2m', 'specific_humidity', 't2m', 'temperature', 'total_precip', 'velocity_u', 'velocity_v', 'velocity_z']
0: Field: total_precip, levels: [0], level: 0, level_idx: 0, samples: [57, 82, 16, 63, 50, 75, 33, 18, 42, 23, 89, 28, 83, 4, 49, 93, 77, 90, 34, 5, 9, 36, 11, 64, 24, 13, 78, 37, 48, 81, 10, 44, 69, 91, 14, 39, 21, 56, 76, 71, 1, 84, 67, 94, 59, 88, 35, 74, 45, 60]
0: ..
0: 
0: ============================== 3 passed in 1.40s ===============================
0: ============================= test session starts ==============================
0: platform linux -- Python 3.10.10, pytest-8.3.4, pluggy-1.5.0
0: rootdir: /work/ab1412
0: collected 3 items
0: 
0: atmorep/tests/validation_test.py Sample 6, Level 0: Timestamp 2015-10-29 02:00:00, Shape (27, 27)
0: Sample 78, Level 0: Timestamp 2015-11-06 18:00:00, Shape (27, 27)
0: Sample 4, Level 0: Timestamp 2015-04-14 23:00:00, Shape (27, 27)
0: Sample 73, Level 0: Timestamp 2015-06-02 22:00:00, Shape (27, 27)
0: Sample 85, Level 0: Timestamp 2015-11-13 12:00:00, Shape (27, 27)
0: .['corrected_t2m', 'specific_humidity', 't2m', 'temperature', 'total_precip', 'velocity_u', 'velocity_v', 'velocity_z']
0: Field: t2m, levels: [0], level: 0, level_idx: 0, samples: [43, 65, 95, 79, 26, 18, 88, 14, 9, 36, 12, 16, 22, 53, 83, 17, 89, 58, 44, 62, 49, 55, 25, 92, 57, 48, 10, 19, 4, 54, 30, 38, 27, 35, 21, 60, 59, 61, 84, 34, 91, 13, 77, 46, 80, 87, 8, 67, 86, 64]
0: ..
0: 
0: ============================== 3 passed in 1.38s ===============================
0: ============================= test session starts ==============================
0: platform linux -- Python 3.10.10, pytest-8.3.4, pluggy-1.5.0
0: rootdir: /work/ab1412
0: collected 3 items
0: 
0: atmorep/tests/validation_test.py Sample 20, Level 0: Timestamp 2015-07-13 07:00:00, Shape (27, 27)
0: Sample 31, Level 0: Timestamp 2015-08-08 08:00:00, Shape (27, 27)
0: Sample 55, Level 0: Timestamp 2015-10-16 15:00:00, Shape (27, 27)
0: Sample 5, Level 0: Timestamp 2015-02-12 03:00:00, Shape (27, 27)
0: Sample 82, Level 0: Timestamp 2015-08-28 21:00:00, Shape (27, 27)
0: .['corrected_t2m', 'specific_humidity', 't2m', 'temperature', 'total_precip', 'velocity_u', 'velocity_v', 'velocity_z']
0: Field: corrected_t2m, levels: [0], level: 0, level_idx: 0, samples: [91, 65, 34, 95, 26, 13, 3, 5, 31, 83, 8, 1, 66, 89, 57, 75, 68, 77, 30, 39, 17, 61, 64, 25, 11, 38, 71, 74, 43, 33, 56, 93, 32, 92, 88, 53, 55, 21, 49, 14, 78, 4, 69, 84, 94, 23, 50, 80, 22, 48]
0: ..
0: 
0: ============================== 3 passed in 1.26s ===============================
0: time 324.36828875541687
0: [1;34mwandb[0m:
0: [1;34mwandb[0m: You can sync this run to the cloud by running:
0: [1;34mwandb[0m: [1mwandb sync /work/ab1412/atmorep/wandb/offline-run-20250821_222522-w3n85s5h[0m
0: [1;34mwandb[0m: Find logs at: [1;35mwandb/offline-run-20250821_222522-w3n85s5h/logs[0m
0: l50103:1842345:1842859 [0] NCCL INFO [Service thread] Connection closed by localRank 0
0: l50103:1842345:1843475 [0] NCCL INFO comm 0x55555f101d50 rank 0 nranks 1 cudaDev 0 busId 3000 - Abort COMPLETE
