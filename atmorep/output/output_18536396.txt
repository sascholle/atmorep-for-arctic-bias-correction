0: Wandb run: atmorep-z7d7zkrn-18536396
0: l50100:427262:427262 [0] NCCL INFO Bootstrap : Using ib0:10.128.11.162<0>
0: l50100:427262:427262 [0] NCCL INFO NET/Plugin: No plugin found (libnccl-net.so)
0: l50100:427262:427262 [0] NCCL INFO NET/Plugin: Plugin load returned 2 : libnccl-net.so: cannot open shared object file: No such file or directory : when loading libnccl-net.so
0: l50100:427262:427262 [0] NCCL INFO NET/Plugin: Using internal network plugin.
0: l50100:427262:427262 [0] NCCL INFO cudaDriverVersion 12060
0: NCCL version 2.21.5+cuda12.4
1: l50109:733057:733057 [0] NCCL INFO cudaDriverVersion 12060
1: l50109:733057:733057 [0] NCCL INFO Bootstrap : Using ib0:10.128.11.168<0>
1: l50109:733057:733057 [0] NCCL INFO NET/Plugin: No plugin found (libnccl-net.so)
1: l50109:733057:733057 [0] NCCL INFO NET/Plugin: Plugin load returned 2 : libnccl-net.so: cannot open shared object file: No such file or directory : when loading libnccl-net.so
1: l50109:733057:733057 [0] NCCL INFO NET/Plugin: Using internal network plugin.
0: l50100:427262:427667 [0] NCCL INFO NET/IB : Using [0]mlx5_0:1/IB [1]mlx5_1:1/IB [RO]; OOB ib0:10.128.11.162<0>
0: l50100:427262:427667 [0] NCCL INFO Using non-device net plugin version 0
0: l50100:427262:427667 [0] NCCL INFO Using network IB
1: l50109:733057:733212 [0] NCCL INFO NET/IB : Using [0]mlx5_0:1/IB [1]mlx5_1:1/IB [RO]; OOB ib0:10.128.11.168<0>
1: l50109:733057:733212 [0] NCCL INFO Using non-device net plugin version 0
1: l50109:733057:733212 [0] NCCL INFO Using network IB
0: l50100:427262:427667 [0] NCCL INFO DMA-BUF is available on GPU device 0
1: l50109:733057:733212 [0] NCCL INFO DMA-BUF is available on GPU device 0
0: l50100:427262:427667 [0] NCCL INFO ncclCommInitRank comm 0x55555f0e29e0 rank 0 nranks 2 cudaDev 0 nvmlDev 0 busId 3000 commId 0xdf903a6de29f8f3a - Init START
1: l50109:733057:733212 [0] NCCL INFO ncclCommInitRank comm 0x55555ec9c860 rank 1 nranks 2 cudaDev 0 nvmlDev 0 busId 3000 commId 0xdf903a6de29f8f3a - Init START
1: l50109:733057:733212 [0] NCCL INFO Setting affinity for GPU 0 to ffff0000,00000000,00000000,00000000,ffff0000,00000000
0: l50100:427262:427667 [0] NCCL INFO Setting affinity for GPU 0 to ffff0000,00000000,00000000,00000000,ffff0000,00000000
1: l50109:733057:733212 [0] NCCL INFO comm 0x55555ec9c860 rank 1 nRanks 2 nNodes 2 localRanks 1 localRank 0 MNNVL 0
1: l50109:733057:733212 [0] NCCL INFO Trees [0] -1/-1/-1->1->0 [1] -1/-1/-1->1->0 [2] 0/-1/-1->1->-1 [3] 0/-1/-1->1->-1
1: l50109:733057:733212 [0] NCCL INFO P2P Chunksize set to 131072
0: l50100:427262:427667 [0] NCCL INFO comm 0x55555f0e29e0 rank 0 nRanks 2 nNodes 2 localRanks 1 localRank 0 MNNVL 0
0: l50100:427262:427667 [0] NCCL INFO Channel 00/04 :    0   1
0: l50100:427262:427667 [0] NCCL INFO Channel 01/04 :    0   1
0: l50100:427262:427667 [0] NCCL INFO Channel 02/04 :    0   1
0: l50100:427262:427667 [0] NCCL INFO Channel 03/04 :    0   1
0: l50100:427262:427667 [0] NCCL INFO Trees [0] 1/-1/-1->0->-1 [1] 1/-1/-1->0->-1 [2] -1/-1/-1->0->1 [3] -1/-1/-1->0->1
0: l50100:427262:427667 [0] NCCL INFO P2P Chunksize set to 131072
1: l50109:733057:733212 [0] NCCL INFO Channel 00/0 : 0[0] -> 1[0] [receive] via NET/IB/0
1: l50109:733057:733212 [0] NCCL INFO Channel 01/0 : 0[0] -> 1[0] [receive] via NET/IB/1
0: l50100:427262:427667 [0] NCCL INFO Channel 00/0 : 1[0] -> 0[0] [receive] via NET/IB/0
1: l50109:733057:733212 [0] NCCL INFO Channel 02/0 : 0[0] -> 1[0] [receive] via NET/IB/0
1: l50109:733057:733212 [0] NCCL INFO Channel 03/0 : 0[0] -> 1[0] [receive] via NET/IB/1
0: l50100:427262:427667 [0] NCCL INFO Channel 01/0 : 1[0] -> 0[0] [receive] via NET/IB/1
1: l50109:733057:733212 [0] NCCL INFO Channel 00/0 : 1[0] -> 0[0] [send] via NET/IB/0
0: l50100:427262:427667 [0] NCCL INFO Channel 02/0 : 1[0] -> 0[0] [receive] via NET/IB/0
1: l50109:733057:733212 [0] NCCL INFO Channel 01/0 : 1[0] -> 0[0] [send] via NET/IB/1
0: l50100:427262:427667 [0] NCCL INFO Channel 03/0 : 1[0] -> 0[0] [receive] via NET/IB/1
1: l50109:733057:733212 [0] NCCL INFO Channel 02/0 : 1[0] -> 0[0] [send] via NET/IB/0
0: l50100:427262:427667 [0] NCCL INFO Channel 00/0 : 0[0] -> 1[0] [send] via NET/IB/0
1: l50109:733057:733212 [0] NCCL INFO Channel 03/0 : 1[0] -> 0[0] [send] via NET/IB/1
0: l50100:427262:427667 [0] NCCL INFO Channel 01/0 : 0[0] -> 1[0] [send] via NET/IB/1
0: l50100:427262:427667 [0] NCCL INFO Channel 02/0 : 0[0] -> 1[0] [send] via NET/IB/0
0: l50100:427262:427667 [0] NCCL INFO Channel 03/0 : 0[0] -> 1[0] [send] via NET/IB/1
1: l50109:733057:733215 [0] NCCL INFO NCCL_IB_TIMEOUT set by environment to 250.
1: l50109:733057:733215 [0] NCCL INFO NCCL_IB_RETRY_CNT set by environment to 50.
0: l50100:427262:427670 [0] NCCL INFO NCCL_IB_TIMEOUT set by environment to 250.
0: l50100:427262:427670 [0] NCCL INFO NCCL_IB_RETRY_CNT set by environment to 50.
0: l50100:427262:427667 [0] NCCL INFO Connected all rings
1: l50109:733057:733212 [0] NCCL INFO Connected all rings
0: l50100:427262:427667 [0] NCCL INFO Connected all trees
1: l50109:733057:733212 [0] NCCL INFO Connected all trees
1: l50109:733057:733212 [0] NCCL INFO threadThresholds 8/8/64 | 16/8/64 | 512 | 512
1: l50109:733057:733212 [0] NCCL INFO 4 coll channels, 4 collnet channels, 0 nvls channels, 4 p2p channels, 2 p2p channels per peer
0: l50100:427262:427667 [0] NCCL INFO threadThresholds 8/8/64 | 16/8/64 | 512 | 512
0: l50100:427262:427667 [0] NCCL INFO 4 coll channels, 4 collnet channels, 0 nvls channels, 4 p2p channels, 2 p2p channels per peer
0: l50100:427262:427667 [0] NCCL INFO TUNER/Plugin: Plugin load returned 11 : libnccl-net.so: cannot open shared object file: No such file or directory : when loading libnccl-tuner.so
0: l50100:427262:427667 [0] NCCL INFO TUNER/Plugin: Using internal tuner plugin.
0: l50100:427262:427667 [0] NCCL INFO ncclCommInitRank comm 0x55555f0e29e0 rank 0 nranks 2 cudaDev 0 nvmlDev 0 busId 3000 commId 0xdf903a6de29f8f3a - Init COMPLETE
1: l50109:733057:733212 [0] NCCL INFO TUNER/Plugin: Plugin load returned 11 : libnccl-net.so: cannot open shared object file: No such file or directory : when loading libnccl-tuner.so
1: l50109:733057:733212 [0] NCCL INFO TUNER/Plugin: Using internal tuner plugin.
1: l50109:733057:733212 [0] NCCL INFO ncclCommInitRank comm 0x55555ec9c860 rank 1 nranks 2 cudaDev 0 nvmlDev 0 busId 3000 commId 0xdf903a6de29f8f3a - Init COMPLETE
0: with_ddp : True
0: num_accs_per_task : 1
0: par_rank : 0
0: par_size : 2
0: fields : [['velocity_u', [1, 1024, ['velocity_v', 'temperature'], 0, ['j8dwr5qj', -2]], [96, 105, 114, 123, 137], [12, 3, 6], [3, 18, 18], [0.5, 0.9, 0.2, 0.05]], ['velocity_v', [1, 1024, ['velocity_u', 'temperature'], 0, ['0tlnm5up', -2]], [96, 105, 114, 123, 137], [12, 3, 6], [3, 18, 18], [0.5, 0.9, 0.2, 0.05]], ['specific_humidity', [1, 1024, ['velocity_u', 'velocity_v', 'temperature'], 0, ['v63l01zu', -2]], [96, 105, 114, 123, 137], [12, 3, 6], [3, 18, 18], [0.5, 0.9, 0.2, 0.05]], ['velocity_z', [1, 1024, ['velocity_u', 'velocity_v', 'temperature'], 0, ['9l1errbo', -2]], [96, 105, 114, 123, 137], [12, 3, 6], [3, 18, 18], [0.5, 0.9, 0.2, 0.05]], ['temperature', [1, 1024, ['velocity_u', 'velocity_v', 'specific_humidity'], 0, ['7ojls62c', -2]], [96, 105, 114, 123, 137], [12, 2, 4], [3, 27, 27], [0.5, 0.9, 0.2, 0.05], 'Local'], ['total_precip', [1, 1024, ['velocity_u', 'velocity_v', 'velocity_z', 'specific_humidity'], 0], [0], [12, 6, 12], [3, 9, 9], [0.25, 0.9, 0.1, 0.05]], ['t2m', [1, 1024, ['velocity_u', '
0: velocity_v', 'velocity_z', 'specific_humidity'], 0], [0], [12, 2, 4], [3, 27, 27], [0.5, 0.9, 0.2, 0.05], 'Local']]
0: fields_prediction : [['velocity_u', 0.125], ['velocity_v', 0.125], ['specific_humidity', 0.05], ['velocity_z', 0.01], ['temperature', 0.1], ['total_precip', 0.01], ['t2m', 0.58]]
0: fields_targets : []
0: years_train : [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020]
0: years_val : [2021]
0: month : None
0: geo_range_sampling : [[0.0, 360.0], [0.0, 360.0]]
0: time_sampling : 1
0: torch_seed : 5521420987310380410
0: batch_size_validation : 1
0: batch_size : 96
0: num_epochs : 128
0: num_samples_per_epoch : 480
0: num_samples_validate : 128
0: num_loader_workers : 5
0: size_token_info : 8
0: size_token_info_net : 16
0: grad_checkpointing : True
0: with_cls : False
0: with_mixed_precision : True
0: with_layernorm : True
0: coupling_num_heads_per_field : 1
0: dropout_rate : 0.05
0: with_qk_lnorm : True
0: encoder_num_layers : 6
0: encoder_num_heads : 16
0: encoder_num_mlp_layers : 2
0: encoder_att_type : dense
0: decoder_num_layers : 6
0: decoder_num_heads : 16
0: decoder_num_mlp_layers : 2
0: decoder_self_att : False
0: decoder_cross_att_ratio : 0.5
0: decoder_cross_att_rate : 1.0
0: decoder_att_type : dense
0: net_tail_num_nets : 16
0: net_tail_num_layers : 0
0: losses : ['mse_ensemble', 'stats']
0: optimizer_zero : False
0: lr_start : 1e-05
0: lr_max : 2e-05
0: lr_min : 1e-05
0: weight_decay : 0.025
0: lr_decay_rate : 1.025
0: lr_start_epochs : 3
0: model_log_frequency : 256
0: BERT_strategy : BERT
0: forecast_num_tokens : 2
0: BERT_fields_synced : False
0: BERT_mr_max : 2
0: log_test_num_ranks : 0
0: save_grads : False
0: profile : False
0: test_initial : False
0: attention : False
0: rng_seed : None
0: with_wandb : True
0: slurm_job_id : 18536396
0: wandb_id : z7d7zkrn
0: file_path : /work/ab1412/atmorep/data/era5_y2010_2020_res25_with_t2m.zarr
0: n_size : [36, 13.5, 27.0]
0: model_id : wc5e2i3t
0: years_test : [2021]
1: Available keys in the Zarr dataset: ['data', 'data_sfc', 'lats', 'lons', 'time']
0: Available keys in the Zarr dataset: ['data', 'data_sfc', 'lats', 'lons', 'time']
1: self.ds['data'] : (105192, 7, 5, 721, 1440) :: (105192,)
1: self.lats : (721,)
1: self.lons : (1440,)
0: self.ds['data'] : (105192, 7, 5, 721, 1440) :: (105192,)
0: self.lats : (721,)
0: self.lons : (1440,)
1: Available keys in the Zarr dataset: ['data', 'data_sfc', 'lats', 'lons', 'time']
0: Available keys in the Zarr dataset: ['data', 'data_sfc', 'lats', 'lons', 'time']
1: self.ds['data'] : (105192, 7, 5, 721, 1440) :: (105192,)
1: self.lats : (721,)
1: self.lons : (1440,)
0: self.ds['data'] : (105192, 7, 5, 721, 1440) :: (105192,)
0: self.lats : (721,)
0: self.lons : (1440,)
1: ['cuda:0', 'cuda:1', 'cuda:2', 'cuda:3'] 0
0: ['cuda:0', 'cuda:1', 'cuda:2', 'cuda:3'] 0
1: ['cuda:0', 'cuda:1', 'cuda:2', 'cuda:3'] 0
0: ['cuda:0', 'cuda:1', 'cuda:2', 'cuda:3'] 0
1: ['cuda:0', 'cuda:1', 'cuda:2', 'cuda:3'] 0
0: ['cuda:0', 'cuda:1', 'cuda:2', 'cuda:3'] 0
1: ['cuda:0', 'cuda:1', 'cuda:2', 'cuda:3'] 0
0: ['cuda:0', 'cuda:1', 'cuda:2', 'cuda:3'] 0
1: ['cuda:0', 'cuda:1', 'cuda:2', 'cuda:3'] 0
0: ['cuda:0', 'cuda:1', 'cuda:2', 'cuda:3'] 0
1: ['cuda:0', 'cuda:1', 'cuda:2', 'cuda:3'] 0
0: ['cuda:0', 'cuda:1', 'cuda:2', 'cuda:3'] 0
1: ['cuda:0', 'cuda:1', 'cuda:2', 'cuda:3'] 0
0: ['cuda:0', 'cuda:1', 'cuda:2', 'cuda:3'] 0
1: Loaded AtmoRep: ignoring 208 elements: ['embeds_token_info.6.weight', 'embeds_token_info.6.bias', 'embeds.6.weight', 'embeds.6.bias', 'encoders.6.embed.weight', 'encoders.6.embed.bias', 'encoders.6.heads.0.proj_out.weight', 'encoders.6.heads.0.proj_heads.weight', 'encoders.6.heads.0.proj_heads_other.0.weight', 'encoders.6.heads.0.proj_heads_other.1.weight', 'encoders.6.heads.0.proj_heads_other.2.weight', 'encoders.6.heads.0.proj_heads_other.3.weight', 'encoders.6.heads.0.proj_heads_other.4.weight', 'encoders.6.heads.1.proj_out.weight', 'encoders.6.heads.1.proj_heads.weight', 'encoders.6.heads.1.proj_heads_other.0.weight', 'encoders.6.heads.1.proj_heads_other.1.weight', 'encoders.6.heads.1.proj_heads_other.2.weight', 'encoders.6.heads.1.proj_heads_other.3.weight', 'encoders.6.heads.1.proj_heads_other.4.weight', 'encoders.6.heads.2.proj_out.weight', 'encoders.6.heads.2.proj_heads.weight', 'encoders.6.heads.2.proj_heads_other.0.weight', 'encoders.6.heads.2.proj_heads_other.1.weight', 'encoders.6.heads.2.proj_hea
1: ds_other.2.weight', 'encoders.6.heads.2.proj_heads_other.3.weight', 'encoders.6.heads.2.proj_heads_other.4.weight', 'encoders.6.heads.3.proj_out.weight', 'encoders.6.heads.3.proj_heads.weight', 'encoders.6.heads.3.proj_heads_other.0.weight', 'encoders.6.heads.3.proj_heads_other.1.weight', 'encoders.6.heads.3.proj_heads_other.2.weight', 'encoders.6.heads.3.proj_heads_other.3.weight', 'encoders.6.heads.3.proj_heads_other.4.weight', 'encoders.6.heads.4.proj_out.weight', 'encoders.6.heads.4.proj_heads.weight', 'encoders.6.heads.4.proj_heads_other.0.weight', 'encoders.6.heads.4.proj_heads_other.1.weight', 'encoders.6.heads.4.proj_heads_other.2.weight', 'encoders.6.heads.4.proj_heads_other.3.weight', 'encoders.6.heads.4.proj_heads_other.4.weight', 'encoders.6.heads.5.proj_out.weight', 'encoders.6.heads.5.proj_heads.weight', 'encoders.6.heads.5.proj_heads_other.0.weight', 'encoders.6.heads.5.proj_heads_other.1.weight', 'encoders.6.heads.5.proj_heads_other.2.weight', 'encoders.6.heads.5.proj_heads_other.3.weight', 'e
1: ncoders.6.heads.5.proj_heads_other.4.weight', 'encoders.6.mlps.0.blocks.0.weight', 'encoders.6.mlps.0.blocks.0.bias', 'encoders.6.mlps.0.blocks.3.weight', 'encoders.6.mlps.0.blocks.3.bias', 'encoders.6.mlps.1.blocks.0.weight', 'encoders.6.mlps.1.blocks.0.bias', 'encoders.6.mlps.1.blocks.3.weight', 'encoders.6.mlps.1.blocks.3.bias', 'encoders.6.mlps.2.blocks.0.weight', 'encoders.6.mlps.2.blocks.0.bias', 'encoders.6.mlps.2.blocks.3.weight', 'encoders.6.mlps.2.blocks.3.bias', 'encoders.6.mlps.3.blocks.0.weight', 'encoders.6.mlps.3.blocks.0.bias', 'encoders.6.mlps.3.blocks.3.weight', 'encoders.6.mlps.3.blocks.3.bias', 'encoders.6.mlps.4.blocks.0.weight', 'encoders.6.mlps.4.blocks.0.bias', 'encoders.6.mlps.4.blocks.3.weight', 'encoders.6.mlps.4.blocks.3.bias', 'encoders.6.mlps.5.blocks.0.weight', 'encoders.6.mlps.5.blocks.0.bias', 'encoders.6.mlps.5.blocks.3.weight', 'encoders.6.mlps.5.blocks.3.bias', 'decoders.6.blocks.0.proj_heads.weight', 'decoders.6.blocks.0.proj_heads_o_q.weight', 'decoders.6.blocks.0.proj_he
1: ads_o_kv.weight', 'decoders.6.blocks.0.ln_q.weight', 'decoders.6.blocks.0.ln_q.bias', 'decoders.6.blocks.0.ln_k.weight', 'decoders.6.blocks.0.ln_k.bias', 'decoders.6.blocks.0.proj_out.weight', 'decoders.6.blocks.1.blocks.0.weight', 'decoders.6.blocks.1.blocks.0.bias', 'decoders.6.blocks.1.blocks.3.weight', 'decoders.6.blocks.1.blocks.3.bias', 'decoders.6.blocks.2.proj_heads.weight', 'decoders.6.blocks.2.proj_heads_o_q.weight', 'decoders.6.blocks.2.proj_heads_o_kv.weight', 'decoders.6.blocks.2.ln_q.weight', 'decoders.6.blocks.2.ln_q.bias', 'decoders.6.blocks.2.ln_k.weight', 'decoders.6.blocks.2.ln_k.bias', 'decoders.6.blocks.2.proj_out.weight', 'decoders.6.blocks.3.blocks.0.weight', 'decoders.6.blocks.3.blocks.0.bias', 'decoders.6.blocks.3.blocks.3.weight', 'decoders.6.blocks.3.blocks.3.bias', 'decoders.6.blocks.4.proj_heads.weight', 'decoders.6.blocks.4.proj_heads_o_q.weight', 'decoders.6.blocks.4.proj_heads_o_kv.weight', 'decoders.6.blocks.4.ln_q.weight', 'decoders.6.blocks.4.ln_q.bias', 'decoders.6.blocks.4
1: .ln_k.weight', 'decoders.6.blocks.4.ln_k.bias', 'decoders.6.blocks.4.proj_out.weight', 'decoders.6.blocks.5.blocks.0.weight', 'decoders.6.blocks.5.blocks.0.bias', 'decoders.6.blocks.5.blocks.3.weight', 'decoders.6.blocks.5.blocks.3.bias', 'decoders.6.blocks.6.proj_heads.weight', 'decoders.6.blocks.6.proj_heads_o_q.weight', 'decoders.6.blocks.6.proj_heads_o_kv.weight', 'decoders.6.blocks.6.ln_q.weight', 'decoders.6.blocks.6.ln_q.bias', 'decoders.6.blocks.6.ln_k.weight', 'decoders.6.blocks.6.ln_k.bias', 'decoders.6.blocks.6.proj_out.weight', 'decoders.6.blocks.7.blocks.0.weight', 'decoders.6.blocks.7.blocks.0.bias', 'decoders.6.blocks.7.blocks.3.weight', 'decoders.6.blocks.7.blocks.3.bias', 'decoders.6.blocks.8.proj_heads.weight', 'decoders.6.blocks.8.proj_heads_o_q.weight', 'decoders.6.blocks.8.proj_heads_o_kv.weight', 'decoders.6.blocks.8.ln_q.weight', 'decoders.6.blocks.8.ln_q.bias', 'decoders.6.blocks.8.ln_k.weight', 'decoders.6.blocks.8.ln_k.bias', 'decoders.6.blocks.8.proj_out.weight', 'decoders.6.blocks.
1: 9.blocks.0.weight', 'decoders.6.blocks.9.blocks.0.bias', 'decoders.6.blocks.9.blocks.3.weight', 'decoders.6.blocks.9.blocks.3.bias', 'decoders.6.blocks.10.proj_heads.weight', 'decoders.6.blocks.10.proj_heads_o_q.weight', 'decoders.6.blocks.10.proj_heads_o_kv.weight', 'decoders.6.blocks.10.ln_q.weight', 'decoders.6.blocks.10.ln_q.bias', 'decoders.6.blocks.10.ln_k.weight', 'decoders.6.blocks.10.ln_k.bias', 'decoders.6.blocks.10.proj_out.weight', 'decoders.6.blocks.11.blocks.0.weight', 'decoders.6.blocks.11.blocks.0.bias', 'decoders.6.blocks.11.blocks.3.weight', 'decoders.6.blocks.11.blocks.3.bias', 'tails.6.tail_nets.0.0.weight', 'tails.6.tail_nets.0.0.bias', 'tails.6.tail_nets.0.1.weight', 'tails.6.tail_nets.0.1.bias', 'tails.6.tail_nets.1.0.weight', 'tails.6.tail_nets.1.0.bias', 'tails.6.tail_nets.1.1.weight', 'tails.6.tail_nets.1.1.bias', 'tails.6.tail_nets.2.0.weight', 'tails.6.tail_nets.2.0.bias', 'tails.6.tail_nets.2.1.weight', 'tails.6.tail_nets.2.1.bias', 'tails.6.tail_nets.3.0.weight', 'tails.6.tail_ne
1: ts.3.0.bias', 'tails.6.tail_nets.3.1.weight', 'tails.6.tail_nets.3.1.bias', 'tails.6.tail_nets.4.0.weight', 'tails.6.tail_nets.4.0.bias', 'tails.6.tail_nets.4.1.weight', 'tails.6.tail_nets.4.1.bias', 'tails.6.tail_nets.5.0.weight', 'tails.6.tail_nets.5.0.bias', 'tails.6.tail_nets.5.1.weight', 'tails.6.tail_nets.5.1.bias', 'tails.6.tail_nets.6.0.weight', 'tails.6.tail_nets.6.0.bias', 'tails.6.tail_nets.6.1.weight', 'tails.6.tail_nets.6.1.bias', 'tails.6.tail_nets.7.0.weight', 'tails.6.tail_nets.7.0.bias', 'tails.6.tail_nets.7.1.weight', 'tails.6.tail_nets.7.1.bias', 'tails.6.tail_nets.8.0.weight', 'tails.6.tail_nets.8.0.bias', 'tails.6.tail_nets.8.1.weight', 'tails.6.tail_nets.8.1.bias', 'tails.6.tail_nets.9.0.weight', 'tails.6.tail_nets.9.0.bias', 'tails.6.tail_nets.9.1.weight', 'tails.6.tail_nets.9.1.bias', 'tails.6.tail_nets.10.0.weight', 'tails.6.tail_nets.10.0.bias', 'tails.6.tail_nets.10.1.weight', 'tails.6.tail_nets.10.1.bias', 'tails.6.tail_nets.11.0.weight', 'tails.6.tail_nets.11.0.bias', 'tails.6.tai
1: l_nets.11.1.weight', 'tails.6.tail_nets.11.1.bias', 'tails.6.tail_nets.12.0.weight', 'tails.6.tail_nets.12.0.bias', 'tails.6.tail_nets.12.1.weight', 'tails.6.tail_nets.12.1.bias', 'tails.6.tail_nets.13.0.weight', 'tails.6.tail_nets.13.0.bias', 'tails.6.tail_nets.13.1.weight', 'tails.6.tail_nets.13.1.bias', 'tails.6.tail_nets.14.0.weight', 'tails.6.tail_nets.14.0.bias', 'tails.6.tail_nets.14.1.weight', 'tails.6.tail_nets.14.1.bias', 'tails.6.tail_nets.15.0.weight', 'tails.6.tail_nets.15.0.bias', 'tails.6.tail_nets.15.1.weight', 'tails.6.tail_nets.15.1.bias']
0: Loaded AtmoRep: ignoring 208 elements: ['embeds_token_info.6.weight', 'embeds_token_info.6.bias', 'embeds.6.weight', 'embeds.6.bias', 'encoders.6.embed.weight', 'encoders.6.embed.bias', 'encoders.6.heads.0.proj_out.weight', 'encoders.6.heads.0.proj_heads.weight', 'encoders.6.heads.0.proj_heads_other.0.weight', 'encoders.6.heads.0.proj_heads_other.1.weight', 'encoders.6.heads.0.proj_heads_other.2.weight', 'encoders.6.heads.0.proj_heads_other.3.weight', 'encoders.6.heads.0.proj_heads_other.4.weight', 'encoders.6.heads.1.proj_out.weight', 'encoders.6.heads.1.proj_heads.weight', 'encoders.6.heads.1.proj_heads_other.0.weight', 'encoders.6.heads.1.proj_heads_other.1.weight', 'encoders.6.heads.1.proj_heads_other.2.weight', 'encoders.6.heads.1.proj_heads_other.3.weight', 'encoders.6.heads.1.proj_heads_other.4.weight', 'encoders.6.heads.2.proj_out.weight', 'encoders.6.heads.2.proj_heads.weight', 'encoders.6.heads.2.proj_heads_other.0.weight', 'encoders.6.heads.2.proj_heads_other.1.weight', 'encoders.6.heads.2.proj_hea
0: ds_other.2.weight', 'encoders.6.heads.2.proj_heads_other.3.weight', 'encoders.6.heads.2.proj_heads_other.4.weight', 'encoders.6.heads.3.proj_out.weight', 'encoders.6.heads.3.proj_heads.weight', 'encoders.6.heads.3.proj_heads_other.0.weight', 'encoders.6.heads.3.proj_heads_other.1.weight', 'encoders.6.heads.3.proj_heads_other.2.weight', 'encoders.6.heads.3.proj_heads_other.3.weight', 'encoders.6.heads.3.proj_heads_other.4.weight', 'encoders.6.heads.4.proj_out.weight', 'encoders.6.heads.4.proj_heads.weight', 'encoders.6.heads.4.proj_heads_other.0.weight', 'encoders.6.heads.4.proj_heads_other.1.weight', 'encoders.6.heads.4.proj_heads_other.2.weight', 'encoders.6.heads.4.proj_heads_other.3.weight', 'encoders.6.heads.4.proj_heads_other.4.weight', 'encoders.6.heads.5.proj_out.weight', 'encoders.6.heads.5.proj_heads.weight', 'encoders.6.heads.5.proj_heads_other.0.weight', 'encoders.6.heads.5.proj_heads_other.1.weight', 'encoders.6.heads.5.proj_heads_other.2.weight', 'encoders.6.heads.5.proj_heads_other.3.weight', 'e
0: ncoders.6.heads.5.proj_heads_other.4.weight', 'encoders.6.mlps.0.blocks.0.weight', 'encoders.6.mlps.0.blocks.0.bias', 'encoders.6.mlps.0.blocks.3.weight', 'encoders.6.mlps.0.blocks.3.bias', 'encoders.6.mlps.1.blocks.0.weight', 'encoders.6.mlps.1.blocks.0.bias', 'encoders.6.mlps.1.blocks.3.weight', 'encoders.6.mlps.1.blocks.3.bias', 'encoders.6.mlps.2.blocks.0.weight', 'encoders.6.mlps.2.blocks.0.bias', 'encoders.6.mlps.2.blocks.3.weight', 'encoders.6.mlps.2.blocks.3.bias', 'encoders.6.mlps.3.blocks.0.weight', 'encoders.6.mlps.3.blocks.0.bias', 'encoders.6.mlps.3.blocks.3.weight', 'encoders.6.mlps.3.blocks.3.bias', 'encoders.6.mlps.4.blocks.0.weight', 'encoders.6.mlps.4.blocks.0.bias', 'encoders.6.mlps.4.blocks.3.weight', 'encoders.6.mlps.4.blocks.3.bias', 'encoders.6.mlps.5.blocks.0.weight', 'encoders.6.mlps.5.blocks.0.bias', 'encoders.6.mlps.5.blocks.3.weight', 'encoders.6.mlps.5.blocks.3.bias', 'decoders.6.blocks.0.proj_heads.weight', 'decoders.6.blocks.0.proj_heads_o_q.weight', 'decoders.6.blocks.0.proj_he
0: ads_o_kv.weight', 'decoders.6.blocks.0.ln_q.weight', 'decoders.6.blocks.0.ln_q.bias', 'decoders.6.blocks.0.ln_k.weight', 'decoders.6.blocks.0.ln_k.bias', 'decoders.6.blocks.0.proj_out.weight', 'decoders.6.blocks.1.blocks.0.weight', 'decoders.6.blocks.1.blocks.0.bias', 'decoders.6.blocks.1.blocks.3.weight', 'decoders.6.blocks.1.blocks.3.bias', 'decoders.6.blocks.2.proj_heads.weight', 'decoders.6.blocks.2.proj_heads_o_q.weight', 'decoders.6.blocks.2.proj_heads_o_kv.weight', 'decoders.6.blocks.2.ln_q.weight', 'decoders.6.blocks.2.ln_q.bias', 'decoders.6.blocks.2.ln_k.weight', 'decoders.6.blocks.2.ln_k.bias', 'decoders.6.blocks.2.proj_out.weight', 'decoders.6.blocks.3.blocks.0.weight', 'decoders.6.blocks.3.blocks.0.bias', 'decoders.6.blocks.3.blocks.3.weight', 'decoders.6.blocks.3.blocks.3.bias', 'decoders.6.blocks.4.proj_heads.weight', 'decoders.6.blocks.4.proj_heads_o_q.weight', 'decoders.6.blocks.4.proj_heads_o_kv.weight', 'decoders.6.blocks.4.ln_q.weight', 'decoders.6.blocks.4.ln_q.bias', 'decoders.6.blocks.4
0: .ln_k.weight', 'decoders.6.blocks.4.ln_k.bias', 'decoders.6.blocks.4.proj_out.weight', 'decoders.6.blocks.5.blocks.0.weight', 'decoders.6.blocks.5.blocks.0.bias', 'decoders.6.blocks.5.blocks.3.weight', 'decoders.6.blocks.5.blocks.3.bias', 'decoders.6.blocks.6.proj_heads.weight', 'decoders.6.blocks.6.proj_heads_o_q.weight', 'decoders.6.blocks.6.proj_heads_o_kv.weight', 'decoders.6.blocks.6.ln_q.weight', 'decoders.6.blocks.6.ln_q.bias', 'decoders.6.blocks.6.ln_k.weight', 'decoders.6.blocks.6.ln_k.bias', 'decoders.6.blocks.6.proj_out.weight', 'decoders.6.blocks.7.blocks.0.weight', 'decoders.6.blocks.7.blocks.0.bias', 'decoders.6.blocks.7.blocks.3.weight', 'decoders.6.blocks.7.blocks.3.bias', 'decoders.6.blocks.8.proj_heads.weight', 'decoders.6.blocks.8.proj_heads_o_q.weight', 'decoders.6.blocks.8.proj_heads_o_kv.weight', 'decoders.6.blocks.8.ln_q.weight', 'decoders.6.blocks.8.ln_q.bias', 'decoders.6.blocks.8.ln_k.weight', 'decoders.6.blocks.8.ln_k.bias', 'decoders.6.blocks.8.proj_out.weight', 'decoders.6.blocks.
0: 9.blocks.0.weight', 'decoders.6.blocks.9.blocks.0.bias', 'decoders.6.blocks.9.blocks.3.weight', 'decoders.6.blocks.9.blocks.3.bias', 'decoders.6.blocks.10.proj_heads.weight', 'decoders.6.blocks.10.proj_heads_o_q.weight', 'decoders.6.blocks.10.proj_heads_o_kv.weight', 'decoders.6.blocks.10.ln_q.weight', 'decoders.6.blocks.10.ln_q.bias', 'decoders.6.blocks.10.ln_k.weight', 'decoders.6.blocks.10.ln_k.bias', 'decoders.6.blocks.10.proj_out.weight', 'decoders.6.blocks.11.blocks.0.weight', 'decoders.6.blocks.11.blocks.0.bias', 'decoders.6.blocks.11.blocks.3.weight', 'decoders.6.blocks.11.blocks.3.bias', 'tails.6.tail_nets.0.0.weight', 'tails.6.tail_nets.0.0.bias', 'tails.6.tail_nets.0.1.weight', 'tails.6.tail_nets.0.1.bias', 'tails.6.tail_nets.1.0.weight', 'tails.6.tail_nets.1.0.bias', 'tails.6.tail_nets.1.1.weight', 'tails.6.tail_nets.1.1.bias', 'tails.6.tail_nets.2.0.weight', 'tails.6.tail_nets.2.0.bias', 'tails.6.tail_nets.2.1.weight', 'tails.6.tail_nets.2.1.bias', 'tails.6.tail_nets.3.0.weight', 'tails.6.tail_ne
0: ts.3.0.bias', 'tails.6.tail_nets.3.1.weight', 'tails.6.tail_nets.3.1.bias', 'tails.6.tail_nets.4.0.weight', 'tails.6.tail_nets.4.0.bias', 'tails.6.tail_nets.4.1.weight', 'tails.6.tail_nets.4.1.bias', 'tails.6.tail_nets.5.0.weight', 'tails.6.tail_nets.5.0.bias', 'tails.6.tail_nets.5.1.weight', 'tails.6.tail_nets.5.1.bias', 'tails.6.tail_nets.6.0.weight', 'tails.6.tail_nets.6.0.bias', 'tails.6.tail_nets.6.1.weight', 'tails.6.tail_nets.6.1.bias', 'tails.6.tail_nets.7.0.weight', 'tails.6.tail_nets.7.0.bias', 'tails.6.tail_nets.7.1.weight', 'tails.6.tail_nets.7.1.bias', 'tails.6.tail_nets.8.0.weight', 'tails.6.tail_nets.8.0.bias', 'tails.6.tail_nets.8.1.weight', 'tails.6.tail_nets.8.1.bias', 'tails.6.tail_nets.9.0.weight', 'tails.6.tail_nets.9.0.bias', 'tails.6.tail_nets.9.1.weight', 'tails.6.tail_nets.9.1.bias', 'tails.6.tail_nets.10.0.weight', 'tails.6.tail_nets.10.0.bias', 'tails.6.tail_nets.10.1.weight', 'tails.6.tail_nets.10.1.bias', 'tails.6.tail_nets.11.0.weight', 'tails.6.tail_nets.11.0.bias', 'tails.6.tai
0: l_nets.11.1.weight', 'tails.6.tail_nets.11.1.bias', 'tails.6.tail_nets.12.0.weight', 'tails.6.tail_nets.12.0.bias', 'tails.6.tail_nets.12.1.weight', 'tails.6.tail_nets.12.1.bias', 'tails.6.tail_nets.13.0.weight', 'tails.6.tail_nets.13.0.bias', 'tails.6.tail_nets.13.1.weight', 'tails.6.tail_nets.13.1.bias', 'tails.6.tail_nets.14.0.weight', 'tails.6.tail_nets.14.0.bias', 'tails.6.tail_nets.14.1.weight', 'tails.6.tail_nets.14.1.bias', 'tails.6.tail_nets.15.0.weight', 'tails.6.tail_nets.15.0.bias', 'tails.6.tail_nets.15.1.weight', 'tails.6.tail_nets.15.1.bias']
1: Loaded model id = wc5e2i3t.
1: Loaded run 'wc5e2i3t' at epoch -2.
0: Loaded model id = wc5e2i3t.
0: Loaded run 'wc5e2i3t' at epoch -2.
1: -1 : 12:23:11 :: batch_size = 96, lr = 1e-05
0: Number of trainable parameters: 886,234,640
0: -1 : 12:23:11 :: batch_size = 96, lr = 1e-05
1: [DEBUG] TRAIN INPUT BATCH
1: Epoch -1, first input batch shapes / sample data:
1:   └─ Field: 'velocity_u' shape: torch.Size([96, 5, 12, 3, 6, 3, 18, 18])
0: [DEBUG] TRAIN INPUT BATCH
0: Epoch -1, first input batch shapes / sample data:
0:   └─ Field: 'velocity_u' shape: torch.Size([96, 5, 12, 3, 6, 3, 18, 18])
0:      first 25 values: tensor([0.1649, 0.1993, 0.2281, 0.2480, 0.2713, 0.3049, 0.3362, 0.3524, 0.3563, 0.3617, 0.3745, 0.3911, 0.4137, 0.4466,
1:      first 25 values: tensor([0.1649, 0.1993, 0.2281, 0.2480, 0.2713, 0.3049, 0.3362, 0.3524, 0.3563, 0.3617, 0.3745, 0.3911, 0.4137, 0.4466,
1:         0.4869, 0.5199, 0.5360, 0.5554, 0.1565, 0.1907, 0.2277, 0.2524, 0.2797, 0.3136, 0.3399], device='cuda:0')
1:   └─ Field: 'velocity_v' shape: torch.Size([96, 5, 12, 3, 6, 3, 18, 18])
0:         0.4869, 0.5199, 0.5360, 0.5554, 0.1565, 0.1907, 0.2277, 0.2524, 0.2797, 0.3136, 0.3399], device='cuda:0')
0:   └─ Field: 'velocity_v' shape: torch.Size([96, 5, 12, 3, 6, 3, 18, 18])
0:      first 25 values: tensor([-0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0.],
0:        device='cuda:0')
0:   └─ Field: 'specific_humidity' shape: torch.Size([96, 5, 12, 3, 6, 3, 18, 18])
1:      first 25 values: tensor([0.4089, 0.4513, 0.4992, 0.5043, 0.4890, 0.5064, 0.5470, 0.5762, 0.5892, 0.5969, 0.5936, 0.5688, 0.5407, 0.5219,
1:         0.5036, 0.4940, 0.5003, 0.5064, 0.4167, 0.4611, 0.5185, 0.5280, 0.5099, 0.5141, 0.5338], device='cuda:0')
1:   └─ Field: 'specific_humidity' shape: torch.Size([96, 5, 12, 3, 6, 3, 18, 18])
0:      first 25 values: tensor([-0.4070, -0.3161, -0.2631, -0.2877, -0.3743, -0.3504, -0.2991, -0.2864, -0.3151, -0.3353, -0.3699, -0.4189,
0:         -0.4449, -0.4534, -0.4479, -0.4390, -0.4355, -0.4308, -0.1228,  0.0132,  0.1452,  0.1454, -0.0191, -0.0596,
0:         -0.0541], device='cuda:0')
0:   └─ Field: 'velocity_z' shape: torch.Size([96, 5, 12, 3, 6, 3, 18, 18])
1:      first 25 values: tensor([-0.4070, -0.3161, -0.2631, -0.2877, -0.3743, -0.3504, -0.2991, -0.2864, -0.3151, -0.3353, -0.3699, -0.4189,
1:         -0.4449, -0.4534, -0.4479, -0.4390, -0.4355, -0.4308, -0.1228,  0.0132,  0.1452,  0.1454, -0.0191, -0.0596,
1:         -0.0541], device='cuda:0')
1:   └─ Field: 'velocity_z' shape: torch.Size([96, 5, 12, 3, 6, 3, 18, 18])
0:      first 25 values: tensor([ 0.4152,  0.1797,  0.1042,  0.5455,  0.5066,  0.0310,  0.1865,  0.5203,  0.3763, -0.0170,  0.0128,  0.3877,
0:          0.0608, -0.3439, -0.0764,  0.0425, -0.0261, -0.0878,  0.5524,  0.3100,  0.2917,  0.5386,  0.3626,  0.1431,
1:      first 25 values: tensor([ 0.4152,  0.1797,  0.1042,  0.5455,  0.5066,  0.0310,  0.1865,  0.5203,  0.3763, -0.0170,  0.0128,  0.3877,
1:          0.0608, -0.3439, -0.0764,  0.0425, -0.0261, -0.0878,  0.5524,  0.3100,  0.2917,  0.5386,  0.3626,  0.1431,
1:          0.5181], device='cuda:0')
1:   └─ Field: 'temperature' shape: torch.Size([96, 5, 12, 2, 4, 3, 27, 27])
0:          0.5181], device='cuda:0')
0:   └─ Field: 'temperature' shape: torch.Size([96, 5, 12, 2, 4, 3, 27, 27])
1:      first 25 values: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
1:        device='cuda:0')
1:   └─ Field: 'total_precip' shape: torch.Size([96, 1, 12, 6, 12, 3, 9, 9])
1:      first 25 values: tensor([-0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0.],
1:        device='cuda:0')
1:   └─ Field: 't2m' shape: torch.Size([96, 1, 12, 2, 4, 3, 27, 27])
1:      first 25 values: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
1:        device='cuda:0')
0:      first 25 values: tensor([ 1.8345,  1.7587,  1.7125,  1.6953,  1.6271,  1.5465,  1.5226,  1.5074,  1.4541,  1.3665,  1.2837,  1.1960,
0:          1.0362,  0.8468,  0.7007,  0.5964,  0.5085,  0.3927,  0.2541,  0.1185, -0.0205, -0.1079, -0.1366, -0.1653,
0:         -0.1807], device='cuda:0')
0:   └─ Field: 'total_precip' shape: torch.Size([96, 1, 12, 6, 12, 3, 9, 9])
0:      first 25 values: tensor([-0.2464, -0.2464, -0.2464, -0.2464, -0.2464, -0.2464, -0.2464, -0.2464, -0.2464, -0.2464, -0.2464, -0.2464,
0:         -0.2464, -0.2464, -0.2464, -0.2464, -0.2464, -0.2464, -0.2464, -0.2464, -0.2464, -0.2464, -0.2464, -0.2464,
0:         -0.2464], device='cuda:0')
0:   └─ Field: 't2m' shape: torch.Size([96, 1, 12, 2, 4, 3, 27, 27])
0:      first 25 values: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
0:        device='cuda:0')
1: [DEBUG] TRAIN TARGET BATCH
1: Epoch -1, batch 0 - Sparse-masked 't2m' shape target data: torch.Size([2184, 2187])
0: [DEBUG] TRAIN TARGET BATCH
0: Epoch -1, batch 0 - Sparse-masked 't2m' shape target data: torch.Size([2316, 2187])
0:     First 25 batch values:
0: tensor([-0.7664, -0.8313, -0.8744, -0.8786, -0.8408, -0.8319, -0.7973, -0.7393, -0.6813, -0.6644, -0.6683, -0.7115,
0:         -0.8220, -0.9108, -0.9641, -1.0009, -1.0566, -1.1389, -1.1795, -1.1885, -1.1554, -1.1930, -1.2200, -1.2355,
1:     First 25 batch values:
1: tensor([-1.0530, -0.7841, -0.5594, -0.4942, -0.4489, -0.4552, -0.4729, -0.5046, -0.5205, -0.4713, -0.4461, -0.4535,
1:         -0.4753, -0.4807, -0.4338, -0.4573, -0.3569, -0.1746,  0.0028,  0.1468,  0.3607,  0.4525,  0.4227,  0.3496,
1:          0.4306])
1: [DEBUG] TRAIN PREDICTIONS BATCH
1: Epoch -1, first predictions sample:
0:         -1.2229])
1:   └─ Predictions for 'velocity_u' shape: torch.Size([25485, 972])
0: [DEBUG] TRAIN PREDICTIONS BATCH
0: Epoch -1, first predictions sample:
0:   └─ Predictions for 'velocity_u' shape: torch.Size([25895, 972])
0:      first 25 pred values: tensor([1.3800, 1.3181, 1.2671, 1.2232, 1.1851, 1.1485, 1.1083, 1.0730, 1.0384, 1.0085, 0.9805, 0.9608, 0.9411, 0.9234,
0:         0.9086, 0.8929, 0.8790, 0.8653, 1.5331, 1.4713, 1.4202, 1.3768, 1.3406, 1.3054, 1.2686], device='cuda:0',
1:      first 25 pred values: tensor([0.0933, 0.1033, 0.1146, 0.1208, 0.1258, 0.1286, 0.1244, 0.1125, 0.0955, 0.0737, 0.0561, 0.0478, 0.0529, 0.0769,
1:         0.1184, 0.1751, 0.2386, 0.3018, 0.1443, 0.1521, 0.1568, 0.1548, 0.1508, 0.1449, 0.1372], device='cuda:0',
1:        grad_fn=<SliceBackward0>)
1:   └─ Predictions for 'velocity_v' shape: torch.Size([25667, 972])
0:        grad_fn=<SliceBackward0>)
0:   └─ Predictions for 'velocity_v' shape: torch.Size([26348, 972])
1:      first 25 pred values: tensor([-0.0482, -0.0828, -0.1041, -0.1156, -0.1208, -0.1346, -0.1546, -0.1841, -0.2171, -0.2458, -0.2709, -0.2901,
1:         -0.3111, -0.3234, -0.3326, -0.3356, -0.3313, -0.3245, -0.0726, -0.1240, -0.1606, -0.1794, -0.1921, -0.2048,
1:         -0.2274], device='cuda:0', grad_fn=<SliceBackward0>)
1:   └─ Predictions for 'specific_humidity' shape: torch.Size([27523, 972])
0:      first 25 pred values: tensor([0.2292, 0.2614, 0.2970, 0.3383, 0.3920, 0.4606, 0.5500, 0.6572, 0.7782, 0.8979, 1.0116, 1.1080, 1.1759, 1.2117,
0:         1.2189, 1.2069, 1.1909, 1.1743, 0.2049, 0.2402, 0.2741, 0.3150, 0.3649, 0.4326, 0.5267], device='cuda:0',
0:        grad_fn=<SliceBackward0>)
0:   └─ Predictions for 'specific_humidity' shape: torch.Size([26052, 972])
1:      first 25 pred values: tensor([0.3908, 0.2549, 0.1794, 0.1932, 0.2775, 0.4591, 0.6747, 0.9679, 1.2588, 1.5390, 1.7689, 1.9847, 2.1331, 2.2433,
1:         2.3011, 2.3087, 2.2755, 2.1880, 0.3937, 0.1925, 0.0842, 0.0866, 0.1906, 0.3814, 0.6308], device='cuda:0',
1:        grad_fn=<SliceBackward0>)
1:   └─ Predictions for 'velocity_z' shape: torch.Size([25660, 972])
0:      first 25 pred values: tensor([-0.2767, -0.2131, -0.1354, -0.0504,  0.0564,  0.1715,  0.3047,  0.4279,  0.5411,  0.6391,  0.7074,  0.7434,
0:          0.7723,  0.7789,  0.7788,  0.7644,  0.7376,  0.7061, -0.3108, -0.2688, -0.2174, -0.1470, -0.0533,  0.0619,
0:          0.2000], device='cuda:0', grad_fn=<SliceBackward0>)
0:   └─ Predictions for 'velocity_z' shape: torch.Size([26339, 972])
1:      first 25 pred values: tensor([ 0.6525,  0.6665,  0.6429,  0.6116,  0.5580,  0.4618,  0.3927,  0.3336,  0.2581,  0.2220,  0.2057,  0.1798,
1:          0.1572,  0.1004,  0.0160, -0.0261, -0.0426, -0.0295,  0.5768,  0.6365,  0.6815,  0.6852,  0.6354,  0.5503,
1:          0.4932], device='cuda:0', grad_fn=<SliceBackward0>)
1:   └─ Predictions for 'temperature' shape: torch.Size([11780, 2187])
0:      first 25 pred values: tensor([0.4003, 0.5105, 0.5998, 0.6871, 0.6420, 0.5036, 0.3603, 0.2046, 0.1368, 0.1706, 0.2204, 0.2624, 0.2842, 0.2905,
0:         0.3040, 0.3434, 0.3717, 0.3754, 0.1630, 0.3005, 0.4380, 0.5711, 0.5717, 0.4857, 0.3873], device='cuda:0',
0:        grad_fn=<SliceBackward0>)
0:   └─ Predictions for 'temperature' shape: torch.Size([11473, 2187])
1:      first 25 pred values: tensor([2.6910, 2.7852, 2.8630, 2.9205, 2.9679, 3.0073, 3.0427, 3.0627, 3.0633, 3.0454, 3.0202, 2.9990, 2.9883, 2.9877,
1:         2.9912, 2.9926, 2.9859, 2.9709, 2.9579, 2.9561, 2.9680, 2.9865, 3.0019, 3.0016, 2.9840], device='cuda:0',
1:        grad_fn=<SliceBackward0>)
1:   └─ Predictions for 'total_precip' shape: torch.Size([12202, 243])
0:      first 25 pred values: tensor([ 0.0111, -0.0198, -0.0551, -0.0913, -0.1283, -0.1686, -0.2150, -0.2711, -0.3367, -0.4123, -0.4967, -0.5861,
0:         -0.6795, -0.7752, -0.8620, -0.9352, -0.9868, -1.0234, -1.0550, -1.0995, -1.1676, -1.2635, -1.3869, -1.5403,
0:         -1.7192], device='cuda:0', grad_fn=<SliceBackward0>)
0:   └─ Predictions for 'total_precip' shape: torch.Size([10499, 243])
1:      first 25 pred values: tensor([-0.1341, -0.1074, -0.1073, -0.1296, -0.1551, -0.2110, -0.2662, -0.3174, -0.3453, -0.1163, -0.1050, -0.0849,
1:         -0.0787, -0.0855, -0.1357, -0.1754, -0.2298, -0.2675, -0.1157, -0.0741, -0.0490, -0.0101, -0.0034, -0.0140,
1:         -0.0512], device='cuda:0', grad_fn=<SliceBackward0>)
1:   └─ Predictions for 't2m' shape: torch.Size([2184, 2187])
0:      first 25 pred values: tensor([-0.2452, -0.2456, -0.2470, -0.2461, -0.2439, -0.2451, -0.2448, -0.2442, -0.2425, -0.2437, -0.2430, -0.2441,
0:         -0.2431, -0.2454, -0.2444, -0.2445, -0.2425, -0.2449, -0.2401, -0.2412, -0.2431, -0.2418, -0.2427, -0.2423,
1:      first 25 pred values: tensor([ 0.0771,  0.1073,  0.1433, -0.2686,  0.0644,  0.1712,  0.0163, -0.1061,  0.0225,  0.2023,  0.1298, -0.1464,
1:         -0.0382,  0.0440, -0.2404, -0.2356, -0.0658,  0.1150, -0.2259,  0.0124, -0.0481,  0.2574, -0.2144, -0.2157,
1:         -0.1774], device='cuda:0', grad_fn=<SliceBackward0>)
0:         -0.2439], device='cuda:0', grad_fn=<SliceBackward0>)
0:   └─ Predictions for 't2m' shape: torch.Size([2316, 2187])
0:      first 25 pred values: tensor([-0.1778,  0.2780,  0.0620, -0.2056, -0.0172,  0.1891,  0.1350, -0.1785, -0.0124,  0.0972,  0.0550, -0.0034,
0:          0.0025, -0.0518, -0.1148, -0.1444, -0.0041,  0.1216, -0.3619,  0.1194, -0.0630,  0.1714, -0.1587,  0.0061,
0:         -0.1455], device='cuda:0', grad_fn=<SliceBackward0>)
0: epoch: -1 [1/5 (20%)]	Loss: 0.79471 : 0.21088 :: 0.06676 (1.40 s/sec)
0: epoch: -1 [2/5 (40%)]	Loss: 0.77596 : 0.20350 :: 0.07675 (8.13 s/sec)
0: epoch: -1 [3/5 (60%)]	Loss: 0.78121 : 0.19410 :: 0.07937 (8.12 s/sec)
0: epoch: -1 [4/5 (80%)]	Loss: 0.72915 : 0.18008 :: 0.09003 (8.15 s/sec)
0: validation loss for strategy=BERT at epoch -1 : 0.21180501580238342
0: validation loss for velocity_u : 0.004418676253408194
0: validation loss for velocity_v : 0.0056479936465620995
0: validation loss for specific_humidity : 0.008230194449424744
0: validation loss for velocity_z : 0.11318936944007874
0: validation loss for temperature : 0.019957944750785828
0: validation loss for total_precip : 0.3243502974510193
0: validation loss for t2m : 1.006840467453003
0: 0 : 12:29:45 :: batch_size = 96, lr = 1e-05
1: 0 : 12:29:54 :: batch_size = 96, lr = 1e-05
0: [DEBUG] TRAIN INPUT BATCH
0: Epoch 0, first input batch shapes / sample data:
0:   └─ Field: 'velocity_u' shape: torch.Size([96, 5, 12, 3, 6, 3, 18, 18])
0:      first 25 values: tensor([-0.1898, -0.2000, -0.2075, -0.2120, -0.2145, -0.2174, -0.2201, -0.2259, -0.2338, -0.2450, -0.2594, -0.2740,
0:         -0.2854, -0.2882, -0.2860, -0.2806, -0.2787, -0.2871, -0.1348, -0.1454, -0.1547, -0.1620, -0.1671, -0.1727,
0:         -0.1762], device='cuda:0')
0:   └─ Field: 'velocity_v' shape: torch.Size([96, 5, 12, 3, 6, 3, 18, 18])
0:      first 25 values: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
0:        device='cuda:0')
0:   └─ Field: 'specific_humidity' shape: torch.Size([96, 5, 12, 3, 6, 3, 18, 18])
0:      first 25 values: tensor([1.7416, 1.7987, 1.8260, 1.8418, 1.8431, 1.8387, 1.8381, 1.8394, 1.8481, 1.8568, 1.8569, 1.8784, 1.9089, 1.9568,
0:         1.9881, 1.9974, 1.9880, 1.9701, 1.7755, 1.7971, 1.8202, 1.8172, 1.8149, 1.8074, 1.8035], device='cuda:0')
0:   └─ Field: 'velocity_z' shape: torch.Size([96, 5, 12, 3, 6, 3, 18, 18])
0:      first 25 values: tensor([ 0.3803,  0.2959,  0.2237,  0.1115,  0.0382, -0.0295, -0.0639, -0.0939, -0.1239, -0.1450, -0.2239, -0.2216,
0:         -0.2894, -0.2450, -0.2039, -0.1650, -0.0573, -0.0173,  0.3226,  0.2981,  0.2626,  0.1671,  0.1104,  0.0183,
0:         -0.0139], device='cuda:0')
0:   └─ Field: 'temperature' shape: torch.Size([96, 5, 12, 2, 4, 3, 27, 27])
0:      first 25 values: tensor([ 0.4767,  0.4779,  0.4787,  0.4732,  0.4685,  0.4558,  0.4335,  0.4036,  0.3609,  0.3275,  0.2909,  0.2470,
0:          0.2097,  0.1848,  0.1682,  0.1470,  0.1216,  0.1034,  0.0763,  0.0466, -0.0127, -0.1403, -0.3185, -0.5318,
0:         -0.7340], device='cuda:0')
0:   └─ Field: 'total_precip' shape: torch.Size([96, 1, 12, 6, 12, 3, 9, 9])
0:      first 25 values: tensor([-0.2005, -0.1380, -0.1122, -0.0877, -0.0522, -0.0092, -0.0828, -0.0595, -0.0141, -0.2312, -0.2214, -0.2042,
0:         -0.2005, -0.1699, -0.1257, -0.1637, -0.1821, -0.1601, -0.2496, -0.2484, -0.2471, -0.2385, -0.2496, -0.2496,
0:         -0.2484], device='cuda:0')
0:   └─ Field: 't2m' shape: torch.Size([96, 1, 12, 2, 4, 3, 27, 27])
0:      first 25 values: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
0:        device='cuda:0')
0: [DEBUG] TRAIN TARGET BATCH
0: Epoch 0, batch 0 - Sparse-masked 't2m' shape target data: torch.Size([2316, 2187])
0:     First 25 batch values:
0: tensor([ 0.9651,  0.9926,  0.5507,  0.0980, -0.4808, -0.7816, -0.7666, -0.5523, -0.2562,  0.0199, -0.0333, -0.1625,
0:         -0.2457, -0.3297, -0.3852, -0.5313, -0.5347, -0.4266, -0.3028, -0.1055,  0.1976,  0.7390,  0.8101,  0.5078,
0:          0.2741])
0: [DEBUG] TRAIN PREDICTIONS BATCH
0: Epoch 0, first predictions sample:
0:   └─ Predictions for 'velocity_u' shape: torch.Size([25895, 972])
0:      first 25 pred values: tensor([0.1558, 0.1411, 0.1316, 0.1274, 0.1260, 0.1280, 0.1300, 0.1330, 0.1355, 0.1396, 0.1489, 0.1694, 0.1984, 0.2363,
0:         0.2822, 0.3267, 0.3697, 0.4094, 0.1595, 0.1380, 0.1163, 0.0964, 0.0789, 0.0659, 0.0525], device='cuda:0',
0:        grad_fn=<SliceBackward0>)
0:   └─ Predictions for 'velocity_v' shape: torch.Size([26348, 972])
0:      first 25 pred values: tensor([-0.0173, -0.0290, -0.0447, -0.0620, -0.0790, -0.0886, -0.0882, -0.0814, -0.0715, -0.0595, -0.0513, -0.0470,
0:         -0.0463, -0.0488, -0.0525, -0.0544, -0.0514, -0.0435,  0.0183,  0.0087, -0.0042, -0.0237, -0.0390, -0.0498,
0:         -0.0557], device='cuda:0', grad_fn=<SliceBackward0>)
0:   └─ Predictions for 'specific_humidity' shape: torch.Size([26052, 972])
0:      first 25 pred values: tensor([0.7126, 0.7652, 0.8630, 1.0083, 1.1661, 1.3044, 1.4178, 1.4842, 1.5123, 1.5054, 1.4848, 1.4514, 1.4361, 1.4410,
0:         1.4719, 1.5456, 1.6320, 1.7485, 0.8441, 0.8738, 0.9427, 1.0341, 1.1400, 1.2283, 1.2918], device='cuda:0',
0:        grad_fn=<SliceBackward0>)
0:   └─ Predictions for 'velocity_z' shape: torch.Size([26339, 972])
0:      first 25 pred values: tensor([-0.2190, -0.1849, -0.1774, -0.2215, -0.2504, -0.2260, -0.1831, -0.1275, -0.1423, -0.2035, -0.2049, -0.2588,
0:         -0.4272, -0.5829, -0.7273, -0.8225, -0.7869, -0.7771, -0.2274, -0.2385, -0.2924, -0.3505, -0.4053, -0.3843,
0:         -0.2874], device='cuda:0', grad_fn=<SliceBackward0>)
0:   └─ Predictions for 'temperature' shape: torch.Size([11473, 2187])
0:      first 25 pred values: tensor([-1.3095, -1.3854, -1.4029, -1.3550, -1.2560, -1.1179, -0.9548, -0.7770, -0.5948, -0.4306, -0.2978, -0.2197,
0:         -0.2002, -0.2336, -0.3116, -0.4072, -0.4932, -0.5483, -0.5651, -0.5421, -0.4950, -0.4357, -0.3882, -0.3730,
0:         -0.4095], device='cuda:0', grad_fn=<SliceBackward0>)
0:   └─ Predictions for 'total_precip' shape: torch.Size([10499, 243])
0:      first 25 pred values: tensor([-0.0800, -0.0819, -0.0863, -0.0986, -0.1104, -0.1279, -0.1494, -0.1666, -0.1766, -0.1054, -0.1131, -0.1207,
0:         -0.1266, -0.1394, -0.1566, -0.1705, -0.1837, -0.1955, -0.1473, -0.1497, -0.1572, -0.1616, -0.1716, -0.1820,
0:         -0.1890], device='cuda:0', grad_fn=<SliceBackward0>)
0:   └─ Predictions for 't2m' shape: torch.Size([2316, 2187])
0:      first 25 pred values: tensor([-0.1062,  0.3865,  0.0495, -0.1403,  0.1198,  0.1624,  0.2189, -0.1526,  0.0017,  0.1109,  0.0176, -0.0203,
0:          0.0139, -0.1276, -0.0583, -0.0286, -0.0330, -0.0216, -0.1049,  0.1224, -0.1364,  0.1964, -0.1209,  0.3113,
0:         -0.0858], device='cuda:0', grad_fn=<SliceBackward0>)
1: [DEBUG] TRAIN INPUT BATCH
1: Epoch 0, first input batch shapes / sample data:
1:   └─ Field: 'velocity_u' shape: torch.Size([96, 5, 12, 3, 6, 3, 18, 18])
1:      first 25 values: tensor([-0.7998, -0.7695, -0.7413, -0.7170, -0.6975, -0.6839, -0.6768, -0.6759, -0.6807, -0.6900, -0.7014, -0.7132,
1:         -0.7243, -0.7345, -0.7450, -0.7564, -0.7687, -0.7814, -0.7105, -0.6822, -0.6562, -0.6339, -0.6170, -0.6066,
1:         -0.6031], device='cuda:0')
1:   └─ Field: 'velocity_v' shape: torch.Size([96, 5, 12, 3, 6, 3, 18, 18])
1:      first 25 values: tensor([-2.1958, -2.0383, -1.8836, -1.7352, -1.5962, -1.4691, -1.3562, -1.2604, -1.1841, -1.1282, -1.0935, -1.0789,
1:         -1.0834, -1.1051, -1.1420, -1.1918, -1.2519, -1.3199, -2.0951, -1.9449, -1.8008, -1.6656, -1.5417, -1.4307,
1:         -1.3347], device='cuda:0')
1:   └─ Field: 'specific_humidity' shape: torch.Size([96, 5, 12, 3, 6, 3, 18, 18])
1:      first 25 values: tensor([-0.6534, -0.6508, -0.6490, -0.6490, -0.6490, -0.6488, -0.6485, -0.6474, -0.6528, -0.6570, -0.6530, -0.6406,
1:         -0.6314, -0.5365, -0.4407, -0.3409, -0.2371, -0.1321, -0.6510, -0.6494, -0.6477, -0.6477, -0.6476, -0.6459,
1:         -0.6446], device='cuda:0')
1:   └─ Field: 'velocity_z' shape: torch.Size([96, 5, 12, 3, 6, 3, 18, 18])
1:      first 25 values: tensor([-0.1262, -0.1068, -0.0391,  0.0727,  0.2039,  0.3168,  0.3760,  0.3620,  0.2814,  0.1534,  0.0018, -0.1520,
1:         -0.2907, -0.3961, -0.4498, -0.4337, -0.3402, -0.1756,  0.0158,  0.0426,  0.1168,  0.2254,  0.3297,  0.3878,
1:          0.3771], device='cuda:0')
1:   └─ Field: 'temperature' shape: torch.Size([96, 5, 12, 2, 4, 3, 27, 27])
1:      first 25 values: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
1:        device='cuda:0')
1:   └─ Field: 'total_precip' shape: torch.Size([96, 1, 12, 6, 12, 3, 9, 9])
1:      first 25 values: tensor([-0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0.],
1:        device='cuda:0')
1:   └─ Field: 't2m' shape: torch.Size([96, 1, 12, 2, 4, 3, 27, 27])
1:      first 25 values: tensor([-0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0.],
1:        device='cuda:0')
1: [DEBUG] TRAIN TARGET BATCH
1: Epoch 0, batch 0 - Sparse-masked 't2m' shape target data: torch.Size([2184, 2187])
1:     First 25 batch values:
1: tensor([-0.2870, -0.2778, -0.2153, -0.1423, -0.1038, -0.1053, -0.1066, -0.1268, -0.1518, -0.1720, -0.1862, -0.2076,
1:         -0.2017, -0.1709, -0.1446, -0.1211, -0.1176, -0.1032, -0.0841, -0.0638, -0.0420, -0.0364, -0.0582, -0.0703,
1:         -0.0902])
1: [DEBUG] TRAIN PREDICTIONS BATCH
1: Epoch 0, first predictions sample:
1:   └─ Predictions for 'velocity_u' shape: torch.Size([25485, 972])
1:      first 25 pred values: tensor([-0.2849, -0.2876, -0.2968, -0.3079, -0.3148, -0.3133, -0.3039, -0.2918, -0.2800, -0.2835, -0.3049, -0.3360,
1:         -0.3711, -0.4019, -0.4278, -0.4494, -0.4666, -0.4767, -0.2625, -0.2633, -0.2645, -0.2684, -0.2693, -0.2635,
1:         -0.2510], device='cuda:0', grad_fn=<SliceBackward0>)
1:   └─ Predictions for 'velocity_v' shape: torch.Size([25667, 972])
1:      first 25 pred values: tensor([-2.4489, -2.4561, -2.4420, -2.4024, -2.3398, -2.2540, -2.1545, -2.0543, -1.9596, -1.8789, -1.8134, -1.7629,
1:         -1.7155, -1.6706, -1.6238, -1.5827, -1.5552, -1.5410, -2.4716, -2.4726, -2.4518, -2.4059, -2.3349, -2.2521,
1:         -2.1565], device='cuda:0', grad_fn=<SliceBackward0>)
1:   └─ Predictions for 'specific_humidity' shape: torch.Size([27523, 972])
1:      first 25 pred values: tensor([0.3566, 0.4128, 0.4568, 0.4883, 0.5027, 0.5109, 0.5124, 0.5078, 0.4969, 0.4751, 0.4495, 0.4134, 0.3786, 0.3363,
1:         0.2986, 0.2592, 0.2284, 0.2049, 0.4902, 0.5628, 0.6149, 0.6442, 0.6653, 0.6674, 0.6624], device='cuda:0',
1:        grad_fn=<SliceBackward0>)
1:   └─ Predictions for 'velocity_z' shape: torch.Size([25660, 972])
1:      first 25 pred values: tensor([-1.6607, -1.4868, -1.2893, -1.0737, -0.8876, -0.8728, -0.9605, -1.0235, -1.2103, -1.5091, -1.9043, -2.4181,
1:         -3.0460, -3.8390, -4.6485, -5.2442, -5.6416, -5.4930, -1.0028, -0.9248, -0.8057, -0.6573, -0.4750, -0.3916,
1:         -0.4433], device='cuda:0', grad_fn=<SliceBackward0>)
1:   └─ Predictions for 'temperature' shape: torch.Size([11780, 2187])
1:      first 25 pred values: tensor([-0.4221, -0.4299, -0.4386, -0.4444, -0.4460, -0.4423, -0.4348, -0.4272, -0.4213, -0.4200, -0.4207, -0.4226,
1:         -0.4228, -0.4220, -0.4171, -0.4126, -0.4075, -0.4036, -0.4001, -0.3947, -0.3898, -0.3845, -0.3810, -0.3820,
1:         -0.3881], device='cuda:0', grad_fn=<SliceBackward0>)
1:   └─ Predictions for 'total_precip' shape: torch.Size([12202, 243])
1:      first 25 pred values: tensor([ 0.0228,  0.0427,  0.0612,  0.0431,  0.0234, -0.0052, -0.0272, -0.0499, -0.0685, -0.0397, -0.0185, -0.0135,
1:          0.0054,  0.0211, -0.0071, -0.0066, -0.0215, -0.0039, -0.0879, -0.0748, -0.0688, -0.0278,  0.0061,  0.0196,
1:          0.0289], device='cuda:0', grad_fn=<SliceBackward0>)
1:   └─ Predictions for 't2m' shape: torch.Size([2184, 2187])
1:      first 25 pred values: tensor([ 0.1096,  0.1670,  0.0977, -0.1095,  0.1912,  0.1684,  0.0879, -0.0870, -0.0138,  0.2128,  0.0847, -0.1474,
1:         -0.0097, -0.0231, -0.1113, -0.0690, -0.0668, -0.0166, -0.0404,  0.0584, -0.1351,  0.2818, -0.2189,  0.0960,
1:         -0.0915], device='cuda:0', grad_fn=<SliceBackward0>)
0: epoch: 0 [1/5 (20%)]	Loss: 0.81526 : 0.24544 :: 0.09019 (1.54 s/sec)
0: epoch: 0 [2/5 (40%)]	Loss: 0.90825 : 0.26055 :: 0.09052 (8.18 s/sec)
0: epoch: 0 [3/5 (60%)]	Loss: 0.75195 : 0.19054 :: 0.08538 (8.17 s/sec)
0: epoch: 0 [4/5 (80%)]	Loss: 0.77610 : 0.21151 :: 0.07954 (8.06 s/sec)
0: validation loss for strategy=BERT at epoch 0 : 0.1989239603281021
0: validation loss for velocity_u : 0.0038463962264358997
0: validation loss for velocity_v : 0.005294145550578833
0: validation loss for specific_humidity : 0.00732507836073637
0: validation loss for velocity_z : 0.1115998923778534
0: validation loss for temperature : 0.020619651302695274
0: validation loss for total_precip : 0.217824786901474
0: validation loss for t2m : 1.025957703590393
0: 1 : 12:36:02 :: batch_size = 96, lr = 1.5000000000000002e-05
1: 1 : 12:36:09 :: batch_size = 96, lr = 1.5000000000000002e-05
0: [DEBUG] TRAIN INPUT BATCH
0: Epoch 1, first input batch shapes / sample data:
0:   └─ Field: 'velocity_u' shape: torch.Size([96, 5, 12, 3, 6, 3, 18, 18])
0:      first 25 values: tensor([-0.1952, -0.1688, -0.1361, -0.0981, -0.0542, -0.0033,  0.0537,  0.1174,  0.1881,  0.2638,  0.3408,  0.4162,
0:          0.4898,  0.5625,  0.6374,  0.7191,  0.8097,  0.9068, -0.1848, -0.1586, -0.1302, -0.0997, -0.0659, -0.0279,
0:          0.0160], device='cuda:0')
0:   └─ Field: 'velocity_v' shape: torch.Size([96, 5, 12, 3, 6, 3, 18, 18])
0:      first 25 values: tensor([-0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0.],
0:        device='cuda:0')
0:   └─ Field: 'specific_humidity' shape: torch.Size([96, 5, 12, 3, 6, 3, 18, 18])
0:      first 25 values: tensor([-0.3072, -0.3415, -0.3600, -0.3731, -0.3833, -0.3945, -0.3996, -0.3962, -0.4019, -0.3920, -0.3358, -0.2907,
0:         -0.2034, -0.1367, -0.0399,  0.0403,  0.0805,  0.0709, -0.3012, -0.3357, -0.3517, -0.3611, -0.3668, -0.3777,
0:         -0.3861], device='cuda:0')
0:   └─ Field: 'velocity_z' shape: torch.Size([96, 5, 12, 3, 6, 3, 18, 18])
0:      first 25 values: tensor([-0.2066, -0.1165, -0.0062,  0.0974,  0.1897,  0.3000,  0.4306,  0.5589,  0.6512,  0.6917,  0.6715,  0.5814,
0:          0.4306,  0.2392,  0.0433, -0.1053, -0.1863, -0.2156, -0.1345, -0.0085,  0.0861,  0.1627,  0.2595,  0.3810,
0:          0.5071], device='cuda:0')
0:   └─ Field: 'temperature' shape: torch.Size([96, 5, 12, 2, 4, 3, 27, 27])
0:      first 25 values: tensor([-0.0031, -0.0314, -0.0673, -0.1072, -0.1482, -0.1884, -0.2274, -0.2645, -0.2992, -0.3330, -0.3670, -0.4011,
0:         -0.4356, -0.4700, -0.5035, -0.5346, -0.5618, -0.5850, -0.6047, -0.6200, -0.6307, -0.6368, -0.6399, -0.6411,
0:         -0.6412], device='cuda:0')
0:   └─ Field: 'total_precip' shape: torch.Size([96, 1, 12, 6, 12, 3, 9, 9])
0:      first 25 values: tensor([ 0.1683,  0.1706,  0.1333,  0.0679, -0.0302, -0.0885, -0.1072, -0.0769, -0.0559,  0.0025, -0.0045, -0.0418,
0:         -0.0605, -0.0745, -0.1306, -0.1516, -0.1352, -0.1166, -0.1096, -0.1189, -0.1563, -0.1819, -0.1773, -0.1913,
0:         -0.2030], device='cuda:0')
0:   └─ Field: 't2m' shape: torch.Size([96, 1, 12, 2, 4, 3, 27, 27])
0:      first 25 values: tensor([-0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0.],
0:        device='cuda:0')
0: [DEBUG] TRAIN TARGET BATCH
0: Epoch 1, batch 0 - Sparse-masked 't2m' shape target data: torch.Size([2316, 2187])
0:     First 25 batch values:
0: tensor([1.9751, 1.9296, 1.8626, 1.8272, 1.7892, 1.7952, 1.7978, 1.7905, 1.7839, 1.7428, 1.7060, 1.7170, 1.7151, 1.7256,
0:         1.7234, 1.7529, 1.7690, 1.7785, 1.7889, 1.7455, 1.7050, 1.6777, 1.6227, 1.6406, 1.6571])
0: [DEBUG] TRAIN PREDICTIONS BATCH
0: Epoch 1, first predictions sample:
0:   └─ Predictions for 'velocity_u' shape: torch.Size([25895, 972])
0:      first 25 pred values: tensor([0.4872, 0.4764, 0.4549, 0.4229, 0.3851, 0.3435, 0.3020, 0.2632, 0.2301, 0.2013, 0.1783, 0.1606, 0.1478, 0.1397,
0:         0.1378, 0.1394, 0.1501, 0.1639, 0.5017, 0.4878, 0.4625, 0.4291, 0.3895, 0.3468, 0.3054], device='cuda:0',
0:        grad_fn=<SliceBackward0>)
0:   └─ Predictions for 'velocity_v' shape: torch.Size([26348, 972])
0:      first 25 pred values: tensor([1.0439, 1.0346, 1.0274, 1.0260, 1.0330, 1.0455, 1.0607, 1.0691, 1.0669, 1.0624, 1.0561, 1.0602, 1.0755, 1.0991,
0:         1.1261, 1.1501, 1.1739, 1.1941, 1.1233, 1.1085, 1.0950, 1.0832, 1.0807, 1.0892, 1.0950], device='cuda:0',
0:        grad_fn=<SliceBackward0>)
0:   └─ Predictions for 'specific_humidity' shape: torch.Size([26052, 972])
0:      first 25 pred values: tensor([-0.2867, -0.2902, -0.2885, -0.2877, -0.2887, -0.2900, -0.2943, -0.2969, -0.3020, -0.3067, -0.3109, -0.3142,
0:         -0.3178, -0.3197, -0.3148, -0.3099, -0.3075, -0.3069, -0.2648, -0.2645, -0.2644, -0.2642, -0.2651, -0.2685,
0:         -0.2714], device='cuda:0', grad_fn=<SliceBackward0>)
0:   └─ Predictions for 'velocity_z' shape: torch.Size([26339, 972])
0:      first 25 pred values: tensor([1.9298, 2.0721, 2.1866, 2.3218, 2.4538, 2.5720, 2.6884, 2.7805, 2.8515, 2.9027, 2.9118, 2.9121, 2.9158, 2.8908,
0:         2.8531, 2.8116, 2.7442, 2.6314, 2.1000, 2.3059, 2.4503, 2.6007, 2.7189, 2.7907, 2.8498], device='cuda:0',
0:        grad_fn=<SliceBackward0>)
0:   └─ Predictions for 'temperature' shape: torch.Size([11473, 2187])
0:      first 25 pred values: tensor([0.2730, 0.2909, 0.3057, 0.3192, 0.3284, 0.3356, 0.3398, 0.3412, 0.3429, 0.3425, 0.3416, 0.3371, 0.3313, 0.3241,
0:         0.3204, 0.3160, 0.3123, 0.3042, 0.2926, 0.2790, 0.2625, 0.2430, 0.2192, 0.1932, 0.1679], device='cuda:0',
0:        grad_fn=<SliceBackward0>)
0:   └─ Predictions for 'total_precip' shape: torch.Size([10499, 243])
0:      first 25 pred values: tensor([-0.2108, -0.2112, -0.2100, -0.2085, -0.2049, -0.2034, -0.2039, -0.2005, -0.2026, -0.2104, -0.2140, -0.2156,
0:         -0.2133, -0.2060, -0.2092, -0.2095, -0.2036, -0.2104, -0.2158, -0.2129, -0.2135, -0.2096, -0.2124, -0.2081,
0:         -0.2080], device='cuda:0', grad_fn=<SliceBackward0>)
0:   └─ Predictions for 't2m' shape: torch.Size([2316, 2187])
0:      first 25 pred values: tensor([-7.9008e-03,  3.3701e-01,  2.0145e-02, -1.4636e-01,  1.4624e-01,  1.6644e-01,  1.9001e-01,  1.6267e-02,
0:         -2.4524e-02,  1.4436e-01,  6.2034e-02, -7.1092e-02,  7.2813e-02, -1.1847e-01,  1.7467e-03,  1.4802e-01,
0:          6.3920e-02, -4.8485e-02,  2.8947e-04,  8.9262e-02, -7.9408e-02,  8.0332e-02, -3.9747e-02,  3.3293e-01,
0:         -7.6058e-02], device='cuda:0', grad_fn=<SliceBackward0>)
1: [DEBUG] TRAIN INPUT BATCH
1: Epoch 1, first input batch shapes / sample data:
1:   └─ Field: 'velocity_u' shape: torch.Size([96, 5, 12, 3, 6, 3, 18, 18])
1:      first 25 values: tensor([-0.8920, -0.9013, -0.9146, -0.9156, -0.8989, -0.8572, -0.7805, -0.7277, -0.6352, -0.6183, -0.8605, -1.1374,
1:         -1.2362, -1.2137, -1.1802, -1.1561, -1.1310, -1.1272, -0.8413, -0.8489, -0.8573, -0.8659, -0.8669, -0.8575,
1:         -0.8236], device='cuda:0')
1:   └─ Field: 'velocity_v' shape: torch.Size([96, 5, 12, 3, 6, 3, 18, 18])
1:      first 25 values: tensor([0.0847, 0.0897, 0.0857, 0.0696, 0.0321, 0.0133, 0.0223, 0.0292, 0.0411, 0.0390, 0.2280, 0.6244, 0.8401, 0.8148,
1:         0.7162, 0.6304, 0.5822, 0.5599, 0.1009, 0.0943, 0.0847, 0.0782, 0.0640, 0.0517, 0.0634], device='cuda:0')
1:   └─ Field: 'specific_humidity' shape: torch.Size([96, 5, 12, 3, 6, 3, 18, 18])
1:      first 25 values: tensor([3.0822, 3.3010, 3.4799, 3.5318, 3.5020, 3.4369, 3.5284, 3.6062, 3.8966, 4.1425, 4.1169, 3.7994, 3.1538, 2.6491,
1:         2.7935, 3.0310, 3.2752, 3.4094, 2.4934, 2.5600, 2.6765, 2.7992, 2.9597, 3.1160, 3.2752], device='cuda:0')
1:   └─ Field: 'velocity_z' shape: torch.Size([96, 5, 12, 3, 6, 3, 18, 18])
1:      first 25 values: tensor([ 0.6974,  0.2000,  0.5223,  1.0961,  1.4262,  1.2745,  0.5423,  0.2598, -0.7261, -3.4599, -4.0947, -1.2567,
1:          1.4041,  1.4960,  0.8990,  0.9477,  0.6962,  0.3883,  0.4514,  0.3473,  0.4204,  0.7638,  1.0485,  0.9953,
1:          0.5135], device='cuda:0')
1:   └─ Field: 'temperature' shape: torch.Size([96, 5, 12, 2, 4, 3, 27, 27])
1:      first 25 values: tensor([-0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0.],
1:        device='cuda:0')
1:   └─ Field: 'total_precip' shape: torch.Size([96, 1, 12, 6, 12, 3, 9, 9])
1:      first 25 values: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
1:        device='cuda:0')
1:   └─ Field: 't2m' shape: torch.Size([96, 1, 12, 2, 4, 3, 27, 27])
1:      first 25 values: tensor([0., 0., 0., -0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -0., -0., -0., -0., -0., -0., -0., -0., -0.],
1:        device='cuda:0')
1: [DEBUG] TRAIN TARGET BATCH
1: Epoch 1, batch 0 - Sparse-masked 't2m' shape target data: torch.Size([2184, 2187])
1:     First 25 batch values:
1: tensor([-0.9761, -0.6986, -0.4540, -0.1293,  0.2535,  0.6672,  0.9682,  1.1480,  1.1198,  1.1031,  1.2566,  1.4474,
1:          1.5468,  1.5412,  1.4265,  1.3496,  1.3314,  1.3205,  1.2892,  1.2307,  1.1180,  1.0543,  1.1707,  1.1305,
1:          0.9715])
1: [DEBUG] TRAIN PREDICTIONS BATCH
1: Epoch 1, first predictions sample:
1:   └─ Predictions for 'velocity_u' shape: torch.Size([25485, 972])
1:      first 25 pred values: tensor([-0.6542, -0.6755, -0.7022, -0.7350, -0.7724, -0.8122, -0.8499, -0.8800, -0.8997, -0.9127, -0.9221, -0.9351,
1:         -0.9500, -0.9654, -0.9800, -0.9922, -1.0007, -1.0079, -0.6879, -0.7133, -0.7410, -0.7710, -0.8079, -0.8458,
1:         -0.8813], device='cuda:0', grad_fn=<SliceBackward0>)
1:   └─ Predictions for 'velocity_v' shape: torch.Size([25667, 972])
1:      first 25 pred values: tensor([ 0.1587,  0.1595,  0.1576,  0.1473,  0.1333,  0.1153,  0.0975,  0.0815,  0.0660,  0.0523,  0.0394,  0.0224,
1:          0.0053, -0.0177, -0.0407, -0.0606, -0.0752, -0.0851,  0.1497,  0.1478,  0.1425,  0.1354,  0.1240,  0.1103,
1:          0.0955], device='cuda:0', grad_fn=<SliceBackward0>)
1:   └─ Predictions for 'specific_humidity' shape: torch.Size([27523, 972])
1:      first 25 pred values: tensor([-0.5143, -0.5376, -0.5533, -0.5679, -0.5747, -0.5755, -0.5751, -0.5745, -0.5781, -0.5837, -0.5908, -0.6017,
1:         -0.6114, -0.6189, -0.6169, -0.6095, -0.5997, -0.5885, -0.5063, -0.5297, -0.5486, -0.5615, -0.5688, -0.5706,
1:         -0.5709], device='cuda:0', grad_fn=<SliceBackward0>)
1:   └─ Predictions for 'velocity_z' shape: torch.Size([25660, 972])
1:      first 25 pred values: tensor([-0.6577, -0.6350, -0.5969, -0.5815, -0.5133, -0.3956, -0.2739, -0.1646, -0.0582,  0.0316,  0.0642,  0.0861,
1:          0.0906,  0.0543,  0.0292,  0.0092, -0.0021,  0.0192, -0.5926, -0.5745, -0.5233, -0.4886, -0.4210, -0.2937,
1:         -0.1458], device='cuda:0', grad_fn=<SliceBackward0>)
1:   └─ Predictions for 'temperature' shape: torch.Size([11780, 2187])
1:      first 25 pred values: tensor([1.5418, 1.5856, 1.6326, 1.6833, 1.7318, 1.7693, 1.8011, 1.8296, 1.8497, 1.8574, 1.8457, 1.8109, 1.7588, 1.7033,
1:         1.6577, 1.6293, 1.6123, 1.6056, 1.6013, 1.5899, 1.5554, 1.4876, 1.3912, 1.2771, 1.1682], device='cuda:0',
1:        grad_fn=<SliceBackward0>)
1:   └─ Predictions for 'total_precip' shape: torch.Size([12202, 243])
1:      first 25 pred values: tensor([-0.2222, -0.2229, -0.2233, -0.2221, -0.2208, -0.2175, -0.2202, -0.2134, -0.2160, -0.2246, -0.2296, -0.2313,
1:         -0.2292, -0.2225, -0.2262, -0.2211, -0.2161, -0.2182, -0.2324, -0.2317, -0.2362, -0.2288, -0.2334, -0.2242,
1:         -0.2195], device='cuda:0', grad_fn=<SliceBackward0>)
1:   └─ Predictions for 't2m' shape: torch.Size([2184, 2187])
1:      first 25 pred values: tensor([ 0.1193,  0.1336,  0.0546, -0.1095,  0.1695,  0.1994, -0.0333, -0.0003,  0.0211,  0.1673,  0.0775, -0.1884,
1:         -0.0096,  0.0030, -0.0684,  0.0704, -0.0501, -0.1128,  0.0575,  0.0407, -0.0864,  0.2156, -0.2270,  0.1861,
1:         -0.0519], device='cuda:0', grad_fn=<SliceBackward0>)
0: epoch: 1 [1/5 (20%)]	Loss: 0.75263 : 0.20555 :: 0.06914 (1.47 s/sec)
0: epoch: 1 [2/5 (40%)]	Loss: 0.72359 : 0.21014 :: 0.06602 (8.17 s/sec)
0: epoch: 1 [3/5 (60%)]	Loss: 0.73230 : 0.18163 :: 0.06395 (8.18 s/sec)
0: epoch: 1 [4/5 (80%)]	Loss: 0.76819 : 0.19691 :: 0.06739 (8.18 s/sec)
0: validation loss for strategy=BERT at epoch 1 : 0.1996171772480011
0: validation loss for velocity_u : 0.003614591434597969
0: validation loss for velocity_v : 0.005121954251080751
0: validation loss for specific_humidity : 0.007183707319200039
0: validation loss for velocity_z : 0.11065390706062317
0: validation loss for temperature : 0.021963370963931084
0: validation loss for total_precip : 0.29481321573257446
0: validation loss for t2m : 0.9539694786071777
1: 2 : 12:43:28 :: batch_size = 96, lr = 2e-05
0: 2 : 12:43:28 :: batch_size = 96, lr = 2e-05
1: [DEBUG] TRAIN INPUT BATCH
1: Epoch 2, first input batch shapes / sample data:
1:   └─ Field: 'velocity_u' shape: torch.Size([96, 5, 12, 3, 6, 3, 18, 18])
1:      first 25 values: tensor([-0.8168, -0.8192, -0.8318, -0.8413, -0.8318, -0.8090, -0.7893, -0.7690, -0.7532, -0.7504, -0.7518, -0.7591,
1:         -0.7777, -0.8030, -0.8282, -0.8517, -0.8773, -0.8990, -0.7973, -0.8029, -0.8163, -0.8283, -0.8196, -0.8033,
1:         -0.7905], device='cuda:0')
1:   └─ Field: 'velocity_v' shape: torch.Size([96, 5, 12, 3, 6, 3, 18, 18])
1:      first 25 values: tensor([-1.3318, -1.2852, -1.2451, -1.2165, -1.1900, -1.1666, -1.1253, -1.0783, -1.0499, -1.0350, -1.0290, -1.0257,
1:         -1.0201, -1.0098, -0.9969, -0.9847, -0.9618, -0.9233, -1.3045, -1.2639, -1.2277, -1.1960, -1.1857, -1.1931,
1:         -1.1813], device='cuda:0')
1:   └─ Field: 'specific_humidity' shape: torch.Size([96, 5, 12, 3, 6, 3, 18, 18])
1:      first 25 values: tensor([1.9426, 1.8972, 1.7992, 1.6992, 1.4686, 1.2137, 1.0198, 0.9811, 0.9663, 0.9482, 0.9255, 0.9009, 0.8462, 0.7585,
1:         0.6751, 0.6575, 0.6962, 0.6993, 1.9310, 1.8964, 1.7924, 1.7595, 1.5248, 1.2046, 1.0002], device='cuda:0')
1:   └─ Field: 'velocity_z' shape: torch.Size([96, 5, 12, 3, 6, 3, 18, 18])
1:      first 25 values: tensor([-0.8292, -1.2625, -0.8935, -0.7389, -0.3462, -0.1284, -0.3981, -0.4117, -0.4715, -0.5459, -0.5448, -0.4658,
1:         -0.2435, -0.1657, -0.0280, -0.0111, -0.2751, -0.3914, -0.7209, -0.5144, -0.0686, -0.6893, -0.8111, -0.5550,
1:         -0.6159], device='cuda:0')
1:   └─ Field: 'temperature' shape: torch.Size([96, 5, 12, 2, 4, 3, 27, 27])
1:      first 25 values: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
1:        device='cuda:0')
1:   └─ Field: 'total_precip' shape: torch.Size([96, 1, 12, 6, 12, 3, 9, 9])
1:      first 25 values: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
1:        device='cuda:0')
1:   └─ Field: 't2m' shape: torch.Size([96, 1, 12, 2, 4, 3, 27, 27])
1:      first 25 values: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
1:        device='cuda:0')
1: [DEBUG] TRAIN TARGET BATCH
1: Epoch 2, batch 0 - Sparse-masked 't2m' shape target data: torch.Size([2184, 2187])
1:     First 25 batch values:
1: tensor([1.4596, 1.4664, 1.4321, 1.3256, 1.0154, 1.0395, 0.9778, 0.9997, 1.0880, 1.1422, 1.2078, 1.2810, 1.2548, 1.2553,
1:         1.2931, 1.3521, 1.3675, 1.3937, 1.4158, 1.3705, 1.2414, 1.0314, 0.8573, 0.7203, 0.4735])
1: [DEBUG] TRAIN PREDICTIONS BATCH
1: Epoch 2, first predictions sample:
1:   └─ Predictions for 'velocity_u' shape: torch.Size([25485, 972])
1:      first 25 pred values: tensor([-0.4633, -0.4795, -0.4937, -0.5117, -0.5319, -0.5520, -0.5759, -0.5990, -0.6283, -0.6617, -0.6956, -0.7298,
1:         -0.7530, -0.7684, -0.7792, -0.7881, -0.8023, -0.8219, -0.4380, -0.4581, -0.4722, -0.4886, -0.5038, -0.5184,
1:         -0.5288], device='cuda:0', grad_fn=<SliceBackward0>)
1:   └─ Predictions for 'velocity_v' shape: torch.Size([25667, 972])
1:      first 25 pred values: tensor([-0.9549, -0.9759, -0.9958, -1.0122, -1.0233, -1.0328, -1.0377, -1.0393, -1.0369, -1.0325, -1.0253, -1.0138,
1:         -0.9959, -0.9719, -0.9434, -0.9114, -0.8800, -0.8494, -0.9167, -0.9373, -0.9591, -0.9796, -0.9996, -1.0128,
1:         -1.0222], device='cuda:0', grad_fn=<SliceBackward0>)
1:   └─ Predictions for 'specific_humidity' shape: torch.Size([27523, 972])
1:      first 25 pred values: tensor([-0.2313, -0.2379, -0.2344, -0.2301, -0.2210, -0.2128, -0.2067, -0.2037, -0.2057, -0.2081, -0.2135, -0.2168,
1:         -0.2219, -0.2243, -0.2242, -0.2224, -0.2179, -0.2133, -0.2557, -0.2632, -0.2647, -0.2561, -0.2474, -0.2346,
1:         -0.2273], device='cuda:0', grad_fn=<SliceBackward0>)
1:   └─ Predictions for 'velocity_z' shape: torch.Size([25660, 972])
1:      first 25 pred values: tensor([ 0.4208,  0.3631,  0.2736,  0.1035, -0.0526, -0.0850, -0.0662, -0.0143,  0.0707,  0.1275,  0.1490,  0.1483,
1:          0.1568,  0.1601,  0.1303,  0.1104,  0.1170,  0.1406,  0.4512,  0.3959,  0.3238,  0.1954,  0.0540,  0.0046,
1:          0.0019], device='cuda:0', grad_fn=<SliceBackward0>)
1:   └─ Predictions for 'temperature' shape: torch.Size([11780, 2187])
1:      first 25 pred values: tensor([-1.3792, -1.3633, -1.3537, -1.3456, -1.3341, -1.3205, -1.3074, -1.2986, -1.2992, -1.3147, -1.3476, -1.3943,
1:         -1.4429, -1.4822, -1.5045, -1.5106, -1.5044, -1.4893, -1.4647, -1.4259, -1.3737, -1.3155, -1.2553, -1.1894,
1:         -1.1099], device='cuda:0', grad_fn=<SliceBackward0>)
1:   └─ Predictions for 'total_precip' shape: torch.Size([12202, 243])
1:      first 25 pred values: tensor([-0.2343, -0.2297, -0.2323, -0.2367, -0.2343, -0.2340, -0.2357, -0.2348, -0.2351, -0.2373, -0.2366, -0.2350,
1:         -0.2300, -0.2273, -0.2361, -0.2323, -0.2334, -0.2377, -0.2384, -0.2377, -0.2351, -0.2333, -0.2333, -0.2312,
1:         -0.2366], device='cuda:0', grad_fn=<SliceBackward0>)
1:   └─ Predictions for 't2m' shape: torch.Size([2184, 2187])
1:      first 25 pred values: tensor([ 0.1383,  0.0435,  0.0293, -0.0985,  0.1798,  0.2468, -0.0478,  0.0063,  0.0199,  0.1598,  0.0452, -0.2286,
1:         -0.0497,  0.0570, -0.0048,  0.1276,  0.0073, -0.1300,  0.0185,  0.0714, -0.0977,  0.1677, -0.1370,  0.1754,
1:          0.0169], device='cuda:0', grad_fn=<SliceBackward0>)
0: [DEBUG] TRAIN INPUT BATCH
0: Epoch 2, first input batch shapes / sample data:
0:   └─ Field: 'velocity_u' shape: torch.Size([96, 5, 12, 3, 6, 3, 18, 18])
0:      first 25 values: tensor([-0.8168, -0.8192, -0.8318, -0.8413, -0.8318, -0.8090, -0.7893, -0.7690, -0.7532, -0.7504, -0.7518, -0.7591,
0:         -0.7777, -0.8030, -0.8282, -0.8517, -0.8773, -0.8990, -0.7973, -0.8029, -0.8163, -0.8283, -0.8196, -0.8033,
0:         -0.7905], device='cuda:0')
0:   └─ Field: 'velocity_v' shape: torch.Size([96, 5, 12, 3, 6, 3, 18, 18])
0:      first 25 values: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
0:        device='cuda:0')
0:   └─ Field: 'specific_humidity' shape: torch.Size([96, 5, 12, 3, 6, 3, 18, 18])
0:      first 25 values: tensor([1.9426, 1.8972, 1.7992, 1.6992, 1.4686, 1.2137, 1.0198, 0.9811, 0.9663, 0.9482, 0.9255, 0.9009, 0.8462, 0.7585,
0:         0.6751, 0.6575, 0.6962, 0.6993, 1.9310, 1.8964, 1.7924, 1.7595, 1.5248, 1.2046, 1.0002], device='cuda:0')
0:   └─ Field: 'velocity_z' shape: torch.Size([96, 5, 12, 3, 6, 3, 18, 18])
0:      first 25 values: tensor([-0.8292, -1.2625, -0.8935, -0.7389, -0.3462, -0.1284, -0.3981, -0.4117, -0.4715, -0.5459, -0.5448, -0.4658,
0:         -0.2435, -0.1657, -0.0280, -0.0111, -0.2751, -0.3914, -0.7209, -0.5144, -0.0686, -0.6893, -0.8111, -0.5550,
0:         -0.6159], device='cuda:0')
0:   └─ Field: 'temperature' shape: torch.Size([96, 5, 12, 2, 4, 3, 27, 27])
0:      first 25 values: tensor([-1.5389, -1.4682, -1.4108, -1.3305, -1.3071, -1.3203, -1.2836, -1.2181, -1.1386, -1.0522, -0.9748, -0.9083,
0:         -0.8601, -0.8148, -0.7720, -0.7511, -0.7442, -0.7200, -0.6322, -0.5280, -0.5042, -0.5552, -0.6183, -0.6036,
0:         -0.4476], device='cuda:0')
0:   └─ Field: 'total_precip' shape: torch.Size([96, 1, 12, 6, 12, 3, 9, 9])
0:      first 25 values: tensor([-0.2404, -0.2404, -0.2404, -0.2404, -0.2404, -0.2404, -0.2404, -0.2404, -0.2404, -0.2404, -0.2404, -0.2404,
0:         -0.2404, -0.2404, -0.2404, -0.2404, -0.2404, -0.2404, -0.2404, -0.2404, -0.2404, -0.2404, -0.2404, -0.2404,
0:         -0.2404], device='cuda:0')
0:   └─ Field: 't2m' shape: torch.Size([96, 1, 12, 2, 4, 3, 27, 27])
0:      first 25 values: tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
0:        device='cuda:0')
0: [DEBUG] TRAIN TARGET BATCH
0: Epoch 2, batch 0 - Sparse-masked 't2m' shape target data: torch.Size([2316, 2187])
0:     First 25 batch values:
0: tensor([ 0.8677,  0.8009,  0.6538,  0.4202,  0.3587,  0.3198,  0.3367,  0.3823,  0.3579,  0.3616,  0.3417,  0.1652,
0:         -0.0356, -0.0348,  0.0730,  0.1660,  0.0426, -0.3695, -0.5947, -0.6520, -0.6404, -0.6256, -0.6137, -0.6764,
0:         -0.6554])
0: [DEBUG] TRAIN PREDICTIONS BATCH
0: Epoch 2, first predictions sample:
0:   └─ Predictions for 'velocity_u' shape: torch.Size([25895, 972])
0:      first 25 pred values: tensor([1.0293, 1.0023, 0.9790, 0.9610, 0.9476, 0.9378, 0.9361, 0.9359, 0.9431, 0.9538, 0.9686, 0.9828, 0.9928, 0.9969,
0:         0.9875, 0.9679, 0.9378, 0.8957, 1.0747, 1.0402, 1.0097, 0.9817, 0.9567, 0.9378, 0.9260], device='cuda:0',
0:        grad_fn=<SliceBackward0>)
0:   └─ Predictions for 'velocity_v' shape: torch.Size([26348, 972])
0:      first 25 pred values: tensor([-0.8255, -0.8128, -0.8171, -0.8460, -0.8935, -0.9523, -1.0063, -1.0522, -1.0758, -1.0797, -1.0685, -1.0432,
0:         -1.0046, -0.9582, -0.9067, -0.8522, -0.7995, -0.7502, -0.8029, -0.7774, -0.7676, -0.7874, -0.8330, -0.8969,
0:         -0.9634], device='cuda:0', grad_fn=<SliceBackward0>)
0:   └─ Predictions for 'specific_humidity' shape: torch.Size([26052, 972])
0:      first 25 pred values: tensor([1.0042, 0.9094, 0.8126, 0.7229, 0.6607, 0.6401, 0.6579, 0.7112, 0.7730, 0.8279, 0.8513, 0.8381, 0.7838, 0.6775,
0:         0.5588, 0.4194, 0.2801, 0.1504, 1.0427, 0.9896, 0.9253, 0.8540, 0.7913, 0.7583, 0.7532], device='cuda:0',
0:        grad_fn=<SliceBackward0>)
0:   └─ Predictions for 'velocity_z' shape: torch.Size([26339, 972])
0:      first 25 pred values: tensor([-1.0112, -1.3011, -1.0849, -0.5360, -0.3612, -0.2430,  0.6116,  1.6334,  1.5108, -0.0055, -1.8026, -2.4400,
0:         -1.7143, -0.4472,  0.6901,  0.9851,  0.1677, -0.9084, -1.3837, -1.7356, -1.7002, -1.2802, -1.0517, -0.8598,
0:          0.1660], device='cuda:0', grad_fn=<SliceBackward0>)
0:   └─ Predictions for 'temperature' shape: torch.Size([11473, 2187])
0:      first 25 pred values: tensor([0.4954, 0.5661, 0.6341, 0.6933, 0.7374, 0.7643, 0.7838, 0.8006, 0.8218, 0.8477, 0.8775, 0.9040, 0.9240, 0.9390,
0:         0.9561, 0.9886, 1.0406, 1.1025, 1.1563, 1.1842, 1.1871, 1.1842, 1.2025, 1.2548, 1.3371], device='cuda:0',
0:        grad_fn=<SliceBackward0>)
0:   └─ Predictions for 'total_precip' shape: torch.Size([10499, 243])
0:      first 25 pred values: tensor([-0.2394, -0.2370, -0.2395, -0.2440, -0.2384, -0.2377, -0.2366, -0.2384, -0.2365, -0.2401, -0.2407, -0.2393,
0:         -0.2366, -0.2327, -0.2389, -0.2365, -0.2358, -0.2415, -0.2402, -0.2393, -0.2351, -0.2346, -0.2342, -0.2323,
0:         -0.2382], device='cuda:0', grad_fn=<SliceBackward0>)
0:   └─ Predictions for 't2m' shape: torch.Size([2316, 2187])
0:      first 25 pred values: tensor([ 0.0021,  0.2111,  0.0330, -0.0838,  0.1386,  0.1960,  0.0372, -0.0040,  0.0306,  0.0795, -0.0302, -0.1272,
0:         -0.0039, -0.0507,  0.0358,  0.1987,  0.0415, -0.0808, -0.0458,  0.1210, -0.1275,  0.1235, -0.0933,  0.3441,
0:          0.0405], device='cuda:0', grad_fn=<SliceBackward0>)
0: epoch: 2 [1/5 (20%)]	Loss: 0.76924 : 0.20046 :: 0.06499 (1.70 s/sec)
0: epoch: 2 [2/5 (40%)]	Loss: 0.69213 : 0.17568 :: 0.07074 (8.14 s/sec)
0: epoch: 2 [3/5 (60%)]	Loss: 0.82496 : 0.22413 :: 0.06761 (8.10 s/sec)
0: epoch: 2 [4/5 (80%)]	Loss: 0.71389 : 0.17182 :: 0.07125 (8.18 s/sec)
