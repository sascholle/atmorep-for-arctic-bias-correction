0: Wandb run: atmorep-xwrftt8t-19277042
0: l40360:1753919:1753919 [0] NCCL INFO Bootstrap : Using ib0:10.128.9.102<0>
0: l40360:1753919:1753919 [0] NCCL INFO NET/Plugin: No plugin found (libnccl-net.so)
0: l40360:1753919:1753919 [0] NCCL INFO NET/Plugin: Plugin load returned 2 : libnccl-net.so: cannot open shared object file: No such file or directory : when loading libnccl-net.so
0: l40360:1753919:1753919 [0] NCCL INFO NET/Plugin: Using internal network plugin.
0: l40360:1753919:1753919 [0] NCCL INFO cudaDriverVersion 12060
0: NCCL version 2.21.5+cuda12.4
0: l40360:1753919:1754532 [0] NCCL INFO NET/IB : Using [0]mlx5_0:1/IB [1]mlx5_1:1/IB [RO]; OOB ib0:10.128.9.102<0>
0: l40360:1753919:1754532 [0] NCCL INFO Using non-device net plugin version 0
0: l40360:1753919:1754532 [0] NCCL INFO Using network IB
0: l40360:1753919:1754532 [0] NCCL INFO DMA-BUF is available on GPU device 0
0: l40360:1753919:1754532 [0] NCCL INFO ncclCommInitRank comm 0x55555f1056a0 rank 0 nranks 1 cudaDev 0 nvmlDev 0 busId 3000 commId 0x64d986e3d4ec24af - Init START
0: l40360:1753919:1754532 [0] NCCL INFO Setting affinity for GPU 0 to ffff0000,00000000,00000000,00000000,ffff0000,00000000
0: l40360:1753919:1754532 [0] NCCL INFO comm 0x55555f1056a0 rank 0 nRanks 1 nNodes 1 localRanks 1 localRank 0 MNNVL 0
0: l40360:1753919:1754532 [0] NCCL INFO Channel 00/32 :    0
0: l40360:1753919:1754532 [0] NCCL INFO Channel 01/32 :    0
0: l40360:1753919:1754532 [0] NCCL INFO Channel 02/32 :    0
0: l40360:1753919:1754532 [0] NCCL INFO Channel 03/32 :    0
0: l40360:1753919:1754532 [0] NCCL INFO Channel 04/32 :    0
0: l40360:1753919:1754532 [0] NCCL INFO Channel 05/32 :    0
0: l40360:1753919:1754532 [0] NCCL INFO Channel 06/32 :    0
0: l40360:1753919:1754532 [0] NCCL INFO Channel 07/32 :    0
0: l40360:1753919:1754532 [0] NCCL INFO Channel 08/32 :    0
0: l40360:1753919:1754532 [0] NCCL INFO Channel 09/32 :    0
0: l40360:1753919:1754532 [0] NCCL INFO Channel 10/32 :    0
0: l40360:1753919:1754532 [0] NCCL INFO Channel 11/32 :    0
0: l40360:1753919:1754532 [0] NCCL INFO Channel 12/32 :    0
0: l40360:1753919:1754532 [0] NCCL INFO Channel 13/32 :    0
0: l40360:1753919:1754532 [0] NCCL INFO Channel 14/32 :    0
0: l40360:1753919:1754532 [0] NCCL INFO Channel 15/32 :    0
0: l40360:1753919:1754532 [0] NCCL INFO Channel 16/32 :    0
0: l40360:1753919:1754532 [0] NCCL INFO Channel 17/32 :    0
0: l40360:1753919:1754532 [0] NCCL INFO Channel 18/32 :    0
0: l40360:1753919:1754532 [0] NCCL INFO Channel 19/32 :    0
0: l40360:1753919:1754532 [0] NCCL INFO Channel 20/32 :    0
0: l40360:1753919:1754532 [0] NCCL INFO Channel 21/32 :    0
0: l40360:1753919:1754532 [0] NCCL INFO Channel 22/32 :    0
0: l40360:1753919:1754532 [0] NCCL INFO Channel 23/32 :    0
0: l40360:1753919:1754532 [0] NCCL INFO Channel 24/32 :    0
0: l40360:1753919:1754532 [0] NCCL INFO Channel 25/32 :    0
0: l40360:1753919:1754532 [0] NCCL INFO Channel 26/32 :    0
0: l40360:1753919:1754532 [0] NCCL INFO Channel 27/32 :    0
0: l40360:1753919:1754532 [0] NCCL INFO Channel 28/32 :    0
0: l40360:1753919:1754532 [0] NCCL INFO Channel 29/32 :    0
0: l40360:1753919:1754532 [0] NCCL INFO Channel 30/32 :    0
0: l40360:1753919:1754532 [0] NCCL INFO Channel 31/32 :    0
0: l40360:1753919:1754532 [0] NCCL INFO Trees [0] -1/-1/-1->0->-1 [1] -1/-1/-1->0->-1 [2] -1/-1/-1->0->-1 [3] -1/-1/-1->0->-1 [4] -1/-1/-1->0->-1 [5] -1/-1/-1->0->-1 [6] -1/-1/-1->0->-1 [7] -1/-1/-1->0->-1 [8] -1/-1/-1->0->-1 [9] -1/-1/-1->0->-1 [10] -1/-1/-1->0->-1 [11] -1/-1/-1->0->-1 [12] -1/-1/-1->0->-1 [13] -1/-1/-1->0->-1 [14] -1/-1/-1->0->-1 [15] -1/-1/-1->0->-1 [16] -1/-1/-1->0->-1 [17] -1/-1/-1->0->-1 [18] -1/-1/-1->0->-1 [19] -1/-1/-1->0->-1 [20] -1/-1/-1->0->-1 [21] -1/-1/-1->0->-1 [22] -1/-1/-1->0->-1 [23] -1/-1/-1->0->-1 [24] -1/-1/-1->0->-1 [25] -1/-1/-1->0->-1 [26] -1/-1/-1->0->-1 [27] -1/-1/-1->0->-1 [28] -1/-1/-1->0->-1 [29] -1/-1/-1->0->-1 [30] -1/-1/-1->0->-1 [31] -1/-1/-1->0->-1
0: l40360:1753919:1754532 [0] NCCL INFO P2P Chunksize set to 131072
0: l40360:1753919:1754532 [0] NCCL INFO Connected all rings
0: l40360:1753919:1754532 [0] NCCL INFO Connected all trees
0: l40360:1753919:1754532 [0] NCCL INFO 32 coll channels, 32 collnet channels, 0 nvls channels, 32 p2p channels, 32 p2p channels per peer
0: l40360:1753919:1754532 [0] NCCL INFO TUNER/Plugin: Plugin load returned 11 : libnccl-net.so: cannot open shared object file: No such file or directory : when loading libnccl-tuner.so
0: l40360:1753919:1754532 [0] NCCL INFO TUNER/Plugin: Using internal tuner plugin.
0: l40360:1753919:1754532 [0] NCCL INFO ncclCommInitRank comm 0x55555f1056a0 rank 0 nranks 1 cudaDev 0 nvmlDev 0 busId 3000 commId 0x64d986e3d4ec24af - Init COMPLETE
0: Running Evaluate.evaluate with mode = BERT
0: Available keys in the Zarr dataset: ['data', 'data_sfc', 'lats', 'lons', 'time']
0: self.ds['data'] : (105192, 7, 5, 721, 1440) :: (105192,)
0: self.lats : (71,)
0: self.lons : (1440,)
0: Available keys in the Zarr dataset: ['data', 'data_sfc', 'lats', 'lons', 'time']
0: self.ds['data'] : (105192, 7, 5, 721, 1440) :: (105192,)
0: self.lats : (71,)
0: self.lons : (1440,)
0: ['cuda:0', 'cuda:1', 'cuda:2', 'cuda:3'] 0
0: ['cuda:0', 'cuda:1', 'cuda:2', 'cuda:3'] 0
0: ['cuda:0', 'cuda:1', 'cuda:2', 'cuda:3'] 0
0: ['cuda:0', 'cuda:1', 'cuda:2', 'cuda:3'] 0
0: ['cuda:0', 'cuda:1', 'cuda:2', 'cuda:3'] 0
0: ['cuda:0', 'cuda:1', 'cuda:2', 'cuda:3'] 0
0: ['cuda:0', 'cuda:1', 'cuda:2', 'cuda:3'] 0
0: ['cuda:0', 'cuda:1', 'cuda:2', 'cuda:3'] 0
0: Loaded model id = zxipahjj.
0: with_ddp : True
0: num_accs_per_task : 4
0: par_rank : 0
0: par_size : 1
0: fields : [['velocity_u', [1, 1024, ['velocity_v', 'temperature'], 0, ['j8dwr5qj', -2]], [96, 105, 114, 123, 137], [12, 3, 6], [3, 18, 18], [0.5, 0.9, 0.2, 0.05]], ['velocity_v', [1, 1024, ['velocity_u', 'temperature'], 0, ['0tlnm5up', -2]], [96, 105, 114, 123, 137], [12, 3, 6], [3, 18, 18], [0.5, 0.9, 0.2, 0.05]], ['specific_humidity', [1, 1024, ['velocity_u', 'velocity_v', 'temperature'], 0, ['v63l01zu', -2]], [96, 105, 114, 123, 137], [12, 3, 6], [3, 18, 18], [0.5, 0.9, 0.2, 0.05]], ['velocity_z', [1, 1024, ['velocity_u', 'velocity_v', 'temperature'], 0, ['9l1errbo', -2]], [96, 105, 114, 123, 137], [12, 3, 6], [3, 18, 18], [0.5, 0.9, 0.2, 0.05]], ['temperature', [1, 1024, ['velocity_u', 'velocity_v', 'specific_humidity'], 0, ['7ojls62c', -2]], [96, 105, 114, 123, 137], [12, 2, 4], [3, 27, 27], [0.5, 0.9, 0.2, 0.05], 'Local'], ['total_precip', [1, 1024, ['velocity_u', 'velocity_v', 'velocity_z', 'specific_humidity'], 0], [0], [12, 6, 12], [3, 9, 9], [0.25, 0.9, 0.1, 0.05]], ['t2m', [1, 1024, ['velocity_u', '
0: velocity_v', 'velocity_z', 'specific_humidity'], 0], [0], [12, 2, 4], [3, 27, 27], [0.5, 0.9, 0.2, 0.05], 'Local'], ['corrected_t2m', [1, 1024, ['velocity_u', 'velocity_v', 'velocity_z', 'specific_humidity'], 0], [0], [12, 2, 4], [3, 27, 27], [0.5, 0.9, 0.2, 0.05], 'Local']]
0: fields_prediction : [['velocity_u', 0.125], ['velocity_v', 0.125], ['specific_humidity', 0.05], ['velocity_z', 0.01], ['temperature', 0.1], ['total_precip', 0.01], ['t2m', 0.2], ['corrected_t2m', 0.38]]
0: fields_targets : []
0: years_train : [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020]
0: years_val : [2015]
0: month : None
0: geo_range_sampling : [[72.27, 90.0], [0.0, 360.0]]
0: time_sampling : 1
0: torch_seed : 5521420987310380410
0: batch_size_validation : 1
0: batch_size : 96
0: num_epochs : 128
0: num_samples_per_epoch : 480
0: num_samples_validate : 96
0: num_loader_workers : 5
0: size_token_info : 8
0: size_token_info_net : 16
0: grad_checkpointing : True
0: with_cls : False
0: with_mixed_precision : True
0: with_layernorm : True
0: coupling_num_heads_per_field : 1
0: dropout_rate : 0.05
0: with_qk_lnorm : True
0: encoder_num_layers : 6
0: encoder_num_heads : 16
0: encoder_num_mlp_layers : 2
0: encoder_att_type : dense
0: decoder_num_layers : 6
0: decoder_num_heads : 16
0: decoder_num_mlp_layers : 2
0: decoder_self_att : False
0: decoder_cross_att_ratio : 0.5
0: decoder_cross_att_rate : 1.0
0: decoder_att_type : dense
0: net_tail_num_nets : 16
0: net_tail_num_layers : 0
0: losses : ['mse_ensemble', 'stats']
0: optimizer_zero : False
0: lr_start : 1e-05
0: lr_max : 2e-05
0: lr_min : 1e-05
0: weight_decay : 0.025
0: lr_decay_rate : 1.025
0: lr_start_epochs : 3
0: model_log_frequency : 256
0: BERT_strategy : BERT
0: forecast_num_tokens : 2
0: BERT_fields_synced : False
0: BERT_mr_max : 2
0: log_test_num_ranks : 4
0: save_grads : False
0: profile : False
0: test_initial : False
0: attention : False
0: rng_seed : None
0: with_wandb : True
0: slurm_job_id : 19277042
0: wandb_id : xwrftt8t
0: file_path : /scratch/a/a270277/atmorep/era5_y2010_2020_res25_corrected_t2m.zarr
0: n_size : [36, 13.5, 27.0]
0: model_id : zxipahjj
0: with_pytest : True
0: lat_sampling_weighted : False
0: it == 0 and starting val norms printouts
0: validation loss for strategy=BERT at epoch 0 : 0.02825383096933365
0: validation loss for velocity_u : 0.0010430440306663513
0: validation loss for velocity_v : 0.0011307572713121772
0: validation loss for specific_humidity : 0.00021578332234639674
0: validation loss for velocity_z : 0.016977904364466667
0: validation loss for temperature : 0.0018372285412624478
0: validation loss for total_precip : 0.0026713002007454634
0: validation loss for t2m : 0.04290914162993431
0: validation loss for corrected_t2m : 0.15924549102783203
0: ============================= test session starts ==============================
0: platform linux -- Python 3.10.10, pytest-8.3.4, pluggy-1.5.0
0: rootdir: /work/ab1412
0: collected 3 items
0: 
0: atmorep/tests/validation_test.py Sample 86, Level 96: Timestamp 2015-01-17 02:00:00, Shape (18, 18)
0: Sample 88, Level 96: Timestamp 2015-01-30 00:00:00, Shape (18, 18)
0: Sample 27, Level 96: Timestamp 2015-05-05 09:00:00, Shape (18, 18)
0: Sample 29, Level 96: Timestamp 2015-04-13 13:00:00, Shape (18, 18)
0: Sample 3, Level 96: Timestamp 2015-12-20 02:00:00, Shape (18, 18)
0: .Field: velocity_u, levels: [0], level: 0, level_idx: 0, samples: [36, 94, 5, 95, 55, 74, 39, 60, 53, 46, 47, 24, 80, 34, 66, 14, 44, 59, 41, 81, 70, 45, 76, 35, 54, 8, 7, 73, 18, 12, 92, 42, 4, 83, 20, 28, 68, 50, 85, 2, 15, 37, 38, 26, 52, 31, 89, 43, 64, 25]
0: F
0: 
0: =================================== FAILURES ===================================
0: _______________________________ test_coordinates _______________________________
0: 
0: field = 'velocity_u', model_id = 'xwrftt8t', BERT = True, epoch = 0
0: 
0:     def test_coordinates(field, model_id, BERT, epoch = 0):
0:         """
0:         Check that coordinates match between target and prediction.
0:         Check also that latitude and longitudes are in geographical coordinates
0:         50 random samples.
0:         """
0:     
0:         store_t = zarr.ZipStore(atmorep_target().format(model_id, model_id, str(epoch).zfill(5)))
0:         target = zarr.group(store_t)
0:     
0:         store_p = zarr.ZipStore(atmorep_pred().format(model_id, model_id, str(epoch).zfill(5)))
0:         pred = zarr.group(store_p)
0:     
0:         nsamples = min(len(target[field]), 50)
0:         samples = rnd.sample(range(len(target[field])), nsamples)
0:         #levels = [int(f.split("=")[1]) for f in target[f"{field}/sample=00000"]] if BERT else target[f"{field}/sample=00000"].ml[:]
0:         ##### new levels for surface fields - added this test ####
0:         if field in ['t2m', 'total_precip', 'corrected_t2m']:
0:             levels = [0]
0:         elif 'ml' in target[f"{field}/sample=00000"]:
0:             levels = target[f"{field}/sample=00000"].ml[:]
0:         else:
0:             levels = [0]
0:         #####
0:         get_data = get_BERT if BERT else get_forecast
0:     
0:         for level in levels:
0:             ### also added this
0:             if len(levels) == 1:
0:                 level_idx = 0
0:             else:
0:                 level_idx = level if BERT else np.where(np.array(levels) == level)[0].tolist()[0]
0:     
0:             print(f"Field: {field}, levels: {levels}, level: {level}, level_idx: {level_idx}, samples: {samples}")
0:     
0:             ####
0:             for s in samples:
0: >               _, datetime_target, lats_target, lons_target = get_data(target,field, s, level_idx)
0: 
0: atmorep/tests/validation_test.py:179: 
0: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
0: atmorep/tests/test_utils.py:28: in get_BERT
0:     atmorep_sample = atmorep[f"{field}/sample={sample:05d}/ml={level:05d}"]
0: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
0: 
0: self = <zarr.hierarchy.Group '/'>, item = 'velocity_u/sample=00036/ml=00000'
0: 
0:     def __getitem__(self, item):
0:         """Obtain a group member.
0:     
0:         Parameters
0:         ----------
0:         item : string
0:             Member name or path.
0:     
0:         Examples
0:         --------
0:         >>> import zarr
0:         >>> g1 = zarr.group()
0:         >>> d1 = g1.create_dataset('foo/bar/baz', shape=100, chunks=10)
0:         >>> g1['foo']
0:         <zarr.hierarchy.Group '/foo'>
0:         >>> g1['foo/bar']
0:         <zarr.hierarchy.Group '/foo/bar'>
0:         >>> g1['foo/bar/baz']
0:         <zarr.core.Array '/foo/bar/baz' (100,) float64>
0:     
0:         """
0:         path = self._item_path(item)
0:         try:
0:             return Array(
0:                 self._store,
0:                 read_only=self._read_only,
0:                 path=path,
0:                 chunk_store=self._chunk_store,
0:                 synchronizer=self._synchronizer,
0:                 cache_attrs=self.attrs.cache,
0:                 zarr_version=self._version,
0:                 meta_array=self._meta_array,
0:             )
0:         except ArrayNotFoundError:
0:             pass
0:     
0:         try:
0:             return Group(
0:                 self._store,
0:                 read_only=self._read_only,
0:                 path=path,
0:                 chunk_store=self._chunk_store,
0:                 cache_attrs=self.attrs.cache,
0:                 synchronizer=self._synchronizer,
0:                 zarr_version=self._version,
0:                 meta_array=self._meta_array,
0:             )
0:         except GroupNotFoundError:
0:             pass
0:     
0:         if self._version == 3:
0:             implicit_group = meta_root + path + "/"
0:             # non-empty folder in the metadata path implies an implicit group
0:             if self._store.list_prefix(implicit_group):
0:                 return Group(
0:                     self._store,
0:                     read_only=self._read_only,
0:                     path=path,
0:                     chunk_store=self._chunk_store,
0:                     cache_attrs=self.attrs.cache,
0:                     synchronizer=self._synchronizer,
0:                     zarr_version=self._version,
0:                     meta_array=self._meta_array,
0:                 )
0:             else:
0:                 raise KeyError(item)
0:         else:
0: >           raise KeyError(item)
0: E           KeyError: 'velocity_u/sample=00036/ml=00000'
0: 
0: pyenv/lib/python3.10/site-packages/zarr/hierarchy.py:511: KeyError
0: =========================== short test summary info ============================
0: FAILED atmorep/tests/validation_test.py::test_coordinates - KeyError: 'veloci...
0: !!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 1 failures !!!!!!!!!!!!!!!!!!!!!!!!!!!
0: ========================= 1 failed, 1 passed in 8.79s ==========================
0: ============================= test session starts ==============================
0: platform linux -- Python 3.10.10, pytest-8.3.4, pluggy-1.5.0
0: rootdir: /work/ab1412
0: collected 3 items
0: 
0: atmorep/tests/validation_test.py Sample 50, Level 96: Timestamp 2015-12-16 18:00:00, Shape (18, 18)
0: Sample 53, Level 96: Timestamp 2015-08-24 00:00:00, Shape (18, 18)
0: Sample 30, Level 96: Timestamp 2015-02-16 14:00:00, Shape (18, 18)
0: Sample 84, Level 96: Timestamp 2015-09-20 11:00:00, Shape (18, 18)
0: Sample 79, Level 96: Timestamp 2015-11-16 03:00:00, Shape (18, 18)
0: .Field: velocity_v, levels: [0], level: 0, level_idx: 0, samples: [76, 5, 53, 62, 27, 47, 71, 43, 41, 56, 55, 31, 32, 7, 25, 84, 3, 81, 59, 48, 4, 75, 61, 37, 22, 14, 6, 91, 20, 46, 86, 83, 64, 92, 51, 80, 63, 23, 94, 21, 36, 38, 26, 39, 85, 74, 50, 35, 42, 40]
0: F
0: 
0: =================================== FAILURES ===================================
0: _______________________________ test_coordinates _______________________________
0: 
0: field = 'velocity_v', model_id = 'xwrftt8t', BERT = True, epoch = 0
0: 
0:     def test_coordinates(field, model_id, BERT, epoch = 0):
0:         """
0:         Check that coordinates match between target and prediction.
0:         Check also that latitude and longitudes are in geographical coordinates
0:         50 random samples.
0:         """
0:     
0:         store_t = zarr.ZipStore(atmorep_target().format(model_id, model_id, str(epoch).zfill(5)))
0:         target = zarr.group(store_t)
0:     
0:         store_p = zarr.ZipStore(atmorep_pred().format(model_id, model_id, str(epoch).zfill(5)))
0:         pred = zarr.group(store_p)
0:     
0:         nsamples = min(len(target[field]), 50)
0:         samples = rnd.sample(range(len(target[field])), nsamples)
0:         #levels = [int(f.split("=")[1]) for f in target[f"{field}/sample=00000"]] if BERT else target[f"{field}/sample=00000"].ml[:]
0:         ##### new levels for surface fields - added this test ####
0:         if field in ['t2m', 'total_precip', 'corrected_t2m']:
0:             levels = [0]
0:         elif 'ml' in target[f"{field}/sample=00000"]:
0:             levels = target[f"{field}/sample=00000"].ml[:]
0:         else:
0:             levels = [0]
0:         #####
0:         get_data = get_BERT if BERT else get_forecast
0:     
0:         for level in levels:
0:             ### also added this
0:             if len(levels) == 1:
0:                 level_idx = 0
0:             else:
0:                 level_idx = level if BERT else np.where(np.array(levels) == level)[0].tolist()[0]
0:     
0:             print(f"Field: {field}, levels: {levels}, level: {level}, level_idx: {level_idx}, samples: {samples}")
0:     
0:             ####
0:             for s in samples:
0: >               _, datetime_target, lats_target, lons_target = get_data(target,field, s, level_idx)
0: 
0: atmorep/tests/validation_test.py:179: 
0: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
0: atmorep/tests/test_utils.py:28: in get_BERT
0:     atmorep_sample = atmorep[f"{field}/sample={sample:05d}/ml={level:05d}"]
0: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
0: 
0: self = <zarr.hierarchy.Group '/'>, item = 'velocity_v/sample=00076/ml=00000'
0: 
0:     def __getitem__(self, item):
0:         """Obtain a group member.
0:     
0:         Parameters
0:         ----------
0:         item : string
0:             Member name or path.
0:     
0:         Examples
0:         --------
0:         >>> import zarr
0:         >>> g1 = zarr.group()
0:         >>> d1 = g1.create_dataset('foo/bar/baz', shape=100, chunks=10)
0:         >>> g1['foo']
0:         <zarr.hierarchy.Group '/foo'>
0:         >>> g1['foo/bar']
0:         <zarr.hierarchy.Group '/foo/bar'>
0:         >>> g1['foo/bar/baz']
0:         <zarr.core.Array '/foo/bar/baz' (100,) float64>
0:     
0:         """
0:         path = self._item_path(item)
0:         try:
0:             return Array(
0:                 self._store,
0:                 read_only=self._read_only,
0:                 path=path,
0:                 chunk_store=self._chunk_store,
0:                 synchronizer=self._synchronizer,
0:                 cache_attrs=self.attrs.cache,
0:                 zarr_version=self._version,
0:                 meta_array=self._meta_array,
0:             )
0:         except ArrayNotFoundError:
0:             pass
0:     
0:         try:
0:             return Group(
0:                 self._store,
0:                 read_only=self._read_only,
0:                 path=path,
0:                 chunk_store=self._chunk_store,
0:                 cache_attrs=self.attrs.cache,
0:                 synchronizer=self._synchronizer,
0:                 zarr_version=self._version,
0:                 meta_array=self._meta_array,
0:             )
0:         except GroupNotFoundError:
0:             pass
0:     
0:         if self._version == 3:
0:             implicit_group = meta_root + path + "/"
0:             # non-empty folder in the metadata path implies an implicit group
0:             if self._store.list_prefix(implicit_group):
0:                 return Group(
0:                     self._store,
0:                     read_only=self._read_only,
0:                     path=path,
0:                     chunk_store=self._chunk_store,
0:                     cache_attrs=self.attrs.cache,
0:                     synchronizer=self._synchronizer,
0:                     zarr_version=self._version,
0:                     meta_array=self._meta_array,
0:                 )
0:             else:
0:                 raise KeyError(item)
0:         else:
0: >           raise KeyError(item)
0: E           KeyError: 'velocity_v/sample=00076/ml=00000'
0: 
0: pyenv/lib/python3.10/site-packages/zarr/hierarchy.py:511: KeyError
0: =========================== short test summary info ============================
0: FAILED atmorep/tests/validation_test.py::test_coordinates - KeyError: 'veloci...
0: !!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 1 failures !!!!!!!!!!!!!!!!!!!!!!!!!!!
0: ========================= 1 failed, 1 passed in 0.89s ==========================
0: ============================= test session starts ==============================
0: platform linux -- Python 3.10.10, pytest-8.3.4, pluggy-1.5.0
0: rootdir: /work/ab1412
0: collected 3 items
0: 
0: atmorep/tests/validation_test.py Sample 83, Level 96: Timestamp 2015-01-23 05:00:00, Shape (18, 18)
0: Sample 89, Level 96: Timestamp 2015-08-16 07:00:00, Shape (18, 18)
0: Sample 74, Level 96: Timestamp 2015-04-19 06:00:00, Shape (18, 18)
0: Sample 86, Level 96: Timestamp 2015-01-16 11:00:00, Shape (18, 18)
0: Sample 51, Level 96: Timestamp 2015-10-07 08:00:00, Shape (18, 18)
0: .Field: specific_humidity, levels: [0], level: 0, level_idx: 0, samples: [78, 87, 34, 29, 25, 37, 44, 67, 22, 51, 6, 0, 40, 71, 30, 3, 43, 49, 86, 62, 35, 17, 53, 12, 68, 63, 75, 7, 33, 10, 23, 64, 60, 21, 32, 31, 77, 76, 84, 28, 73, 94, 13, 83, 72, 66, 42, 95, 59, 4]
0: F
0: 
0: =================================== FAILURES ===================================
0: _______________________________ test_coordinates _______________________________
0: 
0: field = 'specific_humidity', model_id = 'xwrftt8t', BERT = True, epoch = 0
0: 
0:     def test_coordinates(field, model_id, BERT, epoch = 0):
0:         """
0:         Check that coordinates match between target and prediction.
0:         Check also that latitude and longitudes are in geographical coordinates
0:         50 random samples.
0:         """
0:     
0:         store_t = zarr.ZipStore(atmorep_target().format(model_id, model_id, str(epoch).zfill(5)))
0:         target = zarr.group(store_t)
0:     
0:         store_p = zarr.ZipStore(atmorep_pred().format(model_id, model_id, str(epoch).zfill(5)))
0:         pred = zarr.group(store_p)
0:     
0:         nsamples = min(len(target[field]), 50)
0:         samples = rnd.sample(range(len(target[field])), nsamples)
0:         #levels = [int(f.split("=")[1]) for f in target[f"{field}/sample=00000"]] if BERT else target[f"{field}/sample=00000"].ml[:]
0:         ##### new levels for surface fields - added this test ####
0:         if field in ['t2m', 'total_precip', 'corrected_t2m']:
0:             levels = [0]
0:         elif 'ml' in target[f"{field}/sample=00000"]:
0:             levels = target[f"{field}/sample=00000"].ml[:]
0:         else:
0:             levels = [0]
0:         #####
0:         get_data = get_BERT if BERT else get_forecast
0:     
0:         for level in levels:
0:             ### also added this
0:             if len(levels) == 1:
0:                 level_idx = 0
0:             else:
0:                 level_idx = level if BERT else np.where(np.array(levels) == level)[0].tolist()[0]
0:     
0:             print(f"Field: {field}, levels: {levels}, level: {level}, level_idx: {level_idx}, samples: {samples}")
0:     
0:             ####
0:             for s in samples:
0: >               _, datetime_target, lats_target, lons_target = get_data(target,field, s, level_idx)
0: 
0: atmorep/tests/validation_test.py:179: 
0: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
0: atmorep/tests/test_utils.py:28: in get_BERT
0:     atmorep_sample = atmorep[f"{field}/sample={sample:05d}/ml={level:05d}"]
0: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
0: 
0: self = <zarr.hierarchy.Group '/'>
0: item = 'specific_humidity/sample=00078/ml=00000'
0: 
0:     def __getitem__(self, item):
0:         """Obtain a group member.
0:     
0:         Parameters
0:         ----------
0:         item : string
0:             Member name or path.
0:     
0:         Examples
0:         --------
0:         >>> import zarr
0:         >>> g1 = zarr.group()
0:         >>> d1 = g1.create_dataset('foo/bar/baz', shape=100, chunks=10)
0:         >>> g1['foo']
0:         <zarr.hierarchy.Group '/foo'>
0:         >>> g1['foo/bar']
0:         <zarr.hierarchy.Group '/foo/bar'>
0:         >>> g1['foo/bar/baz']
0:         <zarr.core.Array '/foo/bar/baz' (100,) float64>
0:     
0:         """
0:         path = self._item_path(item)
0:         try:
0:             return Array(
0:                 self._store,
0:                 read_only=self._read_only,
0:                 path=path,
0:                 chunk_store=self._chunk_store,
0:                 synchronizer=self._synchronizer,
0:                 cache_attrs=self.attrs.cache,
0:                 zarr_version=self._version,
0:                 meta_array=self._meta_array,
0:             )
0:         except ArrayNotFoundError:
0:             pass
0:     
0:         try:
0:             return Group(
0:                 self._store,
0:                 read_only=self._read_only,
0:                 path=path,
0:                 chunk_store=self._chunk_store,
0:                 cache_attrs=self.attrs.cache,
0:                 synchronizer=self._synchronizer,
0:                 zarr_version=self._version,
0:                 meta_array=self._meta_array,
0:             )
0:         except GroupNotFoundError:
0:             pass
0:     
0:         if self._version == 3:
0:             implicit_group = meta_root + path + "/"
0:             # non-empty folder in the metadata path implies an implicit group
0:             if self._store.list_prefix(implicit_group):
0:                 return Group(
0:                     self._store,
0:                     read_only=self._read_only,
0:                     path=path,
0:                     chunk_store=self._chunk_store,
0:                     cache_attrs=self.attrs.cache,
0:                     synchronizer=self._synchronizer,
0:                     zarr_version=self._version,
0:                     meta_array=self._meta_array,
0:                 )
0:             else:
0:                 raise KeyError(item)
0:         else:
0: >           raise KeyError(item)
0: E           KeyError: 'specific_humidity/sample=00078/ml=00000'
0: 
0: pyenv/lib/python3.10/site-packages/zarr/hierarchy.py:511: KeyError
0: =========================== short test summary info ============================
0: FAILED atmorep/tests/validation_test.py::test_coordinates - KeyError: 'specif...
0: !!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 1 failures !!!!!!!!!!!!!!!!!!!!!!!!!!!
0: ========================= 1 failed, 1 passed in 0.96s ==========================
0: ============================= test session starts ==============================
0: platform linux -- Python 3.10.10, pytest-8.3.4, pluggy-1.5.0
0: rootdir: /work/ab1412
0: collected 3 items
0: 
0: atmorep/tests/validation_test.py Sample 65, Level 96: Timestamp 2015-10-18 20:00:00, Shape (18, 18)
0: Sample 17, Level 96: Timestamp 2015-10-03 14:00:00, Shape (18, 18)
0: Sample 18, Level 96: Timestamp 2015-01-15 17:00:00, Shape (18, 18)
0: Sample 79, Level 96: Timestamp 2015-11-17 12:00:00, Shape (18, 18)
0: Sample 61, Level 96: Timestamp 2015-03-04 11:00:00, Shape (18, 18)
0: .Field: velocity_z, levels: [0], level: 0, level_idx: 0, samples: [6, 79, 48, 1, 59, 11, 58, 38, 94, 32, 47, 62, 10, 74, 77, 30, 16, 34, 93, 37, 33, 83, 81, 44, 92, 78, 2, 29, 40, 69, 24, 0, 67, 70, 36, 8, 23, 9, 75, 19, 5, 35, 22, 84, 4, 42, 87, 86, 20, 88]
0: F
0: 
0: =================================== FAILURES ===================================
0: _______________________________ test_coordinates _______________________________
0: 
0: field = 'velocity_z', model_id = 'xwrftt8t', BERT = True, epoch = 0
0: 
0:     def test_coordinates(field, model_id, BERT, epoch = 0):
0:         """
0:         Check that coordinates match between target and prediction.
0:         Check also that latitude and longitudes are in geographical coordinates
0:         50 random samples.
0:         """
0:     
0:         store_t = zarr.ZipStore(atmorep_target().format(model_id, model_id, str(epoch).zfill(5)))
0:         target = zarr.group(store_t)
0:     
0:         store_p = zarr.ZipStore(atmorep_pred().format(model_id, model_id, str(epoch).zfill(5)))
0:         pred = zarr.group(store_p)
0:     
0:         nsamples = min(len(target[field]), 50)
0:         samples = rnd.sample(range(len(target[field])), nsamples)
0:         #levels = [int(f.split("=")[1]) for f in target[f"{field}/sample=00000"]] if BERT else target[f"{field}/sample=00000"].ml[:]
0:         ##### new levels for surface fields - added this test ####
0:         if field in ['t2m', 'total_precip', 'corrected_t2m']:
0:             levels = [0]
0:         elif 'ml' in target[f"{field}/sample=00000"]:
0:             levels = target[f"{field}/sample=00000"].ml[:]
0:         else:
0:             levels = [0]
0:         #####
0:         get_data = get_BERT if BERT else get_forecast
0:     
0:         for level in levels:
0:             ### also added this
0:             if len(levels) == 1:
0:                 level_idx = 0
0:             else:
0:                 level_idx = level if BERT else np.where(np.array(levels) == level)[0].tolist()[0]
0:     
0:             print(f"Field: {field}, levels: {levels}, level: {level}, level_idx: {level_idx}, samples: {samples}")
0:     
0:             ####
0:             for s in samples:
0: >               _, datetime_target, lats_target, lons_target = get_data(target,field, s, level_idx)
0: 
0: atmorep/tests/validation_test.py:179: 
0: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
0: atmorep/tests/test_utils.py:28: in get_BERT
0:     atmorep_sample = atmorep[f"{field}/sample={sample:05d}/ml={level:05d}"]
0: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
0: 
0: self = <zarr.hierarchy.Group '/'>, item = 'velocity_z/sample=00006/ml=00000'
0: 
0:     def __getitem__(self, item):
0:         """Obtain a group member.
0:     
0:         Parameters
0:         ----------
0:         item : string
0:             Member name or path.
0:     
0:         Examples
0:         --------
0:         >>> import zarr
0:         >>> g1 = zarr.group()
0:         >>> d1 = g1.create_dataset('foo/bar/baz', shape=100, chunks=10)
0:         >>> g1['foo']
0:         <zarr.hierarchy.Group '/foo'>
0:         >>> g1['foo/bar']
0:         <zarr.hierarchy.Group '/foo/bar'>
0:         >>> g1['foo/bar/baz']
0:         <zarr.core.Array '/foo/bar/baz' (100,) float64>
0:     
0:         """
0:         path = self._item_path(item)
0:         try:
0:             return Array(
0:                 self._store,
0:                 read_only=self._read_only,
0:                 path=path,
0:                 chunk_store=self._chunk_store,
0:                 synchronizer=self._synchronizer,
0:                 cache_attrs=self.attrs.cache,
0:                 zarr_version=self._version,
0:                 meta_array=self._meta_array,
0:             )
0:         except ArrayNotFoundError:
0:             pass
0:     
0:         try:
0:             return Group(
0:                 self._store,
0:                 read_only=self._read_only,
0:                 path=path,
0:                 chunk_store=self._chunk_store,
0:                 cache_attrs=self.attrs.cache,
0:                 synchronizer=self._synchronizer,
0:                 zarr_version=self._version,
0:                 meta_array=self._meta_array,
0:             )
0:         except GroupNotFoundError:
0:             pass
0:     
0:         if self._version == 3:
0:             implicit_group = meta_root + path + "/"
0:             # non-empty folder in the metadata path implies an implicit group
0:             if self._store.list_prefix(implicit_group):
0:                 return Group(
0:                     self._store,
0:                     read_only=self._read_only,
0:                     path=path,
0:                     chunk_store=self._chunk_store,
0:                     cache_attrs=self.attrs.cache,
0:                     synchronizer=self._synchronizer,
0:                     zarr_version=self._version,
0:                     meta_array=self._meta_array,
0:                 )
0:             else:
0:                 raise KeyError(item)
0:         else:
0: >           raise KeyError(item)
0: E           KeyError: 'velocity_z/sample=00006/ml=00000'
0: 
0: pyenv/lib/python3.10/site-packages/zarr/hierarchy.py:511: KeyError
0: =========================== short test summary info ============================
0: FAILED atmorep/tests/validation_test.py::test_coordinates - KeyError: 'veloci...
0: !!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 1 failures !!!!!!!!!!!!!!!!!!!!!!!!!!!
0: ========================= 1 failed, 1 passed in 0.83s ==========================
0: ============================= test session starts ==============================
0: platform linux -- Python 3.10.10, pytest-8.3.4, pluggy-1.5.0
0: rootdir: /work/ab1412
0: collected 3 items
0: 
0: atmorep/tests/validation_test.py Sample 59, Level 96: Timestamp 2015-04-02 23:00:00, Shape (27, 27)
0: Sample 2, Level 96: Timestamp 2015-02-23 05:00:00, Shape (27, 27)
0: Sample 64, Level 96: Timestamp 2015-12-02 11:00:00, Shape (27, 27)
0: Sample 39, Level 96: Timestamp 2015-07-22 16:00:00, Shape (27, 27)
0: Sample 74, Level 96: Timestamp 2015-04-18 03:00:00, Shape (27, 27)
0: .Field: temperature, levels: [0], level: 0, level_idx: 0, samples: [39, 90, 69, 35, 17, 15, 7, 78, 68, 95, 21, 74, 89, 16, 80, 75, 0, 84, 61, 62, 3, 40, 92, 5, 23, 2, 55, 63, 46, 91, 76, 88, 49, 8, 9, 32, 1, 51, 45, 20, 30, 71, 58, 94, 53, 57, 33, 12, 19, 77]
0: F
0: 
0: =================================== FAILURES ===================================
0: _______________________________ test_coordinates _______________________________
0: 
0: field = 'temperature', model_id = 'xwrftt8t', BERT = True, epoch = 0
0: 
0:     def test_coordinates(field, model_id, BERT, epoch = 0):
0:         """
0:         Check that coordinates match between target and prediction.
0:         Check also that latitude and longitudes are in geographical coordinates
0:         50 random samples.
0:         """
0:     
0:         store_t = zarr.ZipStore(atmorep_target().format(model_id, model_id, str(epoch).zfill(5)))
0:         target = zarr.group(store_t)
0:     
0:         store_p = zarr.ZipStore(atmorep_pred().format(model_id, model_id, str(epoch).zfill(5)))
0:         pred = zarr.group(store_p)
0:     
0:         nsamples = min(len(target[field]), 50)
0:         samples = rnd.sample(range(len(target[field])), nsamples)
0:         #levels = [int(f.split("=")[1]) for f in target[f"{field}/sample=00000"]] if BERT else target[f"{field}/sample=00000"].ml[:]
0:         ##### new levels for surface fields - added this test ####
0:         if field in ['t2m', 'total_precip', 'corrected_t2m']:
0:             levels = [0]
0:         elif 'ml' in target[f"{field}/sample=00000"]:
0:             levels = target[f"{field}/sample=00000"].ml[:]
0:         else:
0:             levels = [0]
0:         #####
0:         get_data = get_BERT if BERT else get_forecast
0:     
0:         for level in levels:
0:             ### also added this
0:             if len(levels) == 1:
0:                 level_idx = 0
0:             else:
0:                 level_idx = level if BERT else np.where(np.array(levels) == level)[0].tolist()[0]
0:     
0:             print(f"Field: {field}, levels: {levels}, level: {level}, level_idx: {level_idx}, samples: {samples}")
0:     
0:             ####
0:             for s in samples:
0: >               _, datetime_target, lats_target, lons_target = get_data(target,field, s, level_idx)
0: 
0: atmorep/tests/validation_test.py:179: 
0: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
0: atmorep/tests/test_utils.py:28: in get_BERT
0:     atmorep_sample = atmorep[f"{field}/sample={sample:05d}/ml={level:05d}"]
0: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
0: 
0: self = <zarr.hierarchy.Group '/'>, item = 'temperature/sample=00039/ml=00000'
0: 
0:     def __getitem__(self, item):
0:         """Obtain a group member.
0:     
0:         Parameters
0:         ----------
0:         item : string
0:             Member name or path.
0:     
0:         Examples
0:         --------
0:         >>> import zarr
0:         >>> g1 = zarr.group()
0:         >>> d1 = g1.create_dataset('foo/bar/baz', shape=100, chunks=10)
0:         >>> g1['foo']
0:         <zarr.hierarchy.Group '/foo'>
0:         >>> g1['foo/bar']
0:         <zarr.hierarchy.Group '/foo/bar'>
0:         >>> g1['foo/bar/baz']
0:         <zarr.core.Array '/foo/bar/baz' (100,) float64>
0:     
0:         """
0:         path = self._item_path(item)
0:         try:
0:             return Array(
0:                 self._store,
0:                 read_only=self._read_only,
0:                 path=path,
0:                 chunk_store=self._chunk_store,
0:                 synchronizer=self._synchronizer,
0:                 cache_attrs=self.attrs.cache,
0:                 zarr_version=self._version,
0:                 meta_array=self._meta_array,
0:             )
0:         except ArrayNotFoundError:
0:             pass
0:     
0:         try:
0:             return Group(
0:                 self._store,
0:                 read_only=self._read_only,
0:                 path=path,
0:                 chunk_store=self._chunk_store,
0:                 cache_attrs=self.attrs.cache,
0:                 synchronizer=self._synchronizer,
0:                 zarr_version=self._version,
0:                 meta_array=self._meta_array,
0:             )
0:         except GroupNotFoundError:
0:             pass
0:     
0:         if self._version == 3:
0:             implicit_group = meta_root + path + "/"
0:             # non-empty folder in the metadata path implies an implicit group
0:             if self._store.list_prefix(implicit_group):
0:                 return Group(
0:                     self._store,
0:                     read_only=self._read_only,
0:                     path=path,
0:                     chunk_store=self._chunk_store,
0:                     cache_attrs=self.attrs.cache,
0:                     synchronizer=self._synchronizer,
0:                     zarr_version=self._version,
0:                     meta_array=self._meta_array,
0:                 )
0:             else:
0:                 raise KeyError(item)
0:         else:
0: >           raise KeyError(item)
0: E           KeyError: 'temperature/sample=00039/ml=00000'
0: 
0: pyenv/lib/python3.10/site-packages/zarr/hierarchy.py:511: KeyError
0: =========================== short test summary info ============================
0: FAILED atmorep/tests/validation_test.py::test_coordinates - KeyError: 'temper...
0: !!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 1 failures !!!!!!!!!!!!!!!!!!!!!!!!!!!
0: ========================= 1 failed, 1 passed in 0.64s ==========================
0: ============================= test session starts ==============================
0: platform linux -- Python 3.10.10, pytest-8.3.4, pluggy-1.5.0
0: rootdir: /work/ab1412
0: collected 3 items
0: 
0: atmorep/tests/validation_test.py Sample 59, Level 0: Timestamp 2015-04-03 08:00:00, Shape (9, 9)
0: Sample 78, Level 0: Timestamp 2015-03-23 13:00:00, Shape (9, 9)
0: Sample 60, Level 0: Timestamp 2015-04-14 02:00:00, Shape (9, 9)
0: Sample 12, Level 0: Timestamp 2015-03-11 11:00:00, Shape (9, 9)
0: Sample 67, Level 0: Timestamp 2015-11-25 10:00:00, Shape (9, 9)
0: .Field: total_precip, levels: [0], level: 0, level_idx: 0, samples: [70, 49, 26, 0, 35, 7, 12, 4, 42, 38, 91, 41, 45, 10, 88, 80, 52, 28, 81, 20, 13, 71, 17, 93, 67, 74, 64, 61, 30, 92, 9, 86, 63, 27, 66, 55, 75, 36, 53, 44, 85, 15, 95, 46, 22, 68, 21, 94, 72, 58]
0: ..
0: 
0: ============================== 3 passed in 5.27s ===============================
0: ============================= test session starts ==============================
0: platform linux -- Python 3.10.10, pytest-8.3.4, pluggy-1.5.0
0: rootdir: /work/ab1412
0: collected 3 items
0: 
0: atmorep/tests/validation_test.py Sample 10, Level 0: Timestamp 2015-10-14 11:00:00, Shape (27, 27)
0: Sample 70, Level 0: Timestamp 2015-02-10 03:00:00, Shape (27, 27)
0: Sample 27, Level 0: Timestamp 2015-05-05 18:00:00, Shape (27, 27)
0: Sample 4, Level 0: Timestamp 2015-11-01 00:00:00, Shape (27, 27)
0: Sample 66, Level 0: Timestamp 2015-05-20 23:00:00, Shape (27, 27)
0: .Field: t2m, levels: [0], level: 0, level_idx: 0, samples: [10, 46, 64, 3, 12, 79, 72, 22, 2, 7, 84, 16, 44, 38, 18, 42, 47, 70, 93, 34, 26, 74, 81, 1, 68, 83, 87, 55, 88, 91, 60, 21, 61, 75, 80, 5, 69, 14, 35, 59, 94, 4, 66, 51, 89, 43, 19, 45, 27, 37]
0: ..
0: 
0: ============================== 3 passed in 2.20s ===============================
0: ============================= test session starts ==============================
0: platform linux -- Python 3.10.10, pytest-8.3.4, pluggy-1.5.0
0: rootdir: /work/ab1412
0: collected 3 items
0: 
0: atmorep/tests/validation_test.py Sample 71, Level 0: Timestamp 2015-01-30 16:00:00, Shape (27, 27)
0: Sample 56, Level 0: Timestamp 2015-07-11 01:00:00, Shape (27, 27)
0: Sample 40, Level 0: Timestamp 2015-07-12 05:00:00, Shape (27, 27)
0: Sample 21, Level 0: Timestamp 2015-12-12 08:00:00, Shape (27, 27)
0: Sample 7, Level 0: Timestamp 2015-08-08 13:00:00, Shape (27, 27)
0: .Field: corrected_t2m, levels: [0], level: 0, level_idx: 0, samples: [38, 22, 51, 47, 33, 23, 78, 34, 80, 15, 40, 91, 6, 81, 87, 56, 90, 57, 20, 79, 95, 58, 48, 17, 26, 89, 83, 54, 70, 14, 41, 36, 59, 55, 93, 88, 94, 27, 45, 67, 13, 7, 62, 69, 60, 24, 10, 5, 35, 42]
0: ..
0: 
0: ============================== 3 passed in 1.56s ===============================
0: time 354.1247136592865
0: [1;34mwandb[0m:
0: [1;34mwandb[0m: You can sync this run to the cloud by running:
0: [1;34mwandb[0m: [1mwandb sync /work/ab1412/atmorep/wandb/offline-run-20250821_215539-xwrftt8t[0m
0: [1;34mwandb[0m: Find logs at: [1;35mwandb/offline-run-20250821_215539-xwrftt8t/logs[0m
0: l40360:1753919:1754535 [0] NCCL INFO [Service thread] Connection closed by localRank 0
0: l40360:1753919:1755416 [0] NCCL INFO comm 0x55555f1056a0 rank 0 nranks 1 cudaDev 0 busId 3000 - Abort COMPLETE
